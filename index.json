[{"content":"Hey I\u0026rsquo;m Oleksiy! I do digital electronics, Linux sysadmin, c/c++ dev, x86, ARM, os development, embedded systems and everything bare-metal! I\u0026rsquo;m a Computer Engineering student in Turkey. My interests are mostly between hardware and software. Contact me from Telegram or freenode to talk about geeky stuff! savolla is my username on freenode\n","description":"i do digital electronics, linux, c/c++ dev, x86, ARM, os development, embedded systems and everything bare-metal!","id":2,"section":"","tags":null,"title":"about","uri":"https://savolla.github.io/about/"},{"content":"Bu post\u0026rsquo;da Türkçe olarak Cracking the Coding Interview kitabının özetini çıkartıyorum. Ilk ve ikinci bölümleri ingilizce yazdım, dert etmeyin onları revize edip Türkçeleştireceğim. Bu kitapta, iş başvurularında dikkat edilecek hususlar çok güzel anlatılmıştır. Ben de en azından özetini çıkararak önemli yerleri sizinle paylaşmaya karar verdim. İyi okumalar\nBölüm 1  recruiters look for the following;  analytical skills  how confidently you solved the problem how optimal was your solution how fast you are how efficient was your algorithm   coding skills  how clean your code is how good your style was did you handle errors or not   computer science knowledge. do you have strong foundation or not did you make challanging / interesting projects before or not do you communicate well or not   having knowledge of data structures and algorithms is really important and positively corelates with being a good developer the reason behind whiteboard coding is that recruiters want you to focus on actual problem solving instead of struggling in restricted computer environment when compilers spit errors all over the place. the code you write does not need to be perfect and it\u0026rsquo;s okay if it contains some syntactical errors. just show to the interviewer how you approach to the problem and write an acceptable code companies usually follow a pattern when selecting interview questions. there are two types of questions;  algorithm questions technology questions (do you have experience with techonology X?)   interviewers always compare your performance to other\u0026rsquo;s that came before and after you. even if you think that you performed well, a japanese hacker who came before you can change all the game. it\u0026rsquo;s all about luck m8 don\u0026rsquo;t think that you\u0026rsquo;ve been rejected immediately if you don\u0026rsquo;t get response in 2-3 days. your interviewer might still work on your and other assessments. be patient and calm if you\u0026rsquo;ve been rejected but really want that job you must wait for at least 6 months before re-application.  Bölüm 2  before face-to-face interview you always get a screen interview. this is actually a phone interview where skype or relative apps are used coding and algorithms questions are asked during the screen interview. questions are hard as ones that asked in face-to-face interview sometimes interviewer might give you a homework which you solve and send the code through e-mail. (rare case) the most of the time questions are asked in real time and you try to solve them while interviewer watches (common case) you do one or two screens before they take you to face-to-face arena  Bölüm 3   aşağıdaki maddelerde, bazı değişken durumlar anlatılmıştır;\n  görüşmeciler (interviewer) çok tecrübeli ve uzun süre çalışan geliştiricileri, daha düşük standartlarda görüp algoritmik soruları daha kolay sorabilir. ne de olsa bu insanlar mezun olalı yıllar olmuştur ve görüşmeciler, onların paslandıklarının farkındadırlar\n  bazı şirketlerde de tam tersi olabilir. yani uzun süre çalışanların daha çok problem çözdüğünü ve bu konuda yıllar geçtikçe daha iyi olduklarını düşünürler ve yeni mezunlara göre daha zor sorabilirler\n  çoğu zaman tecrübeli kişilere system tasarımı soruları gelirken yeni mezun olanlar bu konuda çalşma yapmadıkları için (daha çok akademik derslere ağırlık verdiklerinden) genelde bu sorulardan kurtulabilirler\n  yeni mezunlara göre tecrübelilerin, sorulara çok daha ayrıntılı cevap vermeleri beklenir. yani yeni mezunsak iş çok daha kolay. sadece algoritma sorularına çalışmamız (hackerrank, codewars) ve şu an zaman varken bol bol proje yapmamız yeterli olacaktır. tecrübelilerin iş bulması bizden daha zor\n    skill atrophy: bir yetenek ya da bilgi kullanılmadığında, o yeteneğin körelmesi anlamına gelir. bizim perspektifimizden bakıldığında, algoritma ve kodlama bir yetenektir ve asla atrofiye uğramaması gerekir\n   kitapta bu bölümde, SDET ve PM ile ilgili kariyer ve görüşme tavsiyeleri verilmiş. bu bizi şu anda ilgilendirmiyor.\n   SDET: (software design engineer and tester) yazılımları test eden elemanlardır. bunların genelde normal bir developerdan daha iyi olması beklenir çünkü bu iş aynı zamanda kalite kontrol\u0026lsquo;ün yazılım camiasındaki karşılığıdır. bu yüzden bir SDET\u0026rsquo;in iş bulması demek, buraya kadar bahsi geçen pozisyonlardan daha çok çalışması gerek demek oluyor\n  PM (Product Manager): daha çok takım yönetimi yapan ve geliştiricilerin ürettiği yazılımın sorumluluğunu üstlenen elemandır. kod yazmaktan çok işin business tarafıyla ilgilenir\n  bir startup\u0026rsquo;a katılmak istiyorsan;\n  CV\u0026rsquo;de ilk göze çarpan kısmın, yapılan projeler olması gerekir. startup alım süreçlerinde CV incelemesi sırasında kişinin ne kadar girişimci ve programlama konusunda ne kadar üretken olduğu, bu kısımda göze çarpar. yani \u0026ldquo;ben şu dilleri biliyorum\u0026rdquo;, \u0026ldquo;şu teknolojileri biliyorum\u0026rdquo;\u0026lsquo;a bakmazlar (genelde)\n  kesinlikle, bir startup görüşmecisiyle \u0026ldquo;samimi\u0026rdquo; ve \u0026ldquo;arkadaşça\u0026rdquo; iletişim kurulması gerekir. şirket henüz çok küçüktür ve insanlar yanlarında genelde takılabilecekleri insanlar arar. burada işin sosyal tarafı, iş tarafı kadar ağır basabilir\n  startup\u0026rsquo;daki projede kullanılan dil ile ilgili çok iyi bir derinliğe sahip ol çünkü sorular genelde dil spesifik gelir. (bir startup\u0026rsquo;a göre dil öğrenmek değil de bildiğimiz dilde iş yapan bir startup\u0026rsquo;a başvurmak çok daha efektif olur)\n  strtuplar tecrübe de isterler. buradan benim çıkarttığım, büyük şirketler, tecrübeli developerları görüşme esnasında çok hırpalarken, startuplarda genelde iş küçük olduğundan tecrübelileri havada kapıyor olabilirler. bu yüzden yeni mezun birinin büyük bir şirkette iş bulması, startup\u0026rsquo;da iş bulmasından daha kolaydır (?)\n     buradan sonrası, şirket içi iş görüşmelerinden ve interviewerlara tavsiyelerden bahsediyor. bizim için şu anlık önemli değil\n Bölüm 4 Tecrübe Kazanma Yolları  iyi bir tecrübe yoksa, iyi bir CV olmaz. iyi bir CV yoksa da kimse sizi iş görüşmesine çağırmaz öğrenciler bakımından yukarıdaki sorunun çözümü;  gerçek sorunlar çözen projeler yap staj yap startup ara boş zamanında bir proje yap, hackatonlara katıl, github\u0026rsquo;da open source bir projeye katkıda bulun    Iyi Bir CV Yazma Yolları   aslında şirketler birinde sadece şunları ararlar;\n zeki misin? kod yazabilir misin?  CV\u0026rsquo;de yazanlar, bu iki şeyin kanıtı olmalıdır. şirketlere zeki ve çalışkan olduğunuzu katınladığınız anda işi kaparsınız\n  CV yazarken, odak noktası kesinlikle \u0026ldquo;zeki misin?\u0026rdquo; ve \u0026ldquo;kod yazabiliyor musun?\u0026rdquo; sorularına cevap vermeli. teknik olmayan şeyeri (hobi gibi) CV\u0026rsquo;ye eklemek çok akıllıca değildir\n  öğrencilerin ve 10 seneden az tecrübesi olan kişilerin CV\u0026rsquo;si 1 sayfa olmalıdır. data tecrübeliler 1.5 ya da 2 sayfa olmalıdır\n  uzun bir CV hiç bir zaman faydalı değildir çünkü iş verenler CV\u0026rsquo;ye bakarken en fazla 10 saniye harcarlar.\n  CV\u0026rsquo;ye sadece sırasıyla;\n en büyük projeleri en büyük tecrübeleri (iş tecrübesi, programlama dilleri) en büyük başarılarını  yukarıdakilerden daha fazla şey yazmak, iş verenin sadece dikkatini dağıtır.\n  bazı işverenler, uzun CV gördüklerinde direk fırlatırlar..\n  CV her zaman İngilizce olmalıdır. her zaman ana dili ingilizce olan ya da bir tercumana okutup gramer ya da yazım yanlışlarınızı kontrol ettirin.\n  CV\u0026rsquo;de yaş, cinsiyet, medeni durum belirtmeyin. bunu yaparsanız, özellikle Amerika\u0026rsquo;da ters teper\n  Tecrübeler   eğer çok tecrübeliysen ve 1 sayfaya sığdıramıyorsan, 1 sayfaya sığdırmanın yollarını ara. ya da en önemsizleri ele. 1 sayfa is the key\n  tecrübe kısmında, iş geçmişinin tamamını yazmak önerilmez. çünkü çok iş değiştiren biri olarak görünürsün. onun yerine sadece en önemlileri yaz. her şirket isminin altına tek cümleyle ne yaptığını anlat. örnek bir cümle kalıbı;\n Y\u0026rsquo;yi yaparak X\u0026rsquo;i başardım\n   Projeler  proje kısmı, yaptığınız en büyük 2-4 projeden oluşmalı projelerin açıklama kısmında;  hangi dil ya da dillerle yazıldı hangi teknolojiler kullanıldı proje bir takım projesi mi? bir kurs yardımıyla mı yapıldı? kendin mi yaptın?   yukarıdaki her maddeye uyulması mecburi değildir. eğer maddeler sizi iyi gösteriyorsa o zaman belirtin.  maddede, eğer projeyi bağımsız olarak tek başınıza yaptıysanız bunu belirtin. bu, iş verenler için takım projesi\u0026rsquo;nden daha değerlidir   çoğu insan CV\u0026rsquo;sine yaptığı bütün projeleri yazar ki bu iş verenleri yoran bir şey. maximum 4 proje yazın  Programlama Dilleri  bu güne kadar çalıştığınız bütün dilleri yazmaya kalkmayın en iyi olduğunuz ve en iyi bildiğiniz dilleri yazın çünkü bir insan bütün dillerin tüm teknik detaylarını bilemez. abartılmış bir liste, iş verenin sizin hakkınızda pozitif düşünceler oluşturmaz uzun dil listesine sahip adayları genelde iş görüşmesinde özellikle sınarlar ve normal bir listeye sahip birine nazaran çok daha zor sorular yöneltebilirler. yetkinlik seviyenizi kabaca parantezler içinde belirtin. örnek bir liste;  java (fluent) C++ (proficient) javascript (prior experience)   yetkinlik seviyesi için yıl yazmayın. 10 sene önce javascript öğrenip sadece bir kaç kere yazdıysanız bu gerçeten 10 yıllık bir tecrübe mi? eğer bir sertifikanız varsa ve bu bir programlama diliyle alakalıysa kesinlikle CV\u0026rsquo;de buna yer vermeyin. iş verenler bu sertifikaları ciddiye almazlar eğer bir dilin belli bir versiyonuyla ilgili tecrubeniz varsa mesela, C11, C99, Perl5 gibi, iş verenler kesinlikle bu tarz bir şeyi ciddiye almazlar. bunun yerine C ve Perl demek daha doğrudur. aslında bu tarz bir şey, yazılımcının dil konusunda ne kadar spesifik olduğunu gösterir ama çoğu şirket buna değer vermez stigma: bir programlamma dilinin zaman içinde ön yargılara maruz kalıp değerini yitirmesidir. örnek olarak Visual Basic ve .NET teknolojileri. eğer .NET işine baş vurmuyorsanız, bu teknolojileri ve diğer stigma kazanmış (ön yargı kazanmış) dilleri ya da teknolojileri CV\u0026rsquo;de belirtmeye gerek yok yukarıdaki maddeden yola çıkarak şirketlerin (özellikle Amerikadakilerin) önem verdikleri diller en az\u0026rsquo;dan en çoğa sıralanmıştır;  C#, .NET, Visual Basic Ruby, Python, Javascript Java, C++    İş Başvurusuna Hazırlık Haritası Bölüm 5   CV\u0026rsquo;de yazılan projeler incelenip genelde bu projelerle ilgili size soru yöneltilir. CV\u0026rsquo;yi inceleyen kişi, görüşmeden önce bu projelere ne kadar hakim olduğunuzu görmek için zor sorular hazırlayabilir.\n  CV\u0026rsquo;deki projeleri çok iyi çalşıp, şöyle bir tablo hazırlanması çok faydalı olacaktır;\n   yaygın soru proje1 proje2 proje3     zorluklar/buglar \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;   hatalar/başarısızlıklar \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;   keyif alınan taraflar \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;   liderlik \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;   çatışmalar (takım ise) \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;   neyi farklı yapardın \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;      bu tabloyu doldurup iyice çalış. iş veren projeler hakkında soru sordukça burda yazdıklarını hatırla ve cevapla\n  size \u0026ldquo;zayıf yanlarınız\u0026rdquo; nelerdir diye sorduklarında gerçek bir zayıflık söyleyin. \u0026ldquo;çok çalışmak\u0026rdquo; gibi cevaplar çok ciddiye alınmaz ve dürüst olmadığınızı düşündürür.\n  zayıflıklarınızdan bahsederken aynı zamanda bu zayıflıklarla nasıl başa çıkmaya çalıştığınızı da anlatmanız gerekir. örnek;\n  \u0026ldquo;bazen pasifagresif davranabiliyorum. ancak bu konuyla ilgili psikolojik kitaplar okuyorum ve nerede hata yaptığımı görmemi sağlayıp başa çıkmama yardımcı oluyorlar\u0026rdquo;\n  \u0026ldquo;yeni bir proje fikri geldiğinde çok hızlı burn out olabiliyorum. başa çıkmak için pomodoro tekniğini kullanıyorum\u0026rdquo;\n  \u0026ldquo;yeni bir teknolojiyi öğrenirken, kendimi bu konuda sonuna kadar gitmem gerektiğine inandırıyorum. bundan dolayı teknolojiye öğrenmeye odaklanmak yerine, kendimi en iyi kaynağı araştırmaya zaman harcarken bulabiliyorum. Bu konuda tecrübe kazandığım için artık çoğu kez yaptığım yanlışın farkına varabiliyorum\u0026rdquo;\n    Interviewer\u0026rsquo;a Yöneltilebilecek Sorular  interviewer size soru sormanıza izin verebilir. bir iş görüşmesinde, 3 tip önemli soru çeşidi vardır;  Hakiki Sorular cevaplarını gerçekten bilmek istediğiniz sorulardır\n şirkette, geliştirici, tester ve yönetici dengesi var mı? takımda proje planlaması nasıl yapılıyor?\n   peki siz bu şirkete nasıl geldiniz? genelde bu çalışma ortamında sizi en çok zorlayan ne oluyor?\n Teknik Sorular bu sorular genelde şirkete başvurmadan önce bayağı bir araştırdığınızı anlatır\n gördüğüm kadarıyla X teknolojisini kullanıyorsunuz. bununla Y problemini nasıl çözüyorsunuz?\n   yaptığınız ürün X teknolojisi yerine neden Y\u0026rsquo;yi seçti? Y\u0026rsquo;nin A,B,C konularında avantajları olduğunu biliyorum ancak diğer şirketler Y\u0026rsquo;yi D sorunu yüzünden kullanmıyorlar\n Çalışkanlık Yansıtan Sorular bu tarz sorular iş verenin, sizin ne kadar azimli olduğunuzu görmesini ve şirket için faydalı olacağınızı düşünmesini sağlar\n Yazılımın ölçeklenebilirliği konusunda kendimi geliştirmeye çalışıyorum. bu şirkette bu konuyla alakalı neler öğrenebilirim?\n   Kullandığınız X teknolojisini daha önce hiç duymadım ancak çok ilginç bir yönteme benziyor. Nasıl çalıştığından biraz bahseder misiniz?\n Dikkat edilmesi gereken hususlar   projelerle ilgili konuşurken ya da sorular yöneltirken asla ama asla kibirli görünme. Kendini her zaman bir çaylakmışçasına alçak gönüllü ve saygılı olarak göster. (genel olarak öyle ol zaten)\n  görüşmeciler bu tarz çok insan ile karşılaştıklarından, artık insan sarrafı olma yolunda ilerliyorlardır. en ufak bir kibir belirtisinde çizerler\n  soruları cevaplarken, karşınızdakini detaya boğmayın. çok önemli noktalara değinin ve daha fazla detay gerektiren bir konuda, karşınızdakinden izin alıp öyle devam etmeye özen gösterin. çünkü gelen kişinin, teknik detaylardan ne kadar anladığını ya da duymaktan hoşlanıp hoşlanmadığını bilemezsiniz.\n  takım projesinde yer aldıysanız, takımın başarılarını anlatmak yerine kendinizin bu takımdaki başarılarınızdan bahsedin. çünkü takım ile ilgili konuşmalarınızda, sizin ne yaptığınız ile ilgili bir fikir oluşmaz\n  \u0026ldquo;kendininden biraz bahseder misiniz?\u0026rdquo; tarzı bir soru geldiğinde kronolojik sıraya gitmeye dikkat edin ve sırasıyla şunlardan bahsedin;\n Şu anda bir yerde çalışıyorsanız rol belirterek söze girin hangi okulda okudun ve hangi bölüm stajlar okuldan sonra ne yaptın iş dışında yaptığın projeler/çalışmalar şu anda neden burda olduğunu anlatarak toparla bitir  hobilerden bahsetmek istersen bunu 5. maddede belirt ancak hobilerden bahsetmek bazen tehlikeli olabilir. dikkat et\n  Bölüm 6 ","description":"","id":10,"section":"posts","tags":["book"],"title":"Cracking the Coding Interview Notes","uri":"https://savolla.github.io/posts/cracking-the-coding-interview-notes/"},{"content":"ourput redirection  you can redirect outputs of a shell command in vim  press ESC :r !ls -la RET    whitespace removal  remove all trailing whitespaces. you can also make the following a permanent macro  press ESC :%s/\\s\\+$//e RET    time travel  show the file 10 mins ago  press ESC :earlier 10m RET   show the file after 10 mins  press ESC :later 10m RET    ","description":"","id":11,"section":"posts","tags":["vim","howto","tools"],"title":"less known vim tricks","uri":"https://savolla.github.io/posts/less-known-vim-tricks/"},{"content":"here! you found it! this is one single Makefile that fits all projects with this file structure:\n1 2 3 4 5 6 7 8 9  project / ├── include ├── build ├── lib ├── obj ├── src ├── test ├── main.c └── Makefile   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  TARGET_EXEC ?= a.out BUILD_DIR ?= ./build SRC_DIRS ?= ./src SRCS := $(shell find $(SRC_DIRS) -name *.cpp -or -name *.c -or -name *.s) OBJS := $(SRCS:%=$(BUILD_DIR)/%.o) DEPS := $(OBJS:.o=.d) INC_DIRS := $(shell find $(SRC_DIRS) -type d) INC_FLAGS := $(addprefix -I,$(INC_DIRS)) CPPFLAGS ?= $(INC_FLAGS) -MMD -MP $(BUILD_DIR)/$(TARGET_EXEC): $(OBJS) $(CC) $(OBJS) -o $@ $(LDFLAGS) # assembly $(BUILD_DIR)/%.s.o: %.s $(MKDIR_P) $(dir $@) $(AS) $(ASFLAGS) -c $\u0026lt; -o $@ # c source $(BUILD_DIR)/%.c.o: %.c $(MKDIR_P) $(dir $@) $(CC) $(CPPFLAGS) $(CFLAGS) -c $\u0026lt; -o $@ # c++ source $(BUILD_DIR)/%.cpp.o: %.cpp $(MKDIR_P) $(dir $@) $(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $\u0026lt; -o $@ .PHONY: clean clean: $(RM) -r $(BUILD_DIR) -include $(DEPS) MKDIR_P ?= mkdir -p   ","description":"","id":12,"section":"posts","tags":["tools","make","programming"],"title":"one Makefile for everything","uri":"https://savolla.github.io/posts/one-makefile-for-everything/"},{"content":"this is a short step by step tutorial to save your vim macro and use it everytime\n fire up vim do q a create your macro press q to finish exit vim :q! vim ~/.vimrc type let @q = '' put your cursor on first single quote do \u0026quot; a p macro should be pasted inside single quotes like:   1  let @q = \u0026#39;your_macro_content\u0026#39;    save and exit ESC :wq fire up vim again do @ q  now you should have your macro saved. after this moment everytime you open a vim session, this macro will be read from .vimrc and you will able to use it.\n","description":"","id":13,"section":"posts","tags":["vim","howto","tools"],"title":"permanent macros in vim","uri":"https://savolla.github.io/posts/permanent-macros-in-vim/"},{"content":"This is how I use doom emacs for daily coding. Doom and it\u0026rsquo;s packages are working together to make developer\u0026rsquo;s life easy. Here I made a complete list for you guys. This is a step by step guide to do coding on doom emacs. By the way when I say things like C-c C-p it means CTRL + c + p\nbefore we start to make things work enable specified modules in your init file\n do SPC f p and select init.el enable(uncomment) the following modules;  magit treemacs lookup   reload doom by doing SPC h r r  cloning projects  SPC g C to run magit clone press u to specify repo url paste your url with Ctrl Shift v (for linux) specify the path for the repo press y to make origin default branch wait until the cloning is finished press q to quit  adding projects  SPC o p to open treemacs C-c C-p a specify the path for your porject now you see your project directory appeared in your treemacs menu  navigate files  SPC SPC brings menu with all files under your project root type any keyword you want  you don\u0026rsquo;t have to type entire file name. menu items will be reduced once you type some characters.\nfind symbols (method, variable, objects)  press SPC / type your keyword or function, variable, class or struct names. once you enter the keyword, doom will jump to that file instantly C-o to go back C-i to go forward  recent files if you work on other things other than your project, for example editin some config files while coding etc, then you probably type the file path every single time to navigate to that config file. doom solves it with\n SPC f r brings a menu or recently visited files find and navigate C-o to go back C-i to go forward  lookup code sometimes we can\u0026rsquo;t find a good documentation on a method/module when coding. the best way to understand something is to looking at examples\n navigate your cursor on method, module you want to understand do SCP s o choose Github before hitting RET you can optionally specify the following items for more accurate results;  filename: path: extension:    here is an example for searching printf on github\n printf extension:.c filename:main.c path:src\n find and replace projectwise you can change a variable or method name projectwise. this is usefull in code refactoring. here is how to do that in doom;\n SPC / enter the symbol name. \u0026ldquo;emacs\u0026rdquo; in this example C-c C-e :%s/emacs/doom/g RET Z Z  there must be an easier way..\n","description":"","id":14,"section":"posts","tags":["tools","doom","emacs","programming","howto"],"title":"programming in doom emacs","uri":"https://savolla.github.io/posts/programming-in-doom-emacs/"},{"content":"Here I made some album recommendations. this is my personal playlist which consists of very \u0026ldquo;non-normie\u0026rdquo; stuff. albums in this list will start with the most \u0026ldquo;normie\u0026rdquo; music and will incrementally get heavier\nlevel 1 easier to digest and fun\n Tokyo Rose - Chases 2   great synthwave album.. my favorite song on this is midnight chase\n Dance with the Dead - Loved to Death  synthwave + some metal elements. great if you like distortion guitar riffs. this one includes awesome guitar solos. and the production is just incredible\n ALIX 2084 (EP)  directly jump to Elevator Dance Party song. great work and really underrated. those tempo changes will shake your brain inside\n Mega Drive - Hardwired V1.4  Dataline Dataline Dataline !!\n Aphex Twin - Selected Ambient Works 85-92  legent album from a legend\n Plini - Sweet Nothings  I bet this will be the sweetest thing you will ever listened. your ears will overflow with candies\nlevel 2 still electronic but with some interesting elements\n Heptaedium - \u0026ldquo;A M E N\u0026rdquo;  did you ever listened to break core? edgy..\n Aphex Twin Live at Field Day  did you ever experienced ear bleeding? just skip to 1:51:00 and wait.\nlevel 3 still electronic but.. this time adding depression\n Boards of Canada - Twoism  this album might look harmless but wait until your soul evaporates completely\n Hrsta - Ghosts Will Come And Kiss Our Eyes  don\u0026rsquo;t listen to this if you lost someone recently\n The LONGING - Original Soundtrack  wait 400 days\nlevel 4 dark ambient passage. contains some depressive and horror materials. you also might want to stop there and enjoy 1st, 2nd and 3rd levels because things get non-normie here\n Gates of Morheim - Omagatoki  contains ethnic sounds. it\u0026rsquo;s like a ritual music + dark ambient elements\n Kurotokage - Call To The Deep  similar to Gates of Morheim but deeper and darker. this album will make you dizzy and tired\n Atrium Carceri - Kapnobatai  things get serious and deep after this. especialy after the track called \u0026ldquo;A Stroll Through the Ancient City\u0026rdquo;\n Alt3r3d Stat3 - Dubbed in Black  paranormal stuff\nlevel 5 \u0026ldquo;guitars and drums\u0026rdquo; era begins but without vocals. gets heavier and heavier\n Modern Day Babylon - Travelers  my first djent album. this is the first metal album without vocals on this list\n Amogh Symphony - The Quantum Hack Code\nawesome concept album. there are some Indian ethnic elements on that one. good one. Heptaedium - KAWAII!!  underrated stuff. has some djenty elements also inherits from nintendo core genre. really interesting album\n Heptaedium - Underground Business  have some edgy songs. heavier than the first one KAVAII!!\n The Helix Nebula - Meridian  now we\u0026rsquo;re talking..\n Infant Annihilator - The Palpable Leprosy of Pollution  this will beat the shit out of your ears..\nlevel 6 vocals come to play. death metal, technical death metal stuff. list gets heavier and heavier.\n Dissonance In Design - Sentient   technical death metal album but without crazy riffs\n Konkeror - The Abysmal Horizons  just heavy.. skip to \u0026ldquo;Towers\u0026rdquo; song you\u0026rsquo;ll get what i mean\n Bloodbath - Live At Wacken 2005  this is the best metal live performance\n Edge of Sanity - Crimson  this album contains only one song\n Bloodbath - Unblessing The Purity  blasting the virginborn\n Ouroboros - Glorification of a Myth  fine album. lots of solos and great (hard to play) guitar riffs\n Krallice - Diotima  actual masterpiece. check Telluric Rings song if you still with me\n Krallice - Dimensional Bleedthrough  I like those feedbacks man..\n The Zenith Passage - Cosmic Dissconance  i don\u0026rsquo;t know in which category should I put this album\n Inferi - The Path of Apotheosis  this is one of those albums when your entire body chills. guitars sound awesome and played by highly skilled musicians. those tremolo pickings man..\n First Fragment - Dasein  this album contains some guitar techniques\u0026hellip;\n Rings of Saturn - Embryonic Anomaly  brain drill but with major scales\n Spawn Of Possession - Incurso  wait until \u0026ldquo;Bodiless Sleeper\u0026rdquo; song\nlevel 7 deepest depths of hell..\n Vital Remains - Icons of Evil  extremely satanic and brutal. those harmonic minor scales will blow your mind. this album is the first one on this list because of it\u0026rsquo;s melodic elements. next ones are not melodic anymore\n Severe Torture - Slaughtered  brutality takes another form\n Cryptopsy - None So Vile  insane vocals and drums\n Abominable Putridity - The Anomalies Of Artificial Origin  Russians know that stuff.\n Extermination Dismemberment - Serial Urbicide  heaviest thing i\u0026rsquo;ve ever heard\n","description":"","id":15,"section":"posts","tags":["music"],"title":"savolla's music recommendations","uri":"https://savolla.github.io/posts/music-recommendations/"},{"content":"  for example I\u0026rsquo;m searching for \u0026ldquo;setq\u0026rdquo; keyword which exists in \u0026ldquo;.doom.d\u0026rdquo; directory, file is called \u0026ldquo;config.el\u0026rdquo; and is written in \u0026ldquo;Emacs Lisp\u0026rdquo; language\n  go to github search\n  search for the following string\n1  setq extension:el path:.doom.d filename:config.el language:\u0026#34;Emacs Lisp\u0026#34; extension:.el     ","description":"","id":16,"section":"posts","tags":["howto","tools","git"],"title":"search code in Github","uri":"https://savolla.github.io/posts/search-code-in-github/"},{"content":" also called gnu privacy guard this is a key which helps to encrypt and decript files there are 2 types of gpg keys; private : unlocks everything you lock with that public : you send to other people gpg keys expire ! so you need to generate them once or twice a year  how to generate a gpg key   first generate personal key:\n1  gpg --full-gen-key     choose RSA and RSA\n  choose 4096 for maximum security\n  choose y = 1 to make the key expire in one year\n  enter your real name and surname\n  enter your email\n  confirm\n  enter a password. this is the password of your key. DON\u0026rsquo;T FORGET IT\n  encrypt files with gpg   navigate to directory you want to encrypt (here I generate a random file)\n1  echo \u0026#34;secret message\u0026#34; \u0026gt; ~/secret-file.txt     encrypt the file\n1 2 3  # -r : recepient (in this case me) # -e : file to encrypt gpg -r your_mail@provider.com -e secret-file.txt   after this command, a file with gpg extension will be created. so now you can put this file (secret-file.txt.gpg) on the internet and no one will know what it is\n  remove the original file (optional)\n basic remove   1  rm secret-file.txt    deep remove (more secure)   1  shred -u secret-file.txt     decrypt files with gpg   decrypt command\n1  gpg -d secret-file.txt     then enter the password of your gpg key. the password you entered while generating the key\n  ","description":"","id":17,"section":"posts","tags":["tools","howto","gpg"],"title":"what is gpg","uri":"https://savolla.github.io/posts/what-is-gpg/"}]