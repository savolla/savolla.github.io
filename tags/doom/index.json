[{"content":"Hey I\u0026rsquo;m Oleksiy! I do digital electronics, Linux sysadmin, c/c++ dev, x86, ARM, os development, embedded systems and everything bare-metal! I\u0026rsquo;m a Computer Engineering student in Turkey. My interests are mostly between hardware and software. Contact me from Telegram or freenode to talk about geeky stuff! savolla is my username on freenode\n","description":"i do digital electronics, linux, c/c++ dev, x86, ARM, os development, embedded systems and everything bare-metal!","id":2,"section":"","tags":null,"title":"about","uri":"https://savolla.github.io/about/"},{"content":"This is my summary and notes of C++ Primer by Stanley B. Lippman.\nDay 1 (Chapter 1. Getting Started)   every c++ program contains at least one function (main)\n  simplest c++ program\n1 2 3  int main() { return 0; }     the return value of main function\n 0 means success -1 means failure non-zero returns are defined by the system    c++ file extensions\n .cc .cxx .cpp (mostly used) .cp .C    checking main\u0026rsquo;s return value after execution\n  on UNIX\n1  echo $?     on windows\n1  echo %ERRORLEVEL%       enabling all warnings from the compiler\n  on UNIX (GNU)\n1  g++ -o program -Wall source.cpp       c++ does not provide I/O operations by default. Therefore people created a\nlibrary for this kind of purposes called standard library.\n standard library is not only for I/O operarionts. I/O is just one of usefull sublibrares I/O library is iostream  input : istream output: ostream btw you can\u0026rsquo;t include those istream and ostream alone. You include iostream      4 I/O objects\n cin : takes input cout: outputs cerr: outputs warning and error messages clog: information about program execution    danger of namespaces\n  code does not compile (with namespace)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #include \u0026lt;iostream\u0026gt; using namespace std; void cout(char x){ std::cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; std::endl; } int main(void){ int a; std::cin \u0026gt;\u0026gt; a; std::cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; std::endl; std::cerr \u0026lt;\u0026lt; \u0026#34;this is an error?\u0026#34; \u0026lt;\u0026lt; std::endl; std::clog \u0026lt;\u0026lt; \u0026#34;this is a log message\u0026#34; \u0026lt;\u0026lt; std::endl; cout(\u0026#39;j\u0026#39;); return 0; }     code that compiles (without namespace)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #include \u0026lt;iostream\u0026gt; void cout(char x){ std::cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; std::endl; } int main(void){ int a; std::cin \u0026gt;\u0026gt; a; std::cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; std::endl; std::cerr \u0026lt;\u0026lt; \u0026#34;this is an error?\u0026#34; \u0026lt;\u0026lt; std::endl; std::clog \u0026lt;\u0026lt; \u0026#34;this is a log message\u0026#34; \u0026lt;\u0026lt; std::endl; cout(\u0026#39;j\u0026#39;); return 0; }     the cause of the problem is same function names cout\n    cin tips\ninstead of taking the input in separate lines\n1 2 3 4 5 6 7  #include \u0026lt;iostream\u0026gt; int main(void){ int a, b; std::cin \u0026gt;\u0026gt; a; std::cin \u0026gt;\u0026gt; b; return 0; }   we can take it like:\n1 2 3 4 5 6  #include \u0026lt;iostream\u0026gt; int main(void){ int a, b; std::cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; return 0; }     comments\n // comment * comment * comments inside ** do NOT nest!  * comment1 /* nested comment* comment2 */\nresults error not the case for single line comments //      taking unknown number of values\n1 2 3 4 5 6 7 8 9  #include \u0026lt;iostream\u0026gt; int main(void){ int value, sum = 0; while(std::cin \u0026gt;\u0026gt; value){ sum += value; } std::cout \u0026lt;\u0026lt; sum; }   while executes untill it encounters end-of-line Ctrl+d or an input error\nlike taking characters instead of integer\n  end-of-line character\n UNIX \u0026amp; Mac: Ctrl+d windows: Ctrl+z    error types that c++ compiler can detect\n syntax errors (hide and seek champion \u0026lsquo;;') type errors (variable types int, string etc.) declaration errors (forgetting to use std::)    error structure in c++\n usually contains a line number brief description of the error    edit-compile-debug cycle\n self descriptive..    Day 2 (Chapter 2. Variables and Basic Types)   void type used for few situations. mostly for returning values\n  C++ builtin types\n   Type Meaning Minimum size unsigned     bool boolean NA no   char character 1 byte yes   wchar_t wide character 2 byte yes   char16_t unicode character 2 byte no   char32_t unicode character 4 byte no   short short integer 2 byte yes   int integer 2 byte yes   long long integer 4 byte yes   long long long integer 8 byte yes   float single-precision 6 significant digits no   double double-precision 10 significant digits no   long double extended-precision 10 significant digits no      wchar_t is used in windows. Represents Unicode characters. Used in\ninternational languages like Japanesse\n1  wchar_t a = L\u0026#39;Ã¼\u0026#39;; // L is a suffix which converts char to wchar_t     unsigned property can be applied to only integral types\n  unsigned int can be abbreviated as unsigned\n  signed int can be abbreviated as signed as well\n  4 Rules For Choosing Types  Use unsigned type when you know that value can\u0026rsquo;t be negative Use int for aritmetic. Don\u0026rsquo;t use short because it\u0026rsquo;s too small. Use long long when int is not enough. Don\u0026rsquo;t use long because its mostly same size\nwith int Do not use plain char . char types can be signed on some machines and\nunsigned on others. Explicitly specify either signed char or unsigned char Use double for floating-point computations. Do not use float its\nunnecesary. On some machines double is faster. long double is also\nunnecesary and slow  Day 3 (Type conversions) A goog example on type conversions 1 2 3 4 5 6 7  bool b = 42; // b is true (1) bool k = -33; // k is true (1) int i = b; // i = 1 i = 3.14; // i = 3 double pi = i; // i = 3.0 unsigned char c = -1; // c = 255 signed char c2 = 256; // undefined   btw in c++ this is ok.. 1 2 3 4 5 6 7 8 9  #include \u0026lt;iostream\u0026gt; int main(void) { unsigned char c = -128; // -129 gives Woverflow \tunsigned char d = 255; // 256 gives Woverflow  return 0; }   unsigned char Assigning to out of range value the range of unsigned char is 0-256. if assigning to -1, resutl is max_value -\nassigned_value\n1 2  unsigned char c = -1; // c = 256-1 // resutl: 256 - 1 = 255   Assigning to in-range value There is no problem here. Just be aware that two examples are resulting to same velue\n1  unsigned char d = 255; // d = 255   signed char  unsigned values were fine on out-or-range values but this time they are not. Assigning out-or-range values to signed types are very dangerous. The\nprogram might work, it might crash or might produce garbage values it is a good idea to use unsigned char ;)  notes   don\u0026rsquo;t mix signed and unsigned values in arithmatic expressions !. Your\nprogram may enter infinite loop or produce unexpected values\n  btw in c++, variables are signed as default\nexample\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  #include \u0026lt;iostream\u0026gt; int main(void) { unsigned u = 10, u2 = 42; std::cout \u0026lt;\u0026lt; u2 - u \u0026lt;\u0026lt; std::endl; // 32  std::cout \u0026lt;\u0026lt; u - u2 \u0026lt;\u0026lt; std::endl; // 4294967264  int i = 10, i2 = 42; std::cout \u0026lt;\u0026lt; i2 - i \u0026lt;\u0026lt; std::endl; // 32  std::cout \u0026lt;\u0026lt; i - i2 \u0026lt;\u0026lt; std::endl; // -32  std::cout \u0026lt;\u0026lt; i - u \u0026lt;\u0026lt; std::endl; // 0  std::cout \u0026lt;\u0026lt; u - i \u0026lt;\u0026lt; std::endl; // 0  return 0; }     c++ supports representing values as:\n octal decimal hexadecimal   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #include \u0026lt;iostream\u0026gt; int main() { int a = 0xFFFF; // hex  int b = 05376; // octal  int c = 8943; // decimal  std::cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; b \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; c \u0026lt;\u0026lt; std::endl; // do arithmatic operations with differnt bases!!  std::cout \u0026lt;\u0026lt; a + b + c \u0026lt;\u0026lt; std::endl; return 0; }     Escape Sequences    character description     newline \\n   horizontal tab \\t   alert (bell) \\a   vertical tab \\v   backspace \\b   double quote \\\u0026quot;   backslash \\\\   question mark \\?   single quote \\\u0026rsquo;   carriage return \\r   formfeed \\f   hexadecimal (chars) \\x[number]   octal (chars) \\[number]    1 2 3 4 5 6 7 8 9 10  #include \u0026lt;iostream\u0026gt;int main() { std::cout \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34; \u0026lt;\u0026lt; std::endl; // newline  std::cout \u0026lt;\u0026lt; \u0026#34;\\115\u0026#34; \u0026lt;\u0026lt; std::endl;// \u0026#39;M\u0026#39;  std::cout \u0026lt;\u0026lt; \u0026#34;\\40\u0026#34; \u0026lt;\u0026lt; std::endl; // White Space  std::cout \u0026lt;\u0026lt; \u0026#34;\\t\\x48\\x69\\x20\\x4d\\x6f\\x6d\\x21\\n\u0026#34; \u0026lt;\u0026lt; std::endl; \u0026lt;\u0026lt; std::endl; // Hi Mom!  return 0; }   btw octal values work only for 3 characters after \\ character while hexadecimal\nvalues work only for 2 characters.\n1 2 3 4 5 6 7 8  #include \u0026lt;iostream\u0026gt;int main() { std::cout \u0026lt;\u0026lt; \u0026#34;\\123\u0026#34; \u0026lt;\u0026lt; std::endl; // S  std::cout \u0026lt;\u0026lt; \u0026#34;\\1234\u0026#34; \u0026lt;\u0026lt; std::endl; // S4  std::cout \u0026lt;\u0026lt; \u0026#34;\\x12\u0026#34; \u0026lt;\u0026lt; std::endl; // ^R  std::cout \u0026lt;\u0026lt; \u0026#34;\\x1234\u0026#34; \u0026lt;\u0026lt; std::endl; // 4  return 0; }   literal suffixes We can override integer, floating point or char literals by applying a suffix\nto it\n   suffix example description     L L\u0026rsquo;a' char -\u0026gt; wchar_t   u8 u8\u0026quot;hi!\u0026quot; utf-8 string literal   U 78U makes 78 unsigned   ULL 48ULL unsigned long long   E-F 2E-4F outputs 0.0002   L 8493L makes the number long   true true boolean literal. means 1   false false boolean literal. means 0   nullptr FIX FIX      When using long literal use upper case \u0026lsquo;L\u0026rsquo;. lower case usually mistaken with\nnumber 1.. \u0026lsquo;l\u0026rsquo; and \u0026lsquo;1\u0026rsquo; (depends on font)\n  Literal usages and their sizes\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #include \u0026lt;iostream\u0026gt; int main() { std::cout \u0026lt;\u0026lt; sizeof(\u0026#39;a\u0026#39;) \u0026lt;\u0026lt; std::endl; // char 1 byte  std::cout \u0026lt;\u0026lt; sizeof(l\u0026#39;a\u0026#39;) \u0026lt;\u0026lt; std::endl; // wchar_t 4 byte  std::cout \u0026lt;\u0026lt; sizeof(\u0026#34;a\u0026#34;) \u0026lt;\u0026lt; std::endl; // string \u0026#34;a\\0\u0026#34;\u0026#34; 2 bytes  std::cout \u0026lt;\u0026lt; sizeof(\u0026#34;abcd\u0026#34;) \u0026lt;\u0026lt; std::endl; // string \u0026#34;abcd\\0\u0026#34; 5 bytes  std::cout \u0026lt;\u0026lt; sizeof(l\u0026#34;a\u0026#34;) \u0026lt;\u0026lt; std::endl; // idk why it\u0026#39;s 8 byte  std::cout \u0026lt;\u0026lt; sizeof(10) \u0026lt;\u0026lt; std::endl; // int 4 bytes  std::cout \u0026lt;\u0026lt; sizeof(10u) \u0026lt;\u0026lt; std::endl; // unsigned int  std::cout \u0026lt;\u0026lt; sizeof(10l) \u0026lt;\u0026lt; std::endl; // int -\u0026gt; long  std::cout \u0026lt;\u0026lt; sizeof(10ul) \u0026lt;\u0026lt; std::endl; // int -\u0026gt; unsigned long  std::cout \u0026lt;\u0026lt; sizeof(012) \u0026lt;\u0026lt; std::endl; // 0 -\u0026gt; octal literal  std::cout \u0026lt;\u0026lt; sizeof(0xc) \u0026lt;\u0026lt; std::endl; // 0x -\u0026gt; hexadecimal literal  std::cout \u0026lt;\u0026lt; sizeof(3.14) \u0026lt;\u0026lt; std::endl; // double 8 bytes  std::cout \u0026lt;\u0026lt; sizeof(3.14f) \u0026lt;\u0026lt; std::endl; // double -\u0026gt; float 4 bytes  std::cout \u0026lt;\u0026lt; sizeof(3.14l) \u0026lt;\u0026lt; std::endl; // double -\u0026gt; long double  std::cout \u0026lt;\u0026lt; sizeof(10) \u0026lt;\u0026lt; std::endl; // int 4 bytes  std::cout \u0026lt;\u0026lt; sizeof(10u) \u0026lt;\u0026lt; std::endl; // unsigned int 4 bytes  std::cout \u0026lt;\u0026lt; sizeof(10.) \u0026lt;\u0026lt; 10. \u0026lt;\u0026lt; std::endl; // double 8 bytes (10)  std::cout \u0026lt;\u0026lt; sizeof(10e-2) \u0026lt;\u0026lt; 10e-2 \u0026lt;\u0026lt; std::endl; // double 8 bytes (0.1)  return 0; }     Day 4 (Variables)   C++ programmers might call a variable as object. Don\u0026rsquo;t be confused. it\u0026rsquo;s the same\nthing in theory actually..\n  initialization examples\n1 2 3  int a = 3; // a initialized as 3  int b = a * 3; // b initialized as a result of arithmatic expression  int c = func(b,a); // c initialized as a return value of func()     INITIALIZATION and ASSIGNMENT are NOT THE SAME\n initialization: gives a first value to a variable assignment: changes or replaces the value of a variable   1 2  int a = 4; // initialization  a = 33; // assignment     initialization is a complicated thing in c++. Here is why;\n1 2 3 4 5 6  // initializing an int object with a value with 4 ways  int x = 0; // normal initialization  int x = {0}; // this is called list initialization  int x(0); int x{0}; // damn son... why...     default initialization;\n1 2  int a; // assigns a random value  string b; // b is an empty string \u0026#34;\u0026#34;     not every class lets us to initialize objects as default. Compiler will\ncomplain about this.\n  PROTIP: never leave an undefined variable in your programs. if you\ninitialized a variable as default, give it a value before compilation.\nOtherwise the program might produce stupid results or unexpected errors. hard\nto debug\n  declaration and deffinition;\n declaration: is just a mention of a variable deffinition: givin it a value   1 2 3  int j; // declaration and definition. mentioning and giving random value  extern int i; // declares but does not define. mentioning but not giving any value  extern double c = 3.1415; // definition and declaraion     identifier is the actual name of the variable\n1  int a = 39; // identifier of the variable is \u0026#39;a\u0026#39;     using global variables if there is a local variable with the same identifier\n1 2 3 4 5 6 7 8 9 10  #include \u0026lt;iostream\u0026gt; int nonLocalVariable = 39; int main(void) { std::cout \u0026lt;\u0026lt; nonLocalVariable \u0026lt;\u0026lt; std::endl; // outputs 39  int nonLocalVariable = 3; // overriding identifier  std::cout \u0026lt;\u0026lt; nonLocalVariable \u0026lt;\u0026lt; std::endl; // outputs 3 (local var)  std::cout \u0026lt;\u0026lt; ::nonLocalVariable \u0026lt;\u0026lt; std::endl; // outputs 39. (global var)  return 0; }     PROTIP: it is always a bad idea to define a variable with the same name as a\nglobal variable..\n  reference is just an alias of another variable identifier\n1 2 3 4 5 6 7 8 9  int a = 1024; // name(identifier) of the variable is \u0026#39;a\u0026#39;  int \u0026amp;b = a; // now variable \u0026#39;a\u0026#39; has a second name b!. 1024 has two identifiers now.  int \u0026amp;c = b; // now variable has 3 identifiers! a,b and c  // following lines output 1024 but they are not separate variables!  // they are the same!  std::cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; std::endl; // output: 1024  std::cout \u0026lt;\u0026lt; b \u0026lt;\u0026lt; std::endl; // output: 1024  std::cout \u0026lt;\u0026lt; c \u0026lt;\u0026lt; std::endl; // output: 1024     we can\u0026rsquo;t define a reference to a reference or a constant value.\n1 2 3 4 5 6  unsigned a = 333; unsigned \u0026amp;b = 34; // assigning to a constant value. NOT ALLOWED!  unsigned \u0026amp;c = a; unsigned \u0026amp;d = \u0026amp;c; // assigning to another reference. NOT ALLOWED!  unsigned \u0026amp;d = c; // this would be a correct way     reference must be the same type with referencing identifier\n1 2  char a = \u0026#39;A\u0026#39;; int \u0026amp;b = a; // not same type as identifier \u0026#39;a\u0026#39;     references can\u0026rsquo;t be default initialized\n1  int \u0026amp;a; // error..     if a reference changed in program, referenced value also changes\n1 2 3 4 5 6 7 8  int a = 1024; int \u0026amp;b = a; std::cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; std::endl; // outputs 1024  std::cout \u0026lt;\u0026lt; b \u0026lt;\u0026lt; std::endl; // outputs 1024  b = 333; std::cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; std::endl; // outputs 333  std::cout \u0026lt;\u0026lt; b \u0026lt;\u0026lt; std::endl; // outputs 333     Day 5 (Pointers)   a pointer holds address of an object\n  unlike a reference, pointers can be defaultly initialized\n1  unsigned char *p; // don\u0026#39;t use uninitialized pointers!!!     address-of operator: \u0026lsquo;\u0026amp;\u0026rsquo;\n1 2  double x = 3.44; double *p = \u0026amp;x; // variable p now has x\u0026#39;s address   WARNING: \u0026lsquo;\u0026amp;\u0026rsquo; is not a reference operator that I covered before! This is\ntotally different operator when used with pointers. It takes the address of an\nobject. It called address-of operator\n  since pointers can hold only object addresses, we cannot assign a reference\nto a pointer because references don\u0026rsquo;t have addresses\n  pointer and pointed variable must be matched in types\n1 2  double a = 383; int *p = \u0026amp;a; // spits error. pointer and variable are different type     dereference operator: \u0026lsquo;*\u0026rsquo;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #include \u0026lt;iostream\u0026gt; int main(void) { int x = 333; int *p = \u0026amp;x; // variable p now has x\u0026#39;s address. * is not dereference  int i = *p // using dereference operator to assign value that being hold by pointer  unsigned char c = *p; // assigning 333 to unsigned char  std::cout \u0026lt;\u0026lt; *p \u0026lt;\u0026lt; std::endl; // outputs 333  std::cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; std::endl; // outputs 333  std::cout \u0026lt;\u0026lt; c \u0026lt;\u0026lt; std::endl; // 333 - 256 = 77 --\u0026gt; outputs \u0026#39;M\u0026#39;  std::cout \u0026lt;\u0026lt; char(77) \u0026lt;\u0026lt; std::endl; // proof that char 77 is \u0026#39;M\u0026#39;  return 0; }     it is also posible to change pointed variable\u0026rsquo;s value with dereference\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  #include \u0026lt;iostream\u0026gt; int main(void) { // changing pointed value with dereference  int x = 33; // normal value assignment  int *p = \u0026amp;x; // loading pointer with x\u0026#39;s address  std::cout \u0026lt;\u0026lt; *p \u0026lt;\u0026lt; std::endl; // output: 33  *p = 44; // chaning pointing value with dereference  // x is now changed  std::cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; std::endl; // output: 44  // doint the same thing with references  int a = 33; int \u0026amp;b = a; std::cout \u0026lt;\u0026lt; b \u0026lt;\u0026lt; std::endl; // output: 33  b = 44; std::cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; std::endl; // output: 44  return 0; }     REALLY REALLY IMPORTANT !!!!\n   symbol example usecase meaning     \u0026amp; int \u0026amp;b = a; declaration reference operator   \u0026amp; int *p = \u0026amp;x; expression address-of operator   \\* int *p; declaration defining a pointer   \\* int i = *j expression dereference operator      in normal conditions we can\u0026rsquo;t assign a constant value to a pointer. Except\nvalue \u0026lsquo;0\u0026rsquo;. It means null pointer\n1 2  int *p = 33; // this is an error. constant value assigned to pointer  int *q = 0; // this is legal. q is a null pointer now     null pointers do not point to any object. It can be obtained in three ways in\nc++\n1 2 3  int *q = nullptr; // This is preferable way to declare null pointers in c++  int *q = 0; // this is legal but nullptr is mostly used way. avoid  int *q = NULL; // C way but might require extra headers (cstdlib.h). avoid     using / leaving unitialized pointers in programs can cause catastrophic errors\nand those errors are really hard to debug.\n1  int *p; // avoid!!     if possible define pointers after deffinition of the objects. Good habbit\nwrong way:\n1 2 3  int *p; // pointer defined before the object. avoid  int a = 3; p = \u0026amp;a;   right way:\n1 2  int a = 3; int *p = \u0026amp;a; // pointer defined after the object. good     if you really need a pointer without any value use nullptr\n1  int *p = nullptr; // use it instead     pointers can be used in comparison operators. in if statements. if a pointer\nhas nonzero value it returns 1. if null pointer it returns 0\n  example:\n1 2 3 4 5 6 7 8 9 10 11 12 13  #include \u0026lt;iostream\u0026gt; int main(void) { int a = 3; int *p = \u0026amp;a; int *q = nullptr; if (p){std::cout \u0026lt;\u0026lt; \u0026#34;p points to something\u0026#34; \u0026lt;\u0026lt; std::endl;} else {std::cout \u0026lt;\u0026lt; \u0026#34;p is empty\u0026#34; \u0026lt;\u0026lt; std::endl;} if (q){std::cout \u0026lt;\u0026lt; \u0026#34;q points to something\u0026#34; \u0026lt;\u0026lt; std::endl;} else {std::cout \u0026lt;\u0026lt; \u0026#34;q is empty\u0026#34; \u0026lt;\u0026lt; std::endl;} return 0; }       void pointer is a special pointer that holds only address of an object.\nBut cannot dereference the object or use it\u0026rsquo;s value.\n1 2 3 4 5 6  int a = 33; // defining a random integer value  void *p = nullptr; // defining a new void pointer  p = \u0026amp;a; // assigning the address-of a  std::cout \u0026lt;\u0026lt; p \u0026lt;\u0026lt; std::endl; // this will print the address of variable a  std::cout \u0026lt;\u0026lt; *p \u0026lt;\u0026lt; std::endl; // error: dereference is not working on void pointers     void pointers are used on just memory-memory operations\n  key difference between reference and pointer\n reference is just an alternative identifier of a variable pointer is an object that stores only addresses of a varialbe    there are also confusing pointer deffinition styles to be aware of\n1 2  int* p1, p2; // p1 is a pointer while p2 is an int object. avoid this style  int *p1, p2; // always prefer this one     pointers to pointers\n example:   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #include \u0026lt;iostream\u0026gt; int main(void) { int a = 389; int *p = \u0026amp;a; int **pp = \u0026amp;p; int ***ppp = \u0026amp;pp; std::cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; *p \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; **pp \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; ***ppp \u0026lt;\u0026lt; std::endl; return 0; }     references to pointers\n  we cannot assign a reference to a pointer because references are not objects\nand they don\u0026rsquo;t have addresses.\n1 2 3  int a = 39; int \u0026amp;b = a; int *p = b;     but since pointers are objects we can reference pointers\n example   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #include \u0026lt;iostream\u0026gt; int main(void) { int a = 3; // regular assignment to int obj  int \u0026amp;b = a; // reference to a  int *p = \u0026amp;b; // pointing to b\u0026#39;s value (a). same as \u0026#34;int *p=\u0026amp;a;\u0026#34;  int *\u0026amp;q = p; // reference to pointer p  int \u0026amp;q = p; // spits out an error. reference identifier must have a *  std::cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; std::endl; // output: 3  std::cout \u0026lt;\u0026lt; *p \u0026lt;\u0026lt; std::endl;// output: 3  std::cout \u0026lt;\u0026lt; b \u0026lt;\u0026lt; std::endl; // output: 3  std::cout \u0026lt;\u0026lt; *q \u0026lt;\u0026lt; std::endl;// output: 3  return 0; }       reading complicated pointers from right to left makes life easier.\n example   1  int *\u0026amp;q = p // q is a reference to a pointer     Day 6 (const)   all constant variables must be initialized with a value. default\ninitialization is not allowed\n1 2  const int a = 333; // okay  const int b; // error!. default initialization is not allowed     to share a const variable between multiple files use extern keyword\nThis part is not totally understood. Research and complete this part\n  const variables also accept initializations with a variable or a function\nreturn value\nexample:\n1 2 3  int s = 333; const int x = s; // okay.  const int dbl = sizeof(s); // okay.     it is also posible to create a reference to a const variable. here is how:\n1 2 3 4  const int x = 33; // creating a const integer object  const int \u0026amp;ref = x; // constant x now has one more constant identifier  ref = 8943; // Error. Trying to change constant variable  int \u0026amp;ref2 = x; // Error. Value must be \u0026#34;const\u0026#34;     const pointer\n1 2 3 4 5  int x = 0; int *const p = \u0026amp;x; // p wil always point to x. top-level const  const double pi = 3.14159; const double *const p2 = \u0026amp;pi; // we put const keyword at the begining cuz pi is const.  // low level const     how to read the low-level pointer?. reading right to left\n1 2  // p3 is a constant pointer which points to a constan integer  const int *const p3 = \u0026amp;i;     constant expressions\n when defining a constant variable it is a constant expression when initializing a constant variable to an arithmatic expression it is a\nconstant expression when initializing a constant variable to a return value of a function it is\nnot a constant expression. Because the value is not known until runtime    Day 7 (types)   It is posible to changing type identifiers in c++. Think it like reference to types\n1 2 3 4 5 6 7 8 9 10 11 12 13  #include \u0026lt;iostream\u0026gt; int main(void) { typedef int savolla; //using savolla = int; // c++11 new standard  savolla x = 333; int y = 33; std::cout \u0026lt;\u0026lt; \u0026#34;savolla \u0026#34; \u0026lt;\u0026lt; x \u0026lt;\u0026lt; std::endl; std::cout \u0026lt;\u0026lt; \u0026#34;int \u0026#34; \u0026lt;\u0026lt; y \u0026lt;\u0026lt; std::endl; return 0; }     c++11 introduced a new standard for aliasing types\n1  using savolla = int;     auto is pretty cool operator in c++\n  it predicts which type a variable should be by looking the value it has\n1 2  unsigned char c[] = \u0026#34;blah blah blah\u0026#34;; // instead of writing this:  auto c = \u0026#34;blah blah blah\u0026#34;; // we just write auto and magic happens     make sure to declaring auto variables separately. it might cause errors otherwise\n  wrong way\n1  auto i = 0, pi = 3.14; // error: inconsistent types at the same line     right way. separately defined auto variables\n1 2  auto i = 0; auto pi = 3.14;       auto becomes handy espesially when we can\u0026rsquo;t predict the result of an\narithmatic expression or a return type of a function\n1 2  auto x = a + b; // no matter what a and b\u0026#39;s types are the auto will do the job  auto j = unstableFunction(); // function can return anything. auto is awesome!     auto drops top-level constants. But low-level constants are kept. if we want\nto keep top-level constants we need to say explicitly\n1  const auto x = 33;     Day 8 (strings)   using keyword\n1 2 3 4 5 6 7 8 9  // instead of using std:: we can use a using keyword  #include \u0026lt;iostream\u0026gt; using std::cout; cout \u0026lt;\u0026lt; \u0026#34;hello\u0026#34;; #include \u0026lt;string\u0026gt; using std::string; string name = \u0026#34;savolla\u0026#34;;     don\u0026rsquo;t use using keyword inside header files. This might cause some name\nconflicts later.\n  initializing string\n  string is part of standard library. so we need to use strings like\n1 2  #include \u0026lt;string\u0026gt; std::string name = \u0026#34;savolla\u0026#34;;     or with using at the beginning\n1 2 3  #include \u0026lt;string\u0026gt; using std::string; string name = \u0026#34;savolla\u0026#34;;     initializing strings\n1 2 3 4 5  string s1; // default initialization is allowed  string s2 = s1; // copy initialization  string s3 = \u0026#34;vizima\u0026#34;; // copy initialization  string s4(10,\u0026#39;c\u0026#39;); // s4 = \u0026#34;cccccccccc\u0026#34;; // direct initialization  string s5(\u0026#34;temeria\u0026#34;); // s5 = \u0026#34;temeria\u0026#34; // direct initialization       string operations\n   syntax description     getline(cin, s) reads whitespace-separated string   s.empty() returns true if string s is empty   s.size() returns string length   s[n] returns the char on n(th) index   s1 + s2 adds two strings (-,*,/ are not allowed)   s1 = s2 copies s2 to s1   s1 == s2 compares are s1 and s2 same or notes   s1 != s2    \u0026lt;,\u0026lt;=,\u0026gt;,=\u0026gt; comparisons are case sensitive and alphabetical    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  #include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; using std::cout; using std::endl; using std::string; int main(void) { string s0 = \u0026#34;AZZ\u0026#34;; string s1 = \u0026#34;BAA\u0026#34;; if (s0 \u0026gt; s1){cout \u0026lt;\u0026lt; s0 \u0026lt;\u0026lt; \u0026#34; \u0026gt; \u0026#34; \u0026lt;\u0026lt; s1 \u0026lt;\u0026lt; endl;} if (s0 \u0026lt; s1){cout \u0026lt;\u0026lt; s0 \u0026lt;\u0026lt; \u0026#34; \u0026lt; \u0026#34; \u0026lt;\u0026lt; s1 \u0026lt;\u0026lt; endl;} // B is alphabetically bigger than A  string s2 = \u0026#34;AZZDK\u0026#34;; string s3 = \u0026#34;bAA\u0026#34;; if (s0 \u0026gt; s1){cout \u0026lt;\u0026lt; s2 \u0026lt;\u0026lt; \u0026#34; \u0026gt; \u0026#34; \u0026lt;\u0026lt; s3 \u0026lt;\u0026lt; endl;} if (s0 \u0026lt; s1){cout \u0026lt;\u0026lt; s2 \u0026lt;\u0026lt; \u0026#34; \u0026lt; \u0026#34; \u0026lt;\u0026lt; s3 \u0026lt;\u0026lt; endl;} // b is bigger than A  return 0; }        getline() and std::cin\nstd::cin reads until a white space in encountered.\n1 2 3  string hello; cin \u0026gt;\u0026gt; hello; // consider user enters \u0026#34;hello world\u0026#34;  cout \u0026lt;\u0026lt; hello; // only \u0026#34;hello\u0026#34; will be printed   this is not the case for getline();\n1 2 3  string hello; getline(cin, hello); // consider user enters \u0026#34;hello world\u0026#34; again  cout \u0026lt;\u0026lt; hello; // \u0026#34;hello world\u0026#34; will be printed     PROTIP: using aliases on functions in c++11. This is really cool!!!\n1 2 3 4 5 6 7 8 9 10 11  #include \u0026lt;iostream\u0026gt;#include \u0026lt;string\u0026gt;using str = std::string; // aliasing type auto print = std::cout; // aliasing function (we used auto because we don\u0026#39;t know return type)  int main(void) { str name = \u0026#34;savolla\u0026#34;; print \u0026lt;\u0026lt; name; return 0; }     strings can be added like:\n1 2 3 4 5 6 7  string s0 = \u0026#34;hello\u0026#34;; string s1 = \u0026#34;world\u0026#34;; string s2 = s0 + s2; // s2 = \u0026#34;helloworld\u0026#34;  s0 += \u0026#34; \u0026#34;; // s0 = \u0026#34;hello \u0026#34;  s0 += s1; // s0 = \u0026#34;hello world\u0026#34;     when adding strings with string literals and char literals we need to obey to\nsome rules in c++\nwhen adding, there must be at least one string variable!\n1 2 3 4  string s0 = \u0026#34;Hello\u0026#34;; string s1 = s0 + \u0026#34;, \u0026#34; + \u0026#34;World\u0026#34;; // legal: at least one string variable s0 summed with \u0026#34;, \u0026#34;  // this means (s0 + \u0026#34;, \u0026#34;) + \u0026#34;World\u0026#34;  // s0 + \u0026#34;, \u0026#34; returns a string   1  string s0 = \u0026#34;Hello\u0026#34; + \u0026#34;, \u0026#34;; // illegal: no string variable while adding   1 2 3 4  string s0 = \u0026#34;yo!\u0026#34;; string s1 = \u0026#34;this is \u0026#34; + \u0026#34;my jam \u0026#34; + s0; // illegal  // first two literals were added (\u0026#34;this is \u0026#34; + \u0026#34;my jam\u0026#34;) + s0  // but firts operation returns a string literal which is illegal     in c and c++ string literals and strings are not same things. This is why\nadding rules might seem a bit confusing.\n \u0026ldquo;Hello\u0026rdquo; -\u0026gt; string literal. \u0026quot; symbol makes it string literal s0 = \u0026ldquo;World\u0026rdquo; -\u0026gt; string    to deal with characters inside a string variable, we use cctype header.\n   member description     isalnum(c) true if c is letter or digit   isalpha(c) true if c is a letter   iscntrl(c) true if c is a control char   isdigit(c) true if c is a digit   isgraph(c) true if c is not space but printable   islower(c) true if c is lowercase letter   isprint(c) true if c is a printable character. not \\344   ispunct(c) if c is _ , + \u0026lt; / ; . kind of symbol   isspace(c) true is c is a whitespace, tab or vertical space   isupper(c)    isxdigit(c) true if c is a hexadecimal digit   tolower(c) if c is an uppercase changes it to lovercase   toupper(c)       processing every character inside a string\nc++ provides a short way to do this with range for\nwith a regular, everyday, normal for\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; using str = std::string; auto \u0026amp;print = std::cout; int main(void) { str name(\u0026#34;savolla\u0026#34;); for(int i = 0; i\u0026lt;name.size(); i++) { print \u0026lt;\u0026lt; name[i]; } return 0; }     with range for\n1 2 3 4 5 6 7 8 9 10 11 12 13  #include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; using str = std::string; auto \u0026amp;print = std::cout; int main(void) { str name(\u0026#34;savolla\u0026#34;); // it\u0026#39;s like (for c in name) like in python HO HO HO!! :P  for(auto c : name){print \u0026lt;\u0026lt; c;} // range for. we could write char instead of auto  return 0; }   PROTIP: libaries we include up to this time (string , cctype) are parts of\nstandard library. We would not include them in our programs. But this is a good\npractice to see which library is imported in the program. But this makes the\nprogram bigger at the same time.\n  if we want to change the actual string variable in our loops we need to create\na reference to it\n1 2 3 4 5 6 7 8 9 10 11 12 13  #include \u0026lt;iostream\u0026gt; using std::cout; using std::string; int main(void) { string s0 = \u0026#34;hello, world!\u0026#34;; for (auto \u0026amp;r : s0) // created a reference to change the actual string  { r = toupper(r); } cout \u0026lt;\u0026lt; s0; }     Day 9 (strings continued) /Processing Only Some Characters?\n  when we use string[0] it means first character of the string and it called subscript\n  in subscripts we need to always ensure that there is a value at that given\nlocation\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  #include \u0026lt;iostream\u0026gt; using std::string; void subscriptFunc(string x, int index) { // handling every case is a really good practice  if(!x.empty() \u0026amp;\u0026amp; index \u0026lt; x.size() \u0026amp;\u0026amp; index \u0026gt; 0) { std::cout \u0026lt;\u0026lt; x[index] \u0026lt;\u0026lt; std::endl; } else { std::cout \u0026lt;\u0026lt; \u0026#34;error\u0026#34; \u0026lt;\u0026lt; std::endl; } } int main(void) { string name = \u0026#34;savolla\u0026#34;; subscriptFunc(name, 99); subscriptFunc(name, -1); subscriptFunc(name, 4); return 0; }     decltype() takes an expression as a parameter and return expression\u0026rsquo;s type. it\nworks like auto but\n1 2 3 4 5  decltype(2 + 1) x = 3.284; // expression in decltype returns an \u0026#34;int\u0026#34; type  std::cout \u0026lt;\u0026lt; x; // prints 3. because it was int type  std::string name = \u0026#34;savolla\u0026#34;; decltype(name.size()) i = 0; // decltype can also takes function return values     This is a cool code and must be understanded. grind it!\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  #include \u0026lt;iostream\u0026gt; using std::string; int main(void) { // makes first word uppercase  string name = \u0026#34;savolla ross\u0026#34;; // decltype is used for example purpose. we could use a signle int type instead  for (decltype(name.size()) index = 0; // compound conditions can be used in for loops!  // instead of using a separete if statement inside for block  // we embeded it in for  index != name.size() \u0026amp;\u0026amp; !isspace(name[index]); ++index) { // changing every character to uppercase  name[index] = toupper(name[index]); } std::cout \u0026lt;\u0026lt; name \u0026lt;\u0026lt; std::endl; return 0; }     out-of-range subscripts are undefined and dangerous use with caution and\nalways check if user gives a defined subscript as parameter\n  always use unsigned types for substrings to make sure the number can\u0026rsquo;t be negative\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  #include \u0026lt;iostream\u0026gt; using str = std::string; auto \u0026amp;read = std::cin; auto \u0026amp;print = std::cout; int main(void) { const str hexDigits(\u0026#34;0123456789ABCDEF\u0026#34;); str result; unsigned int input; while (read \u0026gt;\u0026gt; input) { if (input \u0026lt; hexDigits.size()) { result += hexDigits[input]; } } print \u0026lt;\u0026lt; result \u0026lt;\u0026lt; std::endl; return 0; }     it is good to know the following code is valid because an empty string\nactually has a value at index 0\n1 2 3  string s0; cout \u0026lt;\u0026lt; s0[0]; // index 0 is defined  cout \u0026lt;\u0026lt; s0[1]; // index 1 is not defined     Day 10 (vectors)   vector is a container. Like arrays but more powerfull\n  greates feauture of vectors is that THEY CAN GROW!!. They are not like arrays.\nTheir size is not limited at initialization\n  vector is a template in c++. not a type.\n  deffinition of templates\n1 2 3 4 5  vector\u0026lt;int\u0026gt; i_vec; // created a vector which holds int types  vector\u0026lt;myCustomType\u0026gt; myVec; // vectors can hold any type  vector\u0026lt;vector\u0026lt;string\u0026gt;\u0026gt; _2D_Vec; // vector of string vectors  vector\u0026lt;vector\u0026lt;string\u0026gt; \u0026gt; _2D_Vec; // notice white space. it was required in old c++ standards  // some compilers may still require a white space between carrot operators     we can\u0026rsquo;t create a vector of references. vectors hold only objects. but\nreferences are not objects\n  if initializing with a built in type like int, values will be 0\n  if not built in like string, values are empty. NULL. (empty string)\n  initializing vectors\n1 2 3 4 5  vector\u0026lt;int\u0026gt; i_vec = 10; // error.  vector\u0026lt;int\u0026gt; i_vec(10); // direct initialization. since int is buitin, i_vec has 10 of 0.  vector\u0026lt;int\u0026gt; i_vec{10}; // List initialization .i_vec has one value and it\u0026#39;s 10  vector\u0026lt;int\u0026gt; i_vec(10, 234); // dirt. init. has 10 items of 234  vector\u0026lt;int\u0026gt; i_vec{10, 234}; // i_vec has 2 values. 10 and 234     c++ has different initialization types\n  default initialization\n1  vector\u0026lt;int\u0026gt; i_vec;     direct initialization\n1  vector\u0026lt;int\u0026gt; i_vec(10,3);     list initialization\n1  vector\u0026lt;int\u0026gt; i_vec{10,2,44,333,2,4};       also vectors can be assigned to vectors. but both must be same type\n1 2  vector\u0026lt;int\u0026gt; i_vec0{1,2,3,4,2,1}; vector\u0026lt;int\u0026gt; i_vec1 = i_vec0;     adding values to a vector usng push_back() method\n1 2 3 4 5  vector\u0026lt;int\u0026gt; i_vec; for(usingned i=0; i != 100; ++i) { i_vec.push_back(i); // notice push_back(i)  }   extra knowledge!!. we can also do it with a pointer!\n1 2 3 4 5 6 7 8 9 10 11  vector\u0026lt;int\u0026gt; i_vec; auto *p = \u0026amp;i_vec; for(usingned i=0; i != 100; ++i) { p-\u0026gt;push_back(i); // notice p-\u0026gt; notation  // since p is a pointer which points a vector object  // p can use vector methods as well.  // but when it\u0026#39;s a pointer, we use \u0026#39;-\u0026gt;\u0026#39; operator instead  // in theory these guys are equlivalent:  // i_vec.push_back(i) = p-\u0026gt;push_back()  }     PERFORMANCE_TIP:\n  list initializing vectors causes poor performance. avoid\n1  vector\u0026lt;int\u0026gt; i_vec{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; // avoid !     adding values in runtime is more efficient. Do this instead !!\n1 2 3 4 5  vector\u0026lt;int\u0026gt; i_vec; for (unsigned x=1; x != 11; ++x) { i_vec.push_back(x); }     it is more efficient to initiazlize a vector with direct initialization\nwhen all values are the same\n1  vector\u0026lt;int\u0026gt; i_vec(10, 3); // i_vec = {3,3,3,3,3,3,3,3,3,3}     when you have various values and you need to initialize them, don\u0026rsquo;t use\nvectors. use arrays instead !\n1  int array[10] = {12, 33, 2, 432, 11};     You initialized an array but you will add items ar runtime? no problem:\n1 2 3 4 5 6 7 8  int array[5] = {12, 33, 2, 432, 11}; vector\u0026lt;int\u0026gt; i_vec; for (unsigned x=0; x != sizeof(array)/sizeof(array[0]); ++x) { i_vec.push_back(array[x]); }       Day 11 (vectors continued and iterators)   other operations on vectors\n   method description     v.empty() true if vector is empty   v.size() returns size of vector   v.push_back()    v[n] or v[n][m] returns the value on index   v1 = v2 copy v2 to v1   v1 = {a,b,c..} replaces values (not widely used)   v1 = v2 or v1 ! v2 true if they are same size and have same elements   \u0026lt;,\u0026lt;=,\u0026gt;,=\u0026gt;           we can use range for on vectors for changing or reaching values\n reaching   1 2 3 4 5  vector\u0026lt;int\u0026gt; i_vec{1,3,5,4,5,55,2}; for ( auto item : i_vec) { std::cout \u0026lt;\u0026lt; item \u0026lt;\u0026lt; std::endl; }    changing values (to change purposes we use reference to values)   1 2 3 4 5  vector\u0026lt;int\u0026gt; i_vec{1,3,5,4,5,55,2}; for ( auto \u0026amp;item : i_vec) { item *= item // square the elemtn value  }     a big mistake !!!\nnew c++ programmers think that subscripting a vector actually adds elements.\nThis is not true. Subscript operator fetches as existing element. It does\nnot add\nMISTAKE (same for strings. not only vectors)\n1 2 3 4 5 6 7  vector\u0026lt;int\u0026gt; i_vec; // i_vec has no elements. so it can\u0026#39;t be subscriptable  for (decltype(i_vec.size()) i=0; i != 100; ++i;) { i_vec[i] = i; // disaster!. i_vec has no elements  }     iterators   iterators are like pointers\n  they hold the information where a container (string,vector) begins and ends\n vec.begin() -\u0026gt; begining address of vec container vec.end() -\u0026gt; ending address of vec container    if a container is empty then begin() and end() methods have same\nvalues. And they are called off-the-end iterators\n  off-the-end example\n1 2 3 4 5 6 7 8 9 10  str name; // name is an emtpy container  if(name.begin() == name.end()) // on empty cont. begin() and end() are equal  { pr \u0026lt;\u0026lt; \u0026#34;value is empty\u0026#34;; // prints this  } else { pr \u0026lt;\u0026lt; \u0026#34;value is not empty\u0026#34;; } return 0;     non off-the-end example\n1 2 3 4 5 6 7 8 9 10  str name = \u0026#34;savolla\u0026#34;; // name is not emtpy container  if(name.begin() == name.end()) { pr \u0026lt;\u0026lt; \u0026#34;value is empty\u0026#34;; } else { pr \u0026lt;\u0026lt; \u0026#34;value is not empty\u0026#34;; // prints this  } return 0;       iterators widely used for determining if an object is empty or not\n  dereferencing items inside a container through iterators\n1 2 3 4 5 6 7 8 9 10 11 12  str name(\u0026#34;olexy\u0026#34;); if (name.begin() != name.end()) { auto iter = name.begin(); // defining an iterator.  // notice it doesn\u0026#39;t have * or \u0026amp; operators.  // they just behave like pointers. and they contain addresses  pr \u0026lt;\u0026lt; *iter \u0026lt;\u0026lt; char(0xA); // dereferending and prints \u0026#39;o\u0026#39;  *iter = toupper(*iter); // changes \u0026#39;o\u0026#39; to \u0026#39;O\u0026#39;  pr \u0026lt;\u0026lt; *iter; // prints \u0026#39;O\u0026#39;  iter++; // iterator now points to the second character \u0026#39;l\u0026#39;  *iter = toupper(*iter); // transforms \u0026#39;l\u0026#39; to \u0026#39;L\u0026#39;  }     like in \u0026ldquo;olexy\u0026rdquo; string, begin() points to the first character \u0026lsquo;o\u0026rsquo; but it is\nnot the case for end(). end() points to the termination character \u0026lsquo;\\0\u0026rsquo;. we\nhave to decrement the end() iterator before reaching last item of the string\n  A nice code example for iterators\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  // checks if given string contains non-printable characters  #include \u0026lt;iostream\u0026gt; using str = std::string; auto \u0026amp;print = std::cout; void stringControl(std::string x) { for(auto iter = x.begin(); iter != x.end(); ++iter) { if(!isprint(*iter)) { print \u0026lt;\u0026lt; \u0026#34;given string contains non printable characters\\n\u0026#34;; exit(0); } } } int main(void) { str name; getline(std::cin, name); stringControl(name); for(auto iterator = name.begin(); iterator != name.end(); ++iterator) { *iterator = toupper(*iterator); } print \u0026lt;\u0026lt; name \u0026lt;\u0026lt; char(0xA); return 0; }     PROTIP\nin c++ for loops use \u0026quot;!=\u0026quot; instead of \u0026quot;\u0026lt;\u0026quot; operator. This should be a habbit\nfor a c++ programmer because some types (especially iterators) are not\nsubscriptable.\n1 2  for (unsigned i = 0; i != 100; ++i) // okay in all cases  for (unsigned i = 0; i \u0026lt; 100; ++i) // okay in some cases but not all     iterators have their own types. But we don\u0026rsquo;t always need to know the type of\nthe iterator. We use auto keyword and compiler determines the type for us.\nBut for curiosity here are iterator types:\n1 2 3 4  vector\u0026lt;int\u0026gt;::iterator vi_iter; vector\u0026lt;int\u0026gt;::const_iterator vic_iter; string::iterator s_iter; string::const_iterator cs_iter;   We could write these instead of auto keywords in previous examples\n  in iterators and pointers to call a member function we can use two ways.\nnotice that methods are same on pointer and iterator\n1 2 3 4 5 6 7 8 9 10 11  vector\u0026lt;str\u0026gt; name{\u0026#34;savola\u0026#34;,\u0026#34;liho\u0026#34;,\u0026#34;lena\u0026#34;}; // using member functions through pointers  auto *p = \u0026amp;name; pr \u0026lt;\u0026lt; p-\u0026gt;size() \u0026lt;\u0026lt; char(0xA); // 3  pr \u0026lt;\u0026lt; (*p).size() \u0026lt;\u0026lt; char(0xA); // 3  // using member functions through iterators  auto iter = name.begin(); pr \u0026lt;\u0026lt; iter-\u0026gt;size() \u0026lt;\u0026lt; char(0xA); // 6  pr \u0026lt;\u0026lt; (*iter).size() \u0026lt;\u0026lt; char(0xA); // 6     Use iterators on container types (vector, string..) as pointers\n  Use pointers on built-in types like int,double etc.\n  Only syntactical difference between iterator and pointer is when\ninitializing them\n1 2 3 4 5  string name(\u0026#34;savolla\u0026#34;); unsigned i = 333; auto iter = name.begin() // no * or \u0026amp; operator is used. just adding .begin() or .end()  auto *p = \u0026amp;i; // used * and \u0026amp; operator (traditional way)     Day 12 (arrays)   array is a data structure not a type\n  holds data\n  similar to vector but faster\n  can\u0026rsquo;t extend like vectors.. arrays are static in size. That means we can\u0026rsquo;t\nadd new items to arrays\n  but they are much much faster then vectors!!!\n  if you don\u0026rsquo;t know how much elements you going to have then use vector\ninstead of array\n  dimension of an array must be known at compile time. that means the\ndimension of an array is constant\n  compile time: when program is being compiled\n  run time: when program is being run\n  example\n   1 2 3 4 5 6 7 8 9 10  const unsigned x = 2; // constant value  unsigned y = 3; // non constant value  int arr0[x]; // array of 2 int objects  int arr1[y]; // error. y is not a constant  string arr2[20]; // array of 20 string objects  double *arr3[100]; // array of 100 double pointers  int arr4[func()]; // legal if func() returns a constant value !     we can\u0026rsquo;t use auto keyword for initializing arrays\n1  auto arr0[9]; // error! you *must* use with type!        compiler is smart enough to figure out how muuch elements an array has. So if\nyou list initialize an array you don\u0026rsquo;t need to specify the dimention.\n1 2 3 4  int arr0[6] = {2,4,2,1,5,6}; // this is okay.  int arr1[6] = {3,4,2}; // legal. equivalent to arr1 = {3,4,2,0,0,0}  int arr2[] = {2,4,2,1,5,6}; // legal. didn\u0026#39;t specify the dimention. better  int arr3[3] = {2,4,2,1,5,6}; // error. out of dimension     char arrays are special in c++. We can initialize them like strings. But we\nalways must remain an extra byte for the null character (\\0) if we\nexplicitly specify the dimension. Be carefull or just do not specify the dimension\n1 2 3 4 5  char name0[] = \u0026#34;savolla\u0026#34;; // legal. no explicit dim. null character added automatically  char name1[6] = \u0026#34;savolla\u0026#34;; // illegal! no place for null character! dimension must be 7  char name2[] = {\u0026#39;s\u0026#39;,\u0026#39;a\u0026#39;,\u0026#39;v\u0026#39;,\u0026#39;o\u0026#39;,\u0026#39;l\u0026#39;,\u0026#39;l\u0026#39;,\u0026#39;a\u0026#39;}; // legal. list init. no null char  char name3[] = {\u0026#39;s\u0026#39;,\u0026#39;a\u0026#39;,\u0026#39;v\u0026#39;,\u0026#39;o\u0026#39;,\u0026#39;l\u0026#39;,\u0026#39;l\u0026#39;,\u0026#39;a\u0026#39;,\u0026#39;\\0\u0026#39;}; // legal. list init. with null char  // null character was unnecesary in last example   character arrays are special because we can print their values directly.\nwithout a for loop\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  char name0[] = \u0026#34;savolla\u0026#34;; int arr1[] = {2,3,9,5}; // with *range for*. Also prints null character. Ugly output. Avoid.  for ( auto c : name ) { std::cout \u0026lt;\u0026lt; c; } // short way. pretty output (works just for character arrays)  std::cout \u0026lt;\u0026lt; name; // outputs: savolla  // the following code returns only the address of arr1. To display content use for loop  std::cout \u0026lt;\u0026lt; arr1; // outputs: 0xf782ad0b (random address)  return 0;     an array can\u0026rsquo;t be initialized or assigned with another array\n1 2 3  int arr0[] = {3,2,4,5}; int arr1[] = arr0; // illegal! initializing with an array  arr1 = arr0; // illegal! assigning to an array     PROTIP\nsome compilers might allow array init or assignment. But this is non-standard\nway of doing things in c++. Do not initialize an array with another one even if\ncompiler lets you to do\n  because of arrays hold just objects we can\u0026rsquo;t have an array of references\n  some syntactical torture of arrays\n  stage01: array which contains 10 int pointers\n1  int *arr[10];     stage02: reference to an array\n1 2 3 4 5  int a[3] = {1,2,3}; // array\u0026#39;s identifier is \u0026#39;a\u0026#39;  int (\u0026amp;b)[3] = a; // now array has a second name! \u0026#39;b\u0026#39;  std::cout \u0026lt;\u0026lt; a[2]; // outputs 3  std::cout \u0026lt;\u0026lt; b[2]; // outputs 3     stage03: array that points to an array of 10 ints\n1 2 3 4  // this one is a bit harder to understand.  // I\u0026#39;m gonna update it when I get it  int a[3] = {1,2,3}; int (*parr)[3] = \u0026amp;a;       in c++ arrays are actually pointers. When a program gets compiled the\ncompiler converst the array to a pointer. And all operations we do with arrays\nare actually pointer operations at the back stage. Implement array data\nstructure you will get it I promise :)\n  implementing .begin() and .end() on arrays like in vectors\n  the old way of doint this\n1 2 3 4 5 6 7 8 9 10 11 12 13  int arr[] = {0,1,2,3,4,5}; // arr.begin()  int *beg = arr; // didn\u0026#39;t used address-of (\u0026amp;) because an array is already pointer  // arr.end(). (notice address-of operator)  int *end = \u0026amp;arr[6]; // there is no element on 6th index. so this is actually the end of arr  // let\u0026#39;s print all the content of arr to the screen using these pointers  for (int *begin = arr; begin != end; ++begin) { std::cout \u0026lt;\u0026lt; *begin \u0026lt;\u0026lt; \u0026#34;,\u0026#34;; }     new way. error free and easier. c++11 feature\n1 2 3 4 5 6 7 8 9 10 11 12 13  int arr[] = {0,1,2,3,4,5}; // arr.begin()  int *beg = std::begin(arr); // begin() returns a pointer to the first element\u0026#39;s address  // arr.end()  int *end = std::end(arr); // end() returns a pointer to the end of arr  // let\u0026#39;s print all the content of arr to the screen using these pointers  for (int *begin = std::begin(arr); begin != end; ++begin) { std::cout \u0026lt;\u0026lt; *begin \u0026lt;\u0026lt; \u0026#34;,\u0026#34;; }       left on \u0026quot;Pointer Arithmetic\u0026quot; of arrays\nDay 13 (expressions)   1 + 2 = 3\n 1,2 and 3 are operands   and = are operators      operator types in c++\n   operator type example description     unary operator *p, \u0026amp;a takes one operand   binary operator !=, * takes two operands   ternary operator later takes three operands      conditional operator (?:)\n1 2 3 4 5  unsigned grade = 96; string finalGrade = (grade \u0026gt; 60)? \u0026#34;pass\u0026#34; : \u0026#34;fail\u0026#34;; // if grade is bigger than 60 then finalGrade is \u0026#34;pass\u0026#34; otherwise \u0026#34;fail\u0026#34;  cout \u0026lt;\u0026lt; finalGrade; // output: pass     nested conditional operators\n1 2 3  unsigned grade = 96; string finalGrade = (grade \u0026gt; 90)? \u0026#34;high pass\u0026#34; : (grade \u0026gt; 60)? \u0026#34;pass\u0026#34; : \u0026#34;fail\u0026#34;; cout \u0026lt;\u0026lt; finalGrade; // output: high pass     nested conditinal ops quickly become unreadable. This is why it is a good\nidea to not to nest more than 3\n  using conditional ops inside in an output expression. notice how parenthesis\nare important !\n1 2 3  std::cout \u0026lt;\u0026lt; ((grade \u0026gt; 60)? \u0026#34;pass\u0026#34; : \u0026#34;fail\u0026#34;); // outputs: pass  std::cout \u0026lt;\u0026lt; (grade \u0026gt; 60)? \u0026#34;pass\u0026#34; : \u0026#34;fail\u0026#34;; // outputs: 1 (true). because no parenthesis around exp  std::cout \u0026lt;\u0026lt; grade \u0026gt; 60 ? \u0026#34;pass\u0026#34; : \u0026#34;fail\u0026#34;; // error.     bitwise operators\n   operator name usage     ~ bitwise not ~expr   \u0026laquo; left shift expr1 \u0026laquo; expr2   \u0026raquo; right shift expr1 \u0026raquo; expr2   \u0026amp; bitwise and expr1 \u0026amp; expr2   \\^ bitwise xor expr1 ^ expr2   pipe bitwise or expr1 pipe expr2     biwise or is symbol \u0026lsquo;|\u0026rsquo; (couldn\u0026rsquo;t display on org-mode tables)    use bitwise operators on unsigned values. Because of signed bit behaves\ndifferently on different systems it might cause unexpected errors\n  when working with bitwise operators if operand is a \u0026ldquo;small integer\u0026rdquo; then it\nconverted to a larger one (int) then operator does its job\n  left shift operator (\u0026laquo;)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  unsigned char bits = 0b00001010; // bits = 10; (1 byte)  unsigned char bits2 = 0b10011011; // bits2 = 155; (1 byte)  // example 1  bits = (bits \u0026lt;\u0026lt; 5); // first converted to int type:  // 00001010 -\u0026gt; 00000000 00000000 00000000 00001010  // left shift by 5:  // 00000000 00000000 00000000 00001010 -\u0026gt; 00000000 00000000 00000001 01000000  cout \u0026lt;\u0026lt; 0b00000000000000000000000101000000 \u0026lt;\u0026lt; \u0026#34;\\x0a\u0026#34;; // 320  cout \u0026lt;\u0026lt; int(bits); // 320  // example 2  bits2 = (bits2 \u0026lt;\u0026lt; 31); // first converted to int type:  // 10011011 -\u0026gt; 00000000 00000000 00000000 10011011  // left shift by 31:  // 00000000 00000000 00000000 10011011 -\u0026gt; 10000000 00000000 00000000 00000000  // most bits were discarded  cout \u0026lt;\u0026lt; 0b10000000000000000000000000000000 \u0026lt;\u0026lt; \u0026#34;\\x0a\u0026#34;; // 2147483648  cout \u0026lt;\u0026lt; int(bits2); // 2147483648     right shift operator (\u0026raquo;)\n1 2 3  unsigned char bits3 = 0b10011011; // bits = 155; (1 byte)  bits3 = (bits3 \u0026gt;\u0026gt; 3); // converted to int, shifted 3 bits to right and 3 bits were discarted  cout \u0026lt;\u0026lt; int(bits3); // output: 00000000 00000000 00000000 00010011     bitwise not operator (~)\n1 2 3 4 5  char bits4 = 0b00101001; bits4 = (~bits4); // converted to int, inverted all bits  // 00101001 -\u0026gt; 11111111 11111111 11111111 11010110  // con\u0026#39;t confuse ! those extra 1 bits will disappear and final value becomes:  // 11010110     and (\u0026amp;), or (|), xor(^) operators\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  unsigned char a = 0b10011010; unsigned char b = 0b10100100; // and \u0026amp;  cout \u0026lt;\u0026lt; (a \u0026amp; b) \u0026lt;\u0026lt; endl; /* in \u0026amp; operator we multiply bits. (1 * 0 = 0) a: 10011010 \u0026amp; b: 10100100 ----------------- 10000000 */ // or |  cout \u0026lt;\u0026lt; (a | b) \u0026lt;\u0026lt; endl; /* in | operator we sum bits. (1 + 0 = 1), (1 + 1 = 1) a: 10011010 | b: 10100100 ----------------- 10111110 */ // xor ^  cout \u0026lt;\u0026lt; (a ^ b) \u0026lt;\u0026lt; endl; /* xor likes to being *different*. (1 ^ 0 = 1), (1 ^ 1 = 0) a: 10011010 ^ b: 10100100 ----------------- 00111110 */       TODO: in what scenario bitwise operators are used in c++\n  good example for not to be confused logical operators and bitwise ones\n1 2 3 4 5 6 7 8 9  unsigned long x = 3, y = 7; cout \u0026lt;\u0026lt; (x \u0026amp; y) \u0026lt;\u0026lt; std::endl; // 3  cout \u0026lt;\u0026lt; (x | y) \u0026lt;\u0026lt; std::endl; // 7  cout \u0026lt;\u0026lt; (x \u0026amp;\u0026amp; y) \u0026lt;\u0026lt; std::endl; // 1  cout \u0026lt;\u0026lt; (x || y) \u0026lt;\u0026lt; std::endl; // 1  /* logical operators returned 1 because none of those values were 0. everything was non-zero which means \u0026#34;true\u0026#34; */     sizeof() operator returns the size of an expression or type in bytes\n  return value of sizeof() is constant. that means it can be used in array\ndimension initialization\n1 2 3 4 5 6 7  unsigned long long x; string arr[sizeof(x)]; // legal array dimension initialization  cout \u0026lt;\u0026lt; sizeof(x) \u0026lt;\u0026lt; endl; // output: 8.  cout \u0026lt;\u0026lt; sizeof x \u0026lt;\u0026lt; endl; // legal. output: 8. can be used without paranthesis  cout \u0026lt;\u0026lt; sizeof(int) \u0026lt;\u0026lt; endl; // output: 4. can take type name itself  cout \u0026lt;\u0026lt; sizeof(4 + 3 / 12) \u0026lt;\u0026lt; endl; // output: 4. arithmatic expression     the type of return value sizeof() is size_t\n  size_t type is complicated. it\u0026rsquo;s actually a synonim of unsigned int but\nit\u0026rsquo;s value is different on another architectures/operating-systems.\n  PROTIP: using size_t as a variable type in programs is a really bad idea\n1  size_t j = 3; // avoid!     TODO: why strings and vectors have fixed size while arrays and other builtin\ntype sizes are not\n  Getting size of a vector, string and an array\n  vector and string: when sizeof() operator used with a vector, the returned value is\nnot a true value. in my system it\u0026rsquo;s 24 bytes no mather how long or which\ntype the vector is. Same thing applies on strings\n1 2 3 4 5 6 7  std::vector\u0026lt;int\u0026gt; i_vec{3,33,23,389,3}; std::vector\u0026lt;string\u0026gt; s_vec{\u0026#34;jfkd\u0026#34;,\u0026#34;uÄ±re\u0026#34;,\u0026#34;uÄ±f\u0026#34;}; std::string a = \u0026#34;savolla\u0026#34;; cout \u0026lt;\u0026lt; sizeof(i_vec) \u0026lt;\u0026lt; endl; // output: 24 (in my system). expected result was 5  cout \u0026lt;\u0026lt; sizeof(s_vec) \u0026lt;\u0026lt; endl; // output: 24 (in my system). expected result was 3  cout \u0026lt;\u0026lt; sizeof(a) \u0026lt;\u0026lt; endl; // output: 32 (in my system). expected result was 7   As we saw before the size of vectors and strings can be archieved by\nusing .size() method\n1 2 3 4 5 6 7  std::vector\u0026lt;int\u0026gt; i_vec{3,33,23,389,3}; std::vector\u0026lt;string\u0026gt; s_vec{\u0026#34;jfkd\u0026#34;,\u0026#34;uÄ±re\u0026#34;,\u0026#34;uÄ±f\u0026#34;}; std::string a = \u0026#34;savolla\u0026#34;; cout \u0026lt;\u0026lt; i_vec.size() \u0026lt;\u0026lt; endl; // output: 5  cout \u0026lt;\u0026lt; s_vec.size() \u0026lt;\u0026lt; endl; // output: 3  cout \u0026lt;\u0026lt; a.size() \u0026lt;\u0026lt; endl; // output: 7     array: As expected, getting size of an array is werird in c++. We can\u0026rsquo;t\nuse .size() method on arrays. and remember sizeof() returns size in bytes.\nTo get size of an array we will use simple trick\n1 2 3 4 5 6  int arr[]{1,4,4,3,4,5,56}; cout \u0026lt;\u0026lt; sizeof(arr) \u0026lt;\u0026lt; endl; // int is 4 bytes. arr has 7 elements. output: 4*7 = 28  cout \u0026lt;\u0026lt; sizeof(*arr) \u0026lt;\u0026lt; endl; // arrays were pointers. *arr returns first element. output: 4(size of 1)  cout \u0026lt;\u0026lt; sizeof(arr)/sizeof(*arr) \u0026lt;\u0026lt; endl; // 28/4 = 7.. weirdo!  // arrays are assholes.       Day 14 (expressions continued)  comma operator is a cool operator that mostly used in for loop   if you want to change more that one value at the same time_, comma operator\nis your friend\n  even though we can define more than one counter inside a for loop\n1 2 3 4 5 6 7 8  // notice we used commas in first part and last part of the for loop.  // we can also use comma inside second part of the for loop  for(unsigned i=9, j=30; i != j; i += 2, j += 1) { cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34;\\x2c\\x20\u0026#34; \u0026lt;\u0026lt; j \u0026lt;\u0026lt; \u0026#34;\\x0a\u0026#34;; }     we can also use comma in conditional operators\n  TODO: why does code also executes false conditions?\n1 2  int x = 3; x? /*do this*/, /*and this*/ : /*do this if false*/, /*is this bug? also works if true*/       Day 15 (statements)   null statement\n1 2  ; // null statement  {} // null block     example usage\n1 2 3 4 5 6 7  while (cin \u0026gt;\u0026gt; input \u0026amp;\u0026amp; input != \u0026#34;exit\u0026#34;) { ; // every null statelement should have a comment  } // or  {}     adding comments after a null statement improves readability\n  extra semicolons are legal but not always harmless\n  harmless extra semicolons\n1  unsigned a = 3;;;;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  int main(void) { ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;; ;;;;;;;; ;;;;;;;;;; ;;;;;;;;;{} ;;;;;;;{} ;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;; ;;;;; ;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;; ;;;;; ;;{{{{{{{{{{{{{}}}}}}}}}}}}};;; ;;;;; ;;;;;; ;;/* TOTALLY LEGAL C++ PROGRAM !!*/;; ;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;; ;;;;;;; ;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; return 0; }     harmfull semicolon\n1 2 3 4  while (a != 6); // this causes infinite loop  { ++a; }         switch case statement\n  accepts only constant integral values as labels\n1 2 3 4 5 6 7 8 9 10 11  unsigned x = 3; unsigned char y; cin \u0026gt;\u0026gt; y; switch (y) { case 3.14159: // error. not integer value  break; case x: // integral but not constant value  break; }     program that counts vowels and consonans in a word\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  int main(void) { string word; unsigned vows; unsigned cons; while (getline(cin, word) \u0026amp;\u0026amp; word != \u0026#34;exit\u0026#34;) { for ( auto c : word ) { switch(c) { case \u0026#39;a\u0026#39;:case \u0026#39;e\u0026#39;:case \u0026#39;i\u0026#39;:case \u0026#39;o\u0026#39;:case \u0026#39;u\u0026#39;: ++vows; break; // do not forget break statment  default: ++cons; break; } } } cout \u0026lt;\u0026lt; \u0026#34;vows: \u0026#34; \u0026lt;\u0026lt; vows \u0026lt;\u0026lt; endl; return 0; }     Notice that we used case statements in one line. this is legal bacause c++\nis free-type language.\n  aaand.. do not forget break statment after each case statement\n  adding default statement is a good practice even if you don\u0026rsquo;t need it.\nEmpty default statement needs a null statement\n  to define variables inside case statements use curly braces\n1 2 3 4 5 6 7 8 9 10 11 12  switch (value) { case 3: /* do something */ break; case 34: // pay attention! we have colons even if we have block  { int a = 533; // defining a variable inside curly braces  } default: ;; // empty statement to supply default  }         for loop\n  this form of for loop results an infinite loop\n1 2 3 4  for (int i=0;;++i) { cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; endl; }     this example is also infinite loop but makes sence\n1 2 3 4 5  vector\u0026lt;int\u0026gt; i_vec; for (int i; cin \u0026gt;\u0026gt; i; ) // for loops not just accepting *comparison* expressions  { i_vec.push_back(i); }     range for loops introduced in c++11. They can be used only with containers\nsuch as arrays, vectors and strings\n  in for loops we sometimes might not know the type of the container. In those\nsituations the auto keyword should be used\n1 2 3 4  for ( auto c : array ) { // do something  }       Day 16 (statements try-catch-throw)  By using stdexcept header we are able to use handlers try block throw expression catch function TODO: study try-catch  Day 17 (functions)   usage of postfix operators\n1 2 3 4 5 6 7 8 9 10  int factorial(unsigned int x) { unsigned int result = 1; while(result \u0026gt; 1) { result *= x--; // notice postfix --  // x is multiplied with restult and assigned to result. at last decremented  } return result; }     we can\u0026rsquo;t compound define arguments in function\n1 2  void f0(int a,b,c,d) // illegal!!  void f0(int a, int b, int c, int d) // okay     functions can\u0026rsquo;t directly return array of function type. Instead it can\nreturn a pointer to the array or a function (details for later)\n  local static objects are crazy things.. Their value is remembered after\nfunction is ended. When calling the same function again the static object\u0026rsquo;s\nvalue will be still there.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  void a() { // char and x are static variables. Their values will always be remembered  static char cntr = 1; // I want to print the following only once  if(cntr == 1) { cout \u0026lt;\u0026lt; \u0026#34;static\\tordinary\u0026#34; \u0026lt;\u0026lt; endl; --cntr; // cntr becomes 0. Hence this print won\u0026#39;t be executed anymore  } static unsigned x = 0; // x will always be immortal in this scope  unsigned y = 0; // y is mortal  ++x, ++y; // notice the comma operator  cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34;\\x09\u0026#34; \u0026lt;\u0026lt; y \u0026lt;\u0026lt; endl; // 0x09 = \u0026#39;\\t\u0026#39;  } int main(void) { a(); a(); a(); a(); a(); return 0; }   1 2 3 4 5 6  static ordinary 1 1 2 1 3 1 4 1 5 1     function declarations = function prototype\n  prototypes go inside header files.\n  to change an object value with a function there are two ways\n  using a pointer (C programmer). less efficient\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  void reset_ptr(int *p) { *p = 0; } int main(void) { int x = 3; int *ptr = \u0026amp;x; // defining extra pointer  reset_ptr(ptr); std::cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; std::endl; // output: 0  return 0; }     using a reference (C++ programmer) more efficient\n1 2 3 4 5 6 7 8 9 10 11 12 13  void reset_ref(int *r) { r = 0; } int main(void) { int x = 3; reset_ref(x); std::cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; std::endl; // output: 0  return 0; }       swap function using reference parameters\n1 2 3 4 5 6 7  void swap(int \u0026amp;x, int \u0026amp;y) { int tmp; tmp = x; x = y; y = tmp; }     PROTIP: when a reference passed as parameter into a function and its value\nis not chaning inside the function, pass it as const\n1 2 3 4  bool isShorter(const string s1, const string s2) { return (s1.size() \u0026lt; s2.size()); }     TODO: continue to functions chapter. You left it at the middle\n  Day 18 (class) ","description":"","id":10,"section":"posts","tags":["book"],"title":"C++ Primer Notes","uri":"https://savolla.github.io/posts/cpp-primer-notes/"},{"content":"bÃ¶lÃ¼m 1 - yazÄ±lÄ±m inÅasÄ±na giriÅ   yazara gÃ¶re, bu kitap, etrafa daÄÄ±lmÄ±Å bilginin bir yere toplanmÄ±Å hali\n  yazÄ±lÄ±m geliÅtirme ve programlama aynÄ± Åey deÄildir\n  yazÄ±lÄ±m inÅasÄ±, yazÄ±lÄ±m geliÅtirme alanÄ±ndaki bazÄ± konularÄ± iÃ§inde barÄ±ndÄ±ran Ã¶zelleÅmiÅ bir alt daldÄ±r. yazÄ±lÄ±m inÅasÄ±\u0026rsquo;nÄ±n (construction) dokunuÄu dallar:\n coding and debugging unit testing detailed design integration construction planning    construction terimi, programlama termine benzemektedir.\n  construction\u0026rsquo;Ä±n yazÄ±lÄ±m konusunda yaptÄ±ÄÄ± iÅler:\n kodun temelini oturtmak kodun nasÄ±l test edileceÄini belirlemek sÄ±nÄ±flarÄ± tasarlama ve yazmak deÄiÅkenleri oluÅturmak ve isimlendirmek kontrol yapÄ±larÄ±nÄ±n seÃ§imi ve kod bloklarÄ±nÄ±n organizasyonunu saÄlamak unit test, integrasyon test ve debug yapmak varsa diÄer takÄ±m Ã¼yelerinin kodunu incelemek ve kendi kodunun incelemesine izin vermek koda yorum satÄ±rÄ± eklemek ve dikkatli bir Åekilde organize etmek/formatlamak Ã¼Ã§Ã¼ncÃ¼ parti yazÄ±lÄ±mlarÄ±, koda entegre etme koda ince ayar yaparak daha hÄ±zlÄ± Ã§alÄ±ÅmasÄ±nÄ± ve daha az memory yemesini saÄlamak    construction\u0026rsquo;Ä±n dÄ±ÅÄ±nda kalan alanlar\n yÃ¶netim gereksinim geliÅtirme yazÄ±lÄ±m mimarisi kullanÄ±cÄ± arayÃ¼zÃ¼ tasarÄ±mÄ± sistem testi    construction, boyuta baÄlÄ± olarak, bir yazÄ±lÄ±m projesinin %30 veya %80\u0026rsquo;ini kaplayabilir\n  mimari ve gereksinimler, construction\u0026rsquo;dan Ã¶nce gerÃ§ekleÅen Åeylerdir. bu sayede construction Ã§ok daha hÄ±zlÄ± ve verimli bir Åekilde ilerler\n  kaynak kodu, construction evresinin bir Ã¼rÃ¼nÃ¼dÃ¼r. zamanla beraber, gereksinim ve dizayn dÃ¶kÃ¼manlarÄ± gÃ¼ncelliÄini yitirse dahi kaynak kodu her zaman gÃ¼ncel kalÄ±r.\n  bÃ¶lÃ¼m 2 - yazÄ±lÄ±m geliÅtirme metaforlarÄ±   Ã§ok iyi anlamadÄ±ÄÄ±mÄ±z Åeyleri bazen Ã§ok iyi bildiÄimiz bir Åeylerle iliÅkilendirdiÄimizde yani metafor kullandÄ±ÄÄ±mÄ±zda, olayÄ± modellemiÅ oluruz ve daha iyi anlamÄ±Å oluruz\n  kitapta yazÄ±lÄ±m geliÅtirme iÃ§in kullanÄ±lan metafor ise ev inÅaatÄ±\n  mesela kÃ¶peÄin iÃ§in bir kulube yapmaya kalkarsak, ihtiyacÄ±mÄ±z olan sadece bir kaÃ§ tahta ve Ã§ivi. kulube bittiÄinde eÄer bir Åeyleri yanlÄ±Å yaptÄ±ysak, bu Ã§ok bÃ¼yÃ¼k bir sorun teÅkil etmez. ya var olan kulubeyi alÄ±p Ã¼zerinde oynamalar yaparak dÃ¼zeltiriz ya da onun yerine yeni bir kulube yapabiliriz.\n  yukarÄ±daki metafor, yazdÄ±ÄÄ±mÄ±z kÃ¼Ã§Ã¼k kodlar/projeler iÃ§in de geÃ§erlidir. program dÃ¼zgÃ¼n Ã§alÄ±ÅmÄ±yorsa ya Ã¼stÃ¼nde oynama yapar dÃ¼zeltmeye Ã§alÄ±ÅÄ±rÄ±z ya da sil baÅtan yeni bir tane yazarÄ±z\n  daha bÃ¼yÃ¼k bir ev yapmak istediÄimizde ise metaforu geniÅletmemiz gerekir:\n nasÄ±l bir ev yapmak istiyoruz? : problemi anlamak mimar bir tasarÄ±m yapar : yazÄ±lÄ±m mimari dizaynÄ± evin planÄ±nÄ±n Ã§Ä±karÄ±lmasÄ± : detaylÄ± yazÄ±lÄ±m tasarÄ±mÄ± evin inÅasÄ± : yazÄ±lÄ±m tasarÄ±mÄ±nÄ±n kodlanmasÄ± bahÃ§Ä±navlar, boyacÄ±lar gelip etrafÄ± gÃ¼zelleÅtirir: optimizasyon    BÃ¶lÃ¼m 3   yazÄ±lÄ±m inÅasÄ±ndan Ã¶nce planlama ve dizayn Ã§ok Ã¶nemli bir rol oynar\n  YazÄ±lÄ±m GeliÅtirme sacede kod yazmak deÄildir\n  WISCA sendromu: \u0026ldquo;Why Isn\u0026rsquo;t Sam Coding Anymore?\u0026rdquo;\n  WIMP sendromu: \u0026ldquo;Why Isn\u0026rsquo;t Mary Programming\u0026rdquo;\n  EÄer patronun gerizekalÄ±ysa ve her hangi bir dizayn ya da mimariden yoksun bir biÃ§imde kod yazmayÄ± istiyorsa, eski bir projeyi aÃ§ ve yan pencerede dizayn ve mimarini yap. Bu sayede hem sen hem de gerizekalÄ± patronun huzurlu bir Åekilde hayatÄ±na devam eder\n  hayat, etrafta daha iyi alternatifler varken cahil bir patronla Ã§alÄ±Åmak iÃ§in Ã§ok kÄ±sa. iÅi bÄ±rak ve baÅka Åirket bul\n  bir yazÄ±lÄ±m geliÅtirme sÃ¼recine farklÄ± bir bakÄ±Å;\n mimar + requirements = mimari dizayner + mimary = dizayn programcÄ± + dizayn = program    yukarÄ±da gÃ¶rÃ¼ldÃ¼ÄÃ¼ gibi, program, zincirin en sonundadÄ±r. Bu demek oluyor ki, iyi bir programÄ±n ortaya Ã§Ä±kmasÄ± iÃ§in dizayÄ±n iyi yapÄ±lmasÄ±, dizaynÄ±n iyi yapÄ±lmasÄ± iÃ§in de mimarÄ±n iÅini iyi yapmasÄ± gerekir. yani aslÄ±nda yazÄ±lÄ±mÄ±n kaliteli mimarÄ±n elindedir\n   ","description":"","id":11,"section":"posts","tags":["book"],"title":"Code Complete NotlarÄ±m","uri":"https://savolla.github.io/posts/code-complete-notes/"},{"content":"const   const in the following code indicates that foo is read-only value. And can\u0026rsquo;t be changed by programmer and other functions or threads\n1  int const foo;   here is how to read the upper code;\n foo is a constant integer value\n   This is the example of constant pointer. This means that the pointed address is fixed and cannot be changed but the value in that address can be changed\n1  int *const foo;       Can Be Changed     Value at Address Yes   Pointed Address No    here is how to read the upper code;\n foo is a constant pointer which points to integer value\n   foo value is fixed but the pointed address can be changed\n1  int const *foo;       Can Be Changed     Value at Address No   Pointed Address Yes    here is how to read the upper code;\n foo is a pointer which points to constant integer value\n   Both value and pointer are fixed. Can\u0026rsquo;t be changed by programmer or other sources. This is now truly read-only value by address and value\n1  int const *const foo;   here is how to read the upper code;\n foo is a constant pointer of constant integer value\n   volatile   No optimization, value inside foo can change unexpectedly by another sources like other functions, threads or hardware interrupts and by the programmer itself\n1  int volatile foo;     Great use case for Memory Mapped Registers like GPIO ports, sensors, onboard LEDs etc. Compiler optimization is disabled for foo\n1  int volatile *foo;    Following code examples have very rare use cases. They almost never used   1  int *volatile foo;   1  int volatile *volatile foo;     const \u0026amp; volatile  pointed address can\u0026rsquo;t be changed. Value inside that address is volatile. That means compiler optimization is not allowed for foo and data can be changed by programmer, other functions, other threads and hardware interrupts   1  int volatile *const foo;    Same as above but this time the data inside address can\u0026rsquo;t be changed by programmer and other software elements like threads, other functions etc. Data can be changed only by hardware. This is a perfect case for storing sensor data. Which can only be changed by the sensor itself (like temperature sensor) and programmer is allowed only to read the data   1  int const volatile *const foo;   ","description":"Knowledge collected for Embedded Systems","id":12,"section":"posts","tags":null,"title":"const \u0026 volatile","uri":"https://savolla.github.io/posts/const-and-volatile/"},{"content":":EXPORT_FILE_NAME: cracking-the-coding-interview-notes\n:EXPORT_TITLE: Cracking the Coding Interview Notes\n:HUGO_BASE_DIR: ~/txt/blog/\n:HUGO_SECTION: en/posts\n:EXPORT_AUTHOR: savolla\nBu post\u0026rsquo;da TÃ¼rkÃ§e olarak Cracking the Coding Interview kitabÄ±nÄ±n Ã¶zetini Ã§Ä±kartÄ±yorum. Ilk ve ikinci bÃ¶lÃ¼mleri ingilizce yazdÄ±m, dert etmeyin onlarÄ± revize edip TÃ¼rkÃ§eleÅtireceÄim. Bu kitapta, iÅ baÅvurularÄ±nda dikkat edilecek hususlar Ã§ok gÃ¼zel anlatÄ±lmÄ±ÅtÄ±r. Ben de en azÄ±ndan Ã¶zetini Ã§Ä±kararak Ã¶nemli yerleri sizinle paylaÅmaya karar verdim. Ä°yi okumalar\nBÃ¶lÃ¼m 1  recruiters look for the following;  analytical skills  how confidently you solved the problem how optimal was your solution how fast you are how efficient was your algorithm   coding skills  how clean your code is how good your style was did you handle errors or not   computer science knowledge. do you have strong foundation or not did you make challanging / interesting projects before or not do you communicate well or not   having knowledge of data structures and algorithms is really important and positively corelates with being a good developer the reason behind whiteboard coding is that recruiters want you to focus on actual problem solving instead of struggling in restricted computer environment when compilers spit errors all over the place. the code you write does not need to be perfect and it\u0026rsquo;s okay if it contains some syntactical errors. just show to the interviewer how you approach to the problem and write an acceptable code companies usually follow a pattern when selecting interview questions. there are two types of questions;  algorithm questions technology questions (do you have experience with techonology X?)   interviewers always compare your performance to other\u0026rsquo;s that came before and after you. even if you think that you performed well, a japanese hacker who came before you can change all the game. it\u0026rsquo;s all about luck m8 don\u0026rsquo;t think that you\u0026rsquo;ve been rejected immediately if you don\u0026rsquo;t get response in 2-3 days. your interviewer might still work on your and other assessments. be patient and calm if you\u0026rsquo;ve been rejected but really want that job you must wait for at least 6 months before re-application.  BÃ¶lÃ¼m 2  before face-to-face interview you always get a screen interview. this is actually a phone interview where skype or relative apps are used coding and algorithms questions are asked during the screen interview. questions are hard as ones that asked in face-to-face interview sometimes interviewer might give you a homework which you solve and send the code through e-mail. (rare case) the most of the time questions are asked in real time and you try to solve them while interviewer watches (common case) you do one or two screens before they take you to face-to-face arena  BÃ¶lÃ¼m 3   aÅaÄÄ±daki maddelerde, bazÄ± deÄiÅken durumlar anlatÄ±lmÄ±ÅtÄ±r;\n  gÃ¶rÃ¼Åmeciler (interviewer) Ã§ok tecrÃ¼beli ve uzun sÃ¼re Ã§alÄ±Åan geliÅtiricileri, daha dÃ¼ÅÃ¼k standartlarda gÃ¶rÃ¼p algoritmik sorularÄ± daha kolay sorabilir. ne de olsa bu insanlar mezun olalÄ± yÄ±llar olmuÅtur ve gÃ¶rÃ¼Åmeciler, onlarÄ±n paslandÄ±klarÄ±nÄ±n farkÄ±ndadÄ±rlar\n  bazÄ± Åirketlerde de tam tersi olabilir. yani uzun sÃ¼re Ã§alÄ±ÅanlarÄ±n daha Ã§ok problem Ã§Ã¶zdÃ¼ÄÃ¼nÃ¼ ve bu konuda yÄ±llar geÃ§tikÃ§e daha iyi olduklarÄ±nÄ± dÃ¼ÅÃ¼nÃ¼rler ve yeni mezunlara gÃ¶re daha zor sorabilirler\n  Ã§oÄu zaman tecrÃ¼beli kiÅilere system tasarÄ±mÄ± sorularÄ± gelirken yeni mezun olanlar bu konuda Ã§alÅma yapmadÄ±klarÄ± iÃ§in (daha Ã§ok akademik derslere aÄÄ±rlÄ±k verdiklerinden) genelde bu sorulardan kurtulabilirler\n  yeni mezunlara gÃ¶re tecrÃ¼belilerin, sorulara Ã§ok daha ayrÄ±ntÄ±lÄ± cevap vermeleri beklenir. yani yeni mezunsak iÅ Ã§ok daha kolay. sadece algoritma sorularÄ±na Ã§alÄ±ÅmamÄ±z (hackerrank, codewars) ve Åu an zaman varken bol bol proje yapmamÄ±z yeterli olacaktÄ±r. tecrÃ¼belilerin iÅ bulmasÄ± bizden daha zor\n    skill atrophy: bir yetenek ya da bilgi kullanÄ±lmadÄ±ÄÄ±nda, o yeteneÄin kÃ¶relmesi anlamÄ±na gelir. bizim perspektifimizden bakÄ±ldÄ±ÄÄ±nda, algoritma ve kodlama bir yetenektir ve asla atrofiye uÄramamasÄ± gerekir\n   kitapta bu bÃ¶lÃ¼mde, SDET ve PM ile ilgili kariyer ve gÃ¶rÃ¼Åme tavsiyeleri verilmiÅ. bu bizi Åu anda ilgilendirmiyor.\n   SDET: (software design engineer and tester) yazÄ±lÄ±mlarÄ± test eden elemanlardÄ±r. bunlarÄ±n genelde normal bir developerdan daha iyi olmasÄ± beklenir Ã§Ã¼nkÃ¼ bu iÅ aynÄ± zamanda kalite kontrol\u0026lsquo;Ã¼n yazÄ±lÄ±m camiasÄ±ndaki karÅÄ±lÄ±ÄÄ±dÄ±r. bu yÃ¼zden bir SDET\u0026rsquo;in iÅ bulmasÄ± demek, buraya kadar bahsi geÃ§en pozisyonlardan daha Ã§ok Ã§alÄ±ÅmasÄ± gerek demek oluyor\n  PM (Product Manager): daha Ã§ok takÄ±m yÃ¶netimi yapan ve geliÅtiricilerin Ã¼rettiÄi yazÄ±lÄ±mÄ±n sorumluluÄunu Ã¼stlenen elemandÄ±r. kod yazmaktan Ã§ok iÅin business tarafÄ±yla ilgilenir\n  bir startup\u0026rsquo;a katÄ±lmak istiyorsan;\n  CV\u0026rsquo;de ilk gÃ¶ze Ã§arpan kÄ±smÄ±n, yapÄ±lan projeler olmasÄ± gerekir. startup alÄ±m sÃ¼reÃ§lerinde CV incelemesi sÄ±rasÄ±nda kiÅinin ne kadar giriÅimci ve programlama konusunda ne kadar Ã¼retken olduÄu, bu kÄ±sÄ±mda gÃ¶ze Ã§arpar. yani \u0026ldquo;ben Åu dilleri biliyorum\u0026rdquo;, \u0026ldquo;Åu teknolojileri biliyorum\u0026rdquo;\u0026lsquo;a bakmazlar (genelde)\n  kesinlikle, bir startup gÃ¶rÃ¼Åmecisiyle \u0026ldquo;samimi\u0026rdquo; ve \u0026ldquo;arkadaÅÃ§a\u0026rdquo; iletiÅim kurulmasÄ± gerekir. Åirket henÃ¼z Ã§ok kÃ¼Ã§Ã¼ktÃ¼r ve insanlar yanlarÄ±nda genelde takÄ±labilecekleri insanlar arar. burada iÅin sosyal tarafÄ±, iÅ tarafÄ± kadar aÄÄ±r basabilir\n  startup\u0026rsquo;daki projede kullanÄ±lan dil ile ilgili Ã§ok iyi bir derinliÄe sahip ol Ã§Ã¼nkÃ¼ sorular genelde dil spesifik gelir. (bir startup\u0026rsquo;a gÃ¶re dil Ã¶Ärenmek deÄil de bildiÄimiz dilde iÅ yapan bir startup\u0026rsquo;a baÅvurmak Ã§ok daha efektif olur)\n  strtuplar tecrÃ¼be de isterler. buradan benim Ã§Ä±karttÄ±ÄÄ±m, bÃ¼yÃ¼k Åirketler, tecrÃ¼beli developerlarÄ± gÃ¶rÃ¼Åme esnasÄ±nda Ã§ok hÄ±rpalarken, startuplarda genelde iÅ kÃ¼Ã§Ã¼k olduÄundan tecrÃ¼belileri havada kapÄ±yor olabilirler. bu yÃ¼zden yeni mezun birinin bÃ¼yÃ¼k bir Åirkette iÅ bulmasÄ±, startup\u0026rsquo;da iÅ bulmasÄ±ndan daha kolaydÄ±r (?)\n     buradan sonrasÄ±, Åirket iÃ§i iÅ gÃ¶rÃ¼Åmelerinden ve interviewerlara tavsiyelerden bahsediyor. bizim iÃ§in Åu anlÄ±k Ã¶nemli deÄil\n BÃ¶lÃ¼m 4 TecrÃ¼be Kazanma YollarÄ±  iyi bir tecrÃ¼be yoksa, iyi bir CV olmaz. iyi bir CV yoksa da kimse sizi iÅ gÃ¶rÃ¼Åmesine Ã§aÄÄ±rmaz Ã¶Ärenciler bakÄ±mÄ±ndan yukarÄ±daki sorunun Ã§Ã¶zÃ¼mÃ¼;  gerÃ§ek sorunlar Ã§Ã¶zen projeler yap staj yap startup ara boÅ zamanÄ±nda bir proje yap, hackatonlara katÄ±l, github\u0026rsquo;da open source bir projeye katkÄ±da bulun    Iyi Bir CV Yazma YollarÄ±   aslÄ±nda Åirketler birinde sadece ÅunlarÄ± ararlar;\n zeki misin? kod yazabilir misin?  CV\u0026rsquo;de yazanlar, bu iki Åeyin kanÄ±tÄ± olmalÄ±dÄ±r. Åirketlere zeki ve Ã§alÄ±Åkan olduÄunuzu katÄ±nladÄ±ÄÄ±nÄ±z anda iÅi kaparsÄ±nÄ±z\n  CV yazarken, odak noktasÄ± kesinlikle \u0026ldquo;zeki misin?\u0026rdquo; ve \u0026ldquo;kod yazabiliyor musun?\u0026rdquo; sorularÄ±na cevap vermeli. teknik olmayan Åeyeri (hobi gibi) CV\u0026rsquo;ye eklemek Ã§ok akÄ±llÄ±ca deÄildir\n  Ã¶Ärencilerin ve 10 seneden az tecrÃ¼besi olan kiÅilerin CV\u0026rsquo;si 1 sayfa olmalÄ±dÄ±r. data tecrÃ¼beliler 1.5 ya da 2 sayfa olmalÄ±dÄ±r\n  uzun bir CV hiÃ§ bir zaman faydalÄ± deÄildir Ã§Ã¼nkÃ¼ iÅ verenler CV\u0026rsquo;ye bakarken en fazla 10 saniye harcarlar.\n  CV\u0026rsquo;ye sadece sÄ±rasÄ±yla;\n en bÃ¼yÃ¼k projeleri en bÃ¼yÃ¼k tecrÃ¼beleri (iÅ tecrÃ¼besi, programlama dilleri) en bÃ¼yÃ¼k baÅarÄ±larÄ±nÄ±  yukarÄ±dakilerden daha fazla Åey yazmak, iÅ verenin sadece dikkatini daÄÄ±tÄ±r.\n  bazÄ± iÅverenler, uzun CV gÃ¶rdÃ¼klerinde direk fÄ±rlatÄ±rlar..\n  CV her zaman Ä°ngilizce olmalÄ±dÄ±r. her zaman ana dili ingilizce olan ya da bir tercumana okutup gramer ya da yazÄ±m yanlÄ±ÅlarÄ±nÄ±zÄ± kontrol ettirin.\n  CV\u0026rsquo;de yaÅ, cinsiyet, medeni durum belirtmeyin. bunu yaparsanÄ±z, Ã¶zellikle Amerika\u0026rsquo;da ters teper\n  TecrÃ¼beler   eÄer Ã§ok tecrÃ¼beliysen ve 1 sayfaya sÄ±ÄdÄ±ramÄ±yorsan, 1 sayfaya sÄ±ÄdÄ±rmanÄ±n yollarÄ±nÄ± ara. ya da en Ã¶nemsizleri ele. 1 sayfa is the key\n  tecrÃ¼be kÄ±smÄ±nda, iÅ geÃ§miÅinin tamamÄ±nÄ± yazmak Ã¶nerilmez. Ã§Ã¼nkÃ¼ Ã§ok iÅ deÄiÅtiren biri olarak gÃ¶rÃ¼nÃ¼rsÃ¼n. onun yerine sadece en Ã¶nemlileri yaz. her Åirket isminin altÄ±na tek cÃ¼mleyle ne yaptÄ±ÄÄ±nÄ± anlat. Ã¶rnek bir cÃ¼mle kalÄ±bÄ±;\n Y\u0026rsquo;yi yaparak X\u0026rsquo;i baÅardÄ±m\n   Projeler  proje kÄ±smÄ±, yaptÄ±ÄÄ±nÄ±z en bÃ¼yÃ¼k 2-4 projeden oluÅmalÄ± projelerin aÃ§Ä±klama kÄ±smÄ±nda;  hangi dil ya da dillerle yazÄ±ldÄ± hangi teknolojiler kullanÄ±ldÄ± proje bir takÄ±m projesi mi? bir kurs yardÄ±mÄ±yla mÄ± yapÄ±ldÄ±? kendin mi yaptÄ±n?   yukarÄ±daki her maddeye uyulmasÄ± mecburi deÄildir. eÄer maddeler sizi iyi gÃ¶steriyorsa o zaman belirtin.  maddede, eÄer projeyi baÄÄ±msÄ±z olarak tek baÅÄ±nÄ±za yaptÄ±ysanÄ±z bunu belirtin. bu, iÅ verenler iÃ§in takÄ±m projesi\u0026rsquo;nden daha deÄerlidir   Ã§oÄu insan CV\u0026rsquo;sine yaptÄ±ÄÄ± bÃ¼tÃ¼n projeleri yazar ki bu iÅ verenleri yoran bir Åey. maximum 4 proje yazÄ±n  Programlama Dilleri  bu gÃ¼ne kadar Ã§alÄ±ÅtÄ±ÄÄ±nÄ±z bÃ¼tÃ¼n dilleri yazmaya kalkmayÄ±n en iyi olduÄunuz ve en iyi bildiÄiniz dilleri yazÄ±n Ã§Ã¼nkÃ¼ bir insan bÃ¼tÃ¼n dillerin tÃ¼m teknik detaylarÄ±nÄ± bilemez. abartÄ±lmÄ±Å bir liste, iÅ verenin sizin hakkÄ±nÄ±zda pozitif dÃ¼ÅÃ¼nceler oluÅturmaz uzun dil listesine sahip adaylarÄ± genelde iÅ gÃ¶rÃ¼Åmesinde Ã¶zellikle sÄ±narlar ve normal bir listeye sahip birine nazaran Ã§ok daha zor sorular yÃ¶neltebilirler. yetkinlik seviyenizi kabaca parantezler iÃ§inde belirtin. Ã¶rnek bir liste;  java (fluent) C++ (proficient) javascript (prior experience)   yetkinlik seviyesi iÃ§in yÄ±l yazmayÄ±n. 10 sene Ã¶nce javascript Ã¶Ärenip sadece bir kaÃ§ kere yazdÄ±ysanÄ±z bu gerÃ§eten 10 yÄ±llÄ±k bir tecrÃ¼be mi? eÄer bir sertifikanÄ±z varsa ve bu bir programlama diliyle alakalÄ±ysa kesinlikle CV\u0026rsquo;de buna yer vermeyin. iÅ verenler bu sertifikalarÄ± ciddiye almazlar eÄer bir dilin belli bir versiyonuyla ilgili tecrubeniz varsa mesela, C11, C99, Perl5 gibi, iÅ verenler kesinlikle bu tarz bir Åeyi ciddiye almazlar. bunun yerine C ve Perl demek daha doÄrudur. aslÄ±nda bu tarz bir Åey, yazÄ±lÄ±mcÄ±nÄ±n dil konusunda ne kadar spesifik olduÄunu gÃ¶sterir ama Ã§oÄu Åirket buna deÄer vermez stigma: bir programlamma dilinin zaman iÃ§inde Ã¶n yargÄ±lara maruz kalÄ±p deÄerini yitirmesidir. Ã¶rnek olarak Visual Basic ve .NET teknolojileri. eÄer .NET iÅine baÅ vurmuyorsanÄ±z, bu teknolojileri ve diÄer stigma kazanmÄ±Å (Ã¶n yargÄ± kazanmÄ±Å) dilleri ya da teknolojileri CV\u0026rsquo;de belirtmeye gerek yok yukarÄ±daki maddeden yola Ã§Ä±karak Åirketlerin (Ã¶zellikle Amerikadakilerin) Ã¶nem verdikleri diller en az\u0026rsquo;dan en Ã§oÄa sÄ±ralanmÄ±ÅtÄ±r;  C#, .NET, Visual Basic Ruby, Python, Javascript Java, C++    Ä°Å BaÅvurusuna HazÄ±rlÄ±k HaritasÄ± BÃ¶lÃ¼m 5   CV\u0026rsquo;de yazÄ±lan projeler incelenip genelde bu projelerle ilgili size soru yÃ¶neltilir. CV\u0026rsquo;yi inceleyen kiÅi, gÃ¶rÃ¼Åmeden Ã¶nce bu projelere ne kadar hakim olduÄunuzu gÃ¶rmek iÃ§in zor sorular hazÄ±rlayabilir.\n  CV\u0026rsquo;deki projeleri Ã§ok iyi Ã§alÅÄ±p, ÅÃ¶yle bir tablo hazÄ±rlanmasÄ± Ã§ok faydalÄ± olacaktÄ±r;\n   yaygÄ±n soru proje1 proje2 proje3     zorluklar/buglar \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;   hatalar/baÅarÄ±sÄ±zlÄ±klar \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;   keyif alÄ±nan taraflar \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;   liderlik \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;   Ã§atÄ±Åmalar (takÄ±m ise) \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;   neyi farklÄ± yapardÄ±n \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;      bu tabloyu doldurup iyice Ã§alÄ±Å. iÅ veren projeler hakkÄ±nda soru sordukÃ§a burda yazdÄ±klarÄ±nÄ± hatÄ±rla ve cevapla\n  size \u0026ldquo;zayÄ±f yanlarÄ±nÄ±z\u0026rdquo; nelerdir diye sorduklarÄ±nda gerÃ§ek bir zayÄ±flÄ±k sÃ¶yleyin. \u0026ldquo;Ã§ok Ã§alÄ±Åmak\u0026rdquo; gibi cevaplar Ã§ok ciddiye alÄ±nmaz ve dÃ¼rÃ¼st olmadÄ±ÄÄ±nÄ±zÄ± dÃ¼ÅÃ¼ndÃ¼rÃ¼r.\n  zayÄ±flÄ±klarÄ±nÄ±zdan bahsederken aynÄ± zamanda bu zayÄ±flÄ±klarla nasÄ±l baÅa Ã§Ä±kmaya Ã§alÄ±ÅtÄ±ÄÄ±nÄ±zÄ± da anlatmanÄ±z gerekir. Ã¶rnek;\n yeni bir projeye baÅladÄ±ÄÄ±mda Ã§ok hÄ±zlÄ± burn out olabiliyorum. baÅa Ã§Ä±kmak iÃ§in pomodoro tekniÄini kullanÄ±yorum\n   yeni bir teknolojiyi Ã¶Ärenirken, kendimi bu konuda sonuna kadar gitmem gerektiÄine inandÄ±rÄ±yorum. bundan dolayÄ± teknolojiye Ã¶Ärenmeye odaklanmak yerine, kendimi en iyi kaynaÄÄ± araÅtÄ±rmaya zaman harcarken bulabiliyorum. Bu konuda tecrÃ¼be kazandÄ±ÄÄ±m iÃ§in artÄ±k Ã§oÄu kez yaptÄ±ÄÄ±m yanlÄ±ÅÄ±n farkÄ±na varabiliyorum\n   Interviewer\u0026rsquo;a YÃ¶neltilebilecek Sorular  interviewer size soru sormanÄ±za izin verebilir. bir iÅ gÃ¶rÃ¼Åmesinde, 3 tip Ã¶nemli soru Ã§eÅidi vardÄ±r;  Hakiki Sorular cevaplarÄ±nÄ± gerÃ§ekten bilmek istediÄiniz sorulardÄ±r\n Åirkette, geliÅtirici, tester ve yÃ¶netici dengesi nasÄ±l? takÄ±mda proje planlamasÄ± nasÄ±l yapÄ±lÄ±yor?\n   peki siz bu Åirkete nasÄ±l geldiniz? genelde bu Ã§alÄ±Åma ortamÄ±nda sizi en Ã§ok zorlayan ne oluyor?\n Teknik Sorular bu sorular genelde Åirkete baÅvurmadan Ã¶nce bayaÄÄ± bir araÅtÄ±rdÄ±ÄÄ±nÄ±zÄ± anlatÄ±r\n gÃ¶rdÃ¼ÄÃ¼m kadarÄ±yla X teknolojisini kullanÄ±yorsunuz. bununla Y problemini nasÄ±l Ã§Ã¶zÃ¼yorsunuz?\n   yaptÄ±ÄÄ±nÄ±z Ã¼rÃ¼n X teknolojisi yerine neden Y\u0026rsquo;yi seÃ§ti? Y\u0026rsquo;nin A,B,C konularÄ±nda avantajlarÄ± olduÄunu biliyorum ancak diÄer Åirketler Y\u0026rsquo;yi D sorunu yÃ¼zÃ¼nden kullanmÄ±yorlar\n ÃalÄ±ÅkanlÄ±k YansÄ±tan Sorular bu tarz sorular iÅ verenin, sizin ne kadar azimli olduÄunuzu gÃ¶rmesini ve Åirket iÃ§in faydalÄ± olacaÄÄ±nÄ±zÄ± dÃ¼ÅÃ¼nmesini saÄlar\n YazÄ±lÄ±mÄ±n Ã¶lÃ§eklenebilirliÄi konusunda kendimi geliÅtirmeye Ã§alÄ±ÅÄ±yorum. bu Åirkette bu konuyla alakalÄ± neler Ã¶Ärenebilirim?\n   KullandÄ±ÄÄ±nÄ±z X teknolojisini daha Ã¶nce hiÃ§ duymadÄ±m ancak Ã§ok ilginÃ§ bir yÃ¶nteme benziyor. NasÄ±l Ã§alÄ±ÅtÄ±ÄÄ±ndan biraz bahseder misiniz?\n Dikkat edilmesi gereken hususlar   projelerle ilgili konuÅurken ya da sorular yÃ¶neltirken asla ama asla kibirli gÃ¶rÃ¼nme. Kendini her zaman bir Ã§aylakmÄ±ÅÃ§asÄ±na alÃ§ak gÃ¶nÃ¼llÃ¼ ve saygÄ±lÄ± olarak gÃ¶ster. (genel olarak Ã¶yle ol zaten)\n  gÃ¶rÃ¼Åmeciler bu tarz Ã§ok insan ile karÅÄ±laÅtÄ±klarÄ±ndan, artÄ±k insan sarrafÄ± olma yolunda ilerliyorlardÄ±r. en ufak bir kibir belirtisinde Ã§izerler\n  sorularÄ± cevaplarken, karÅÄ±nÄ±zdakini detaya boÄmayÄ±n. Ã§ok Ã¶nemli noktalara deÄinin ve daha fazla detay gerektiren bir konuda, karÅÄ±nÄ±zdakinden izin alÄ±p Ã¶yle devam etmeye Ã¶zen gÃ¶sterin. Ã§Ã¼nkÃ¼ gelen kiÅinin, teknik detaylardan ne kadar anladÄ±ÄÄ±nÄ± ya da duymaktan hoÅlanÄ±p hoÅlanmadÄ±ÄÄ±nÄ± bilemezsiniz.\n  takÄ±m projesinde yer aldÄ±ysanÄ±z, takÄ±mÄ±n baÅarÄ±larÄ±nÄ± anlatmak yerine kendinizin bu takÄ±mdaki baÅarÄ±larÄ±nÄ±zdan bahsedin. Ã§Ã¼nkÃ¼ takÄ±m ile ilgili konuÅmalarÄ±nÄ±zda, sizin ne yaptÄ±ÄÄ±nÄ±z ile ilgili bir fikir oluÅmaz\n  \u0026ldquo;kendininden biraz bahseder misiniz?\u0026rdquo; tarzÄ± bir soru geldiÄinde kronolojik sÄ±raya gitmeye dikkat edin ve sÄ±rasÄ±yla Åunlardan bahsedin;\n Åu anda bir yerde Ã§alÄ±ÅÄ±yorsanÄ±z rol belirterek sÃ¶ze girin hangi okulda okudun ve hangi bÃ¶lÃ¼m stajlar okuldan sonra ne yaptÄ±n iÅ dÄ±ÅÄ±nda yaptÄ±ÄÄ±n projeler/Ã§alÄ±Åmalar Åu anda neden burda olduÄunu anlatarak toparla bitir  hobilerden bahsetmek istersen bunu 5. maddede belirt ancak hobilerden bahsetmek bazen tehlikeli olabilir. dikkat et\n  BÃ¶lÃ¼m 6 Big O  iÃ§ini dÄ±ÅÄ±nÄ± bilmezsen, kÃ¶tÃ¼ gÃ¶zle bakarlar   ","description":"","id":13,"section":"posts","tags":null,"title":"Cracking The Coding Interview Notes","uri":"https://savolla.github.io/posts/cracking-the-coding-interview-notes/"},{"content":":EXPORT_FILE_NAME: all-available-cross-compilers-on-earth\n:EXPORT_TITLE: List of All Available Cross-Compilers\n:HUGO_BASE_DIR: ~/txt/blog/\n:HUGO_SECTION: en/posts\n:EXPORT_AUTHOR: savolla\nThese are available cross compilers that available. std columns indicates the availability of standard library. if std is â then target can run standard library functions. if * then target is bare-metal and requires startup code crt0. ? if unknown\nARM 64-bit aarch64    Target std Description     aarch64-apple-darwin â ARM64 macOS (11.0+, Big Sur+)   aarch64-apple-ios â ARM64 iOS   aarch64-apple-ios-macabi ? Apple Catalyst on ARM64   aarch64-apple-tvos * ARM64 tvOS   aarch64-fuchsia â ARM64 Fuchsia   aarch64-linux-android â ARM64 Android   aarch64-pc-windows-msvc â ARM64 Windows MSVC   aarch64-unknown-freebsd â ARM64 FreeBSD   aarch64-unknown-hermit ?    aarch64-unknown-linux-gnu â ARM64 Linux (kernel 4.2, glibc 2.17+) 1   aarch64-unknown-linux-musl â ARM64 Linux with MUSL   aarch64-unknown-netbsd â    aarch64-unknown-none * Bare ARM64, hardfloat   aarch64-unknown-none-softfloat * Bare ARM64, softfloat   aarch64-unknown-openbsd â ARM64 OpenBSD   aarch64-unknown-redox ? ARM64 Redox OS   aarch64-uwp-windows-msvc ?    aarch64-wrs-vxworks ?     Intel i386    Target std Description     i386-apple-ios â 32-bit x86 iOS    Intel i586    Target std Description     i586-pc-windows-msvc â 32-bit Windows w/o SSE   i586-unknown-linux-gnu â 32-bit Linux w/o SSE (kernel 4.4, glibc 2.23)   i586-unknown-linux-musl â 32-bit Linux w/o SSE, MUSL    Intel i686    Target std Description     i686-apple-darwin â 32-bit macOS (10.7+, Lion+)   i686-linux-android â 32-bit x86 Android   i686-pc-windows-gnu â 32-bit MinGW (Windows 7+)   i686-pc-windows-msvc â 32-bit MSVC (Windows 7+)   i686-pc-windows-msvc â 32-bit Windows XP support   i686-unknown-freebsd â 32-bit FreeBSD   i686-unknown-haiku â 32-bit Haiku   i686-unknown-linux-gnu â 32-bit Linux (kernel 2.6.32+, glibc 2.11+)   i686-unknown-linux-musl â 32-bit Linux with MUSL   i686-unknown-netbsd â NetBSD/i386 with SSE2   i686-unknown-openbsd â 32-bit OpenBSD   i686-unknown-uefi ? 32-bit UEFI   i686-uwp-windows-gnu ?    i686-uwp-windows-msvc ?    i686-wrs-vxworks ?     Intel 64-bit x86_64    Target std Description     x86_64-apple-darwin â 64-bit macOS (10.7+, Lion+)   x86_64-apple-ios â 64-bit x86 iOS   x86_64-apple-ios-macabi â Apple Catalyst on x86_64   x86_64-apple-tvos * x86 64-bit tvOS   x86_64-fortanix-unknown-sgx â Fortanix ABI for 64-bit Intel SGX   x86_64-fuchsia â 64-bit Fuchsia   x86_64-linux-android â 64-bit x86 Android   x86_64-linux-kernel * Linux kernel modules   x86_64-pc-solaris ?    x86_64-pc-windows-gnu â 64-bit MinGW (Windows 7+)   x86_64-pc-windows-msvc â 64-bit MSVC (Windows 7+)   x86_64-pc-windows-msvc â 64-bit Windows XP support   x86_64-rumprun-netbsd â 64-bit NetBSD Rump Kernel   x86_64-sun-solaris â 64-bit Solaris 10/11, illumos   x86_64-unknown-dragonfly â 64-bit DragonFlyBSD   x86_64-unknown-freebsd â 64-bit FreeBSD   x86_64-unknown-haiku â 64-bit Haiku   x86_64-unknown-hermit ?    x86_64-unknown-hermit-kernel ? HermitCore kernel   x86_64-unknown-illumos â illumos   x86_64-unknown-l4re-uclibc ?    x86_64-unknown-linux-gnu â 64-bit Linux (kernel 2.6.32+, glibc 2.11+)   x86_64-unknown-linux-gnux32 â 64-bit Linux (x32 ABI) (kernel 4.15, glibc 2.27)   x86_64-unknown-linux-musl â 64-bit Linux with MUSL   x86_64-unknown-netbsd â NetBSD/amd64   x86_64-unknown-openbsd â 64-bit OpenBSD   x86_64-unknown-redox â Redox OS   x86_64-unknown-uefi ?    x86_64-uwp-windows-gnu â    x86_64-uwp-windows-msvc â    x86_64-wrs-vxworks ?     MIPS    Target std Description     mips-unknown-linux-gnu â MIPS Linux (kernel 4.4, glibc 2.23)   mips-unknown-linux-musl â MIPS Linux with MUSL   mips-unknown-linux-uclibc â MIPS Linux with uClibc    MIPS 64-bit    Target std Description     mips64-unknown-linux-gnuabi64 â MIPS64 Linux, n64 ABI (kernel 4.4, glibc 2.23)   mips64-unknown-linux-muslabi64 â MIPS64 Linux, n64 ABI, MUSL   mips64el-unknown-linux-gnuabi64 â MIPS64 (LE) Linux, n64 ABI (kernel 4.4, glibc 2.23)   mips64el-unknown-linux-muslabi64 â MIPS64 (LE) Linux, n64 ABI, MUSL    WASM    Target std Description     wasm32-unknown-emscripten â WebAssembly via Emscripten   wasm32-unknown-unknown â WebAssembly   wasm32-wasi â WebAssembly with WASI    SPARC 32-bit    Target std Description     sparc-unknown-linux-gnu â 32-bit SPARC Linux    SPARC 64-bit    Target std Description     sparc64-unknown-linux-gnu â SPARC Linux (kernel 4.4, glibc 2.23)   sparc64-unknown-netbsd â NetBSD/sparc64   sparc64-unknown-openbsd ?    sparcv9-sun-solaris â SPARC Solaris 10/11, illumos   mipsel-sony-psp * MIPS (LE) Sony PlayStation Portable (PSP)   mipsel-unknown-linux-gnu â MIPS (LE) Linux (kernel 4.4, glibc 2.23)   mipsel-unknown-linux-musl â MIPS (LE) Linux with MUSL   mipsel-unknown-linux-uclibc â MIPS (LE) Linux with uClibc   mipsel-unknown-none * Bare MIPS (LE) softfloat    PowerPC 32-bit    Target std Description     powerpc-unknown-linux-gnu â PowerPC Linux (kernel 2.6.32, glibc 2.11)   powerpc-unknown-linux-gnuspe â PowerPC SPE Linux   powerpc-unknown-linux-musl ?    powerpc-unknown-netbsd â    powerpc-wrs-vxworks ?    powerpc-wrs-vxworks-spe ?     PowerPC 64-bit    Target std Description     powerpc64-unknown-freebsd â PPC64 FreeBSD (ELFv1 and ELFv2)   powerpc64-unknown-linux-gnu â PPC64 Linux (kernel 2.6.32, glibc 2.11)   powerpc64-unknown-linux-musl ?    powerpc64-wrs-vxworks ?    powerpc64le-unknown-linux-gnu â PPC64LE Linux (kernel 3.10, glibc 2.17)   powerpc64le-unknown-linux-musl ?     Arduino    Target std Description     avr-unknown-gnu-atmega328 â AVR. Requires -Z build-std=core    RISC-V 32-bit    Target std Description     riscv32gc-unknown-linux-gnu  RISC-V Linux (kernel 5.4, glibc 2.33)   riscv32i-unknown-none-elf * Bare RISC-V (RV32I ISA)   riscv32imac-unknown-none-elf * Bare RISC-V (RV32IMAC ISA)   riscv32imc-unknown-none-elf * Bare RISC-V (RV32IMC ISA)    RISC-V 64-bit    Target std Description     riscv64gc-unknown-linux-gnu â RISC-V Linux (kernel 4.20, glibc 2.29)   riscv64gc-unknown-none-elf * Bare RISC-V (RV64IMAFDC ISA)   riscv64imac-unknown-none-elf * Bare RISC-V (RV64IMAC ISA)    Other Targets    Target std Description     arm-linux-androideabi â ARMv7 Android   arm-unknown-linux-gnueabi â ARMv6 Linux (kernel 3.2, glibc 2.17)   arm-unknown-linux-gnueabihf â ARMv6 Linux, hardfloat (kernel 3.2, glibc 2.17)   arm-unknown-linux-musleabi â ARMv6 Linux with MUSL   arm-unknown-linux-musleabihf â ARMv6 Linux with MUSL, hardfloat   armebv7r-none-eabi * Bare ARMv7-R, Big Endian   armebv7r-none-eabihf * Bare ARMv7-R, Big Endian, hardfloat   armv4t-unknown-linux-gnueabi ?    armv5te-unknown-linux-gnueabi â ARMv5TE Linux (kernel 4.4, glibc 2.23)   armv5te-unknown-linux-musleabi â ARMv5TE Linux with MUSL   armv5te-unknown-linux-uclibceabi ? ARMv5TE Linux with uClibc   armv6-unknown-freebsd â ARMv6 FreeBSD   armv6-unknown-netbsd-eabihf ?    armv7-apple-ios â ARMv7 iOS, Cortex-a8   armv7-linux-androideabi â ARMv7a Android   armv7-unknown-freebsd â ARMv7 FreeBSD   armv7-unknown-linux-gnueabi â ARMv7 Linux (kernel 4.15, glibc 2.27)   armv7-unknown-linux-gnueabihf â ARMv7 Linux, hardfloat (kernel 3.2, glibc 2.17)   armv7-unknown-linux-musleabi â ARMv7 Linux, MUSL   armv7-unknown-linux-musleabihf â ARMv7 Linux with MUSL   armv7-unknown-netbsd-eabihf â    armv7-wrs-vxworks-eabihf ?    armv7a-none-eabi * Bare ARMv7-A   armv7a-none-eabihf * ARM Cortex-A, hardfloat   armv7r-none-eabi * Bare ARMv7-R   armv7r-none-eabihf * Bare ARMv7-R, hardfloat   armv7s-apple-ios â    asmjs-unknown-emscripten â asm.js via Emscripten   hexagon-unknown-linux-musl ?    mipsisa32r6-unknown-linux-gnu ?    mipsisa32r6el-unknown-linux-gnu ?    mipsisa64r6-unknown-linux-gnuabi64 ?    mipsisa64r6el-unknown-linux-gnuabi64 ?    msp430-none-elf * 16-bit MSP430 microcontrollers   nvptx64-nvidia-cuda â \u0026ndash;emit=asm generates PTX code that runs on NVIDIA GPUs   s390x-unknown-linux-gnu â S390x Linux (kernel 2.6.32, glibc 2.11)   thumbv4t-none-eabi * ARMv4T T32   thumbv6m-none-eabi * Bare Cortex-M0, M0+, M1   thumbv7a-pc-windows-msvc ?    thumbv7a-uwp-windows-msvc â    thumbv7em-none-eabi * Bare Cortex-M4, M7   thumbv7em-none-eabihf * Bare Cortex-M4F, M7F, FPU, hardfloat   thumbv7m-none-eabi * Bare Cortex-M3   thumbv7neon-linux-androideabi â Thumb2-mode ARMv7a Android with NEON   thumbv7neon-unknown-linux-gnueabihf â Thumb2-mode ARMv7a Linux with NEON (kernel 4.4, glibc 2.23)   thumbv7neon-unknown-linux-musleabihf ? Thumb2-mode ARMv7a Linux with NEON, MUSL   thumbv8m.base-none-eabi * ARMv8-M Baseline   thumbv8m.main-none-eabi * ARMv8-M Mainline   thumbv8m.main-none-eabihf * ARMv8-M Mainline, hardfloat    ","description":"","id":14,"section":"posts","tags":null,"title":"Cross Compilers","uri":"https://savolla.github.io/posts/cross-compilers/"},{"content":"how to   name a css file?\nstyle.css or main.css\n  how to link style.css with index.html ?\nin html file,\n1  \u0026lt;link href=\u0026#34;./style.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;/\u0026gt;     write internal css?\nput your css code inside style tags\n1 2 3 4 5 6 7  \u0026lt;head\u0026gt; \u0026lt;style\u0026gt; h3 { color : red; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt;     how comments look in css?\n1  /* this is a comment */     change h1,h2 and h3 at the same selector?\n1 2 3  h1,h2,h3 { color : olive; }     change background color of the entire page?\n1 2 3  body { background-color : black; }     style by classes or id?\n1 2  \u0026lt;h3 class=\u0026#34;cls0\u0026#34;\u0026gt; TITLE0 \u0026lt;/h3\u0026gt; \u0026lt;h3 id=\u0026#34;cls1\u0026#34;\u0026gt; TITLE1 \u0026lt;/h3\u0026gt;   1 2 3 4 5 6 7  .cls0 { color : red; } #cls1 { color : blue; }     set space between two lines?\n1  line-height : 1.5em;     set font ?\n1  font-family : monospace;     set a background image?\n1  background-image: url(\u0026#34;../img/bg.png\u0026#34;);     set opacity of text?\nuse rgba() with a value between 1 and 0 at the end\n1 2 3  .class0 { color : rgba(100,53,81,0.5); }     make links without underline ?\n1 2 3  a { text-decoration : none; }     cancel all the default margins?\n1 2 3  *{ margin : 0; }     change font of an element?\n1 2 3  .element { font-family : Fira Code; }     use google fonts\n go to google fonts page select your font click select this style copy  part and paste is between  element copy CSS rules and paste it to CSS file where you want to use that font click on @import section and copy the code inside \u0026lt;style\u0026gt; element paste it into the top of your CSS file    make a font bolder?\nuse font-weight\n1 2 3  .element { font-weight: bold; }     make font italic?\nuse font-style\n1 2 3  .element { font-style : italic; }     reach a nested element inside a class?\nuse \u0026gt; syntax\n1 2 3 4 5 6  \u0026lt;div class=\u0026#34;cls0\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;item\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;item\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt;   1 2 3  cls0 \u0026gt; ul \u0026gt; li { /* your code */ }     increase space between letters in a paragraph?\n1 2 3  .element { letter-spacing: 5px; }     increase space between words ?\n1 2 3  .element { word-spacing: 5px; }     capitalize an entire paragraph ?\n1 2 3  .element { text-transform: capitalize; }     add hover action to an element?\n1 2 3  .element:hover { /* code */ }     add opacity to an element?\n1 2 3  .element { opacity: 0.5; }     add a border around an element?\n1 2 3  .element { border-style: solid; }     add border width of an element?\n1 2 3  .element { border-width: 10px; }     overlap two elements?\nwith negative margin\n  make list items on one line?\n1 2 3 4 5  \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;item1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;item2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;item3\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;   1 2 3  ul \u0026gt; li { display: inline; }     display text in the center of the element?\nuse text-align: center\n  create a navigation bar of a website?\n1 2 3 4 5 6  \u0026lt;div class=\u0026#34;navbar\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Coffee\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Music\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt;   1 2 3 4 5 6 7 8 9 10  .navbar a { font-family: Fira Code; margin-right: 20px; font-size: 1rem; text-decoration: none; } .navbar { background: black; }     add a custom font to the css?\nadd the following on the top of css file\n1 2 3 4  @font-face { font-family: \u0026#34;font-name\u0026#34;; src: url(\u0026#34;../fonts/my-font.ttf\u0026#34;); }     set opacity of an element?\nuse opacity attribute\n1 2 3  .element { opacity: 0.5; }     use image as a background instead of straight color?\n1 2 3  .element { background: url(\u0026#34;/path/to/image.extension\u0026#34;); }     make an image non-repeatable?\n1 2 3 4  .element { background: url(\u0026#34;/path/to/image.extension\u0026#34;); background-repeat: no-repeat; }     spread the image into one area (div) ?\n1 2 3 4  .element { background: url(\u0026#34;/path/to/image.extension\u0026#34;); background-size: cover; }     center the background image?\n1 2 3  .element { background-position: center; }     adjust the position by x and y values of a background image?\nuse persentages to adjust\n1 2 3 4  .element { background: url(\u0026#34;/path/to/image.extension\u0026#34;); background-position: 20% 50%; }     add an image with protected aspect ratio?\n1 2 3 4  .element { background: url(\u0026#34;/path/to/image.jpg\u0026#34;); background-size: contain; }     align text to the center?\n1 2 3  .element { text-align: center; }     make a parallax effect?\nuse background-attachment\n1 2 3 4  .banner { background: url(\u0026#34;../img/bg.jpg\u0026#34;); background-attachment: fixed; }     make a gradient element? use grey and white\n1 2 3  .element { background-attachment: linear-gradient(grey, white); }     give angle to the gradient?\n1 2 3  .element { background: linear-gradient(45deg, white, black); }     make a nice transition effect ? when user scrolls down the transparent\nscreen comes on the background image. the background image does not change btw\n1 2 3 4 5  \u0026lt;div class=\u0026#34;first\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;second\u0026#34;\u0026gt; \u0026lt;/div\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  .first { background: url(\u0026#34;../img/bg2.jpg\u0026#34;); background-attachment: fixed; background-size: cover; background-position: center; background-repeat: no-repeat; height: 100vh; } .second { background: url(\u0026#34;../img/bg2.jpg\u0026#34;); background-attachment: fixed; background-size: cover; background-position: center; background-repeat: no-repeat; opacity: 0.5; height: 100vh; }      what is   what css stands for?\ncascading style sheets\n  what is the syntax for css?\n1 2 3 4  selector{ property0 : value0; property1 : value1; }     what is the difference between span and div\n div is usefull for grouping elements together span is usefull for assigning some class or id names inline when elements grouped with div it will cause a new line hovewer span won\u0026rsquo;t cause a new line    what is the best way to represent a color ?\nusing rgb\n1 2 3  h1 { color : rgb(100,100,100); }     what is the most primitive way to represent size?\npixels.\n1 2 3  .cls0 { font-size : 12px; }     what is the drawbacks of representing something in pixels?\nsince pixels are constant and depends on nothing, it makes the element non-responsive. so the size will not change when screen size change\n  what is font stack ?\nit is a concept where we present different font families to the web browser. if web browser fails to render the first font family then it tryes out the second one. if web browser fails at every font then the last one (monospace) font will be assumed\nexample usage;\n1 2 3  .element { font-family : \u0026#39;Courier New\u0026#39; Courier, monospace; }     what is css box mode ?\n1 2 3 4 5 6 7 8 9 10 11 12  +-------------------------------------+ | Margin | | +-------------------------------+ | | | Border | | | | +-------------------------+ | | | | | Padding | | | | | | +-------------------+ | | | | | | | Content | | | | | | | +-------------------+ | | | | | +-------------------------+ | | | +-------------------------------+ | +-------------------------------------+     what is the shortcut way of writin borders?\nparameter order matters!\n1 2 3 4  .element { /* width style and color */ border: 5px solid blue; }     what is the difference between border and outline ?\n  borders are like glued to the content. we can\u0026rsquo;t put space between content and border\n  outlines in other hand they are more flexible than borders. also we can use only outlines instead of borders. we can give offset to outlines which borders can\u0026rsquo;t quite handle.\n1 2 3 4 5  .element { outline: 0.2rem solid black; outline-offset: 10px /* set outline 10px above the content */ outline-offset: -10px /* set outline 10px inside the content */ }       what are gradients ?\nit\u0026rsquo;s a color effect. two or more colors are mixed into one element. and result will look\nlike an oval object. used in button coloring\n  flash cards   where css can be added?\n inline inside  element seperate file    when you have multiple css files in which directory should we put them?\ncss/\n  what happens if we add internal css in a page that has external css ?\ninternal css will override external one\n  what happens if we add inline css in a page that has external css or internal css ?\ninline css will override external and internal ones\n  what does color attrubute do?\nit changes the text color\n  can we add multiple classes inside an element?\nwe can also add classes with ids\n1  \u0026lt;h3 class=\u0026#34;title\u0026#34; class=\u0026#34;lowercase\u0026#34; id=\u0026#34;testid\u0026#34;\u0026gt; hello \u0026lt;/h3\u0026gt;     unique elements should have \u0026hellip;\nid\n  why div blocks are used?\nto group elements. this helps us to specify elements in css\n  which grouping style causes new line ?\ndiv\n  where to get cool color schemes?\n coolors adobe color    what happens when we use width and height in persentage?\nthe persentage will work depending on the parent div\u0026rsquo;s sizes. for example if parent div has 20px height and we give 50% height to the child then child will have 10px height\n1 2 3 4 5 6 7 8  .parent { height : 20px; width : 20px; } .child { height : 50%; /* 20%50 = 10 */ width : 50%; /* 20%50 = 10 */ }     persentages will depend on \u0026hellip;\nparent values!\n  what vw and vh do?\nvw and vh are measure units in css. they are relative values depend on screen size. when browser window size change, then those values are also change\nexample;\n1 2 3 4  \u0026lt;div class=\u0026#34;cls0\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;cls1\u0026#34;\u0026gt; \u0026lt;/div\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12  .cls0 { background-color : orange; width : 50vw; height : 50vh; } .cls1 { background-color : yellow; width : 50vw; height : 50vh; margin-left: 50vw; }     what calc() function does in css?\nit takes two values with px, vh, vw, rem, em etc and applies arithmatic operations on them.\n  use case scenario of calc() function\nassume we have a navbar on top of the page and it has 100px height. now let\u0026rsquo;s say we need a banner below navbar. this banner will have height of entire page (without scroll bar). how do we adjust that height automatically?\nin this case we can use calc() function like this:\n1 2 3 4 5  \u0026lt;div class=\u0026#34;navbar\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;banner\u0026#34;\u0026gt; \u0026lt;/div\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13  *{ margin : 0; /* zero out default margins */ } .navbar { background : blue; height : 100px; } .banner { background : green; height : calc(100vh - 100px); /* 100vh - navbar.height */ }     what measure type should we use on line-height property ?\nem\n1 2 3  .element { line-height: 1em; }     what areas a,b,c and d effect in padding: a b c d ?\n1 2 3  .element { padding: top, right, left, bottom; }     what border-radius value turn element into circle?\n50%\n  what block elements do when rendered?\n always start a new line takes over full width    what inline elements do when rendered?\n does not start a new line does not occupy the full width    for block centering what topics are used in css?\nflex and grids\n  browser will ignore margin\u0026rsquo;s margin-top and margin-bottom properties if the element is \u0026hellip;\ninline\n  browser will ignore margin\u0026rsquo;s margin-left and margin-right properties if the element is \u0026hellip;\nblock\n  what property should we use to make the browser respect to inline element top and bottom margins?\nuse inline-block\n1 2 3 4  \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Coffee\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Music\u0026lt;/a\u0026gt;   1 2 3  a { inline-block: }     create a nice banner with an image in bakcground\n1 2 3  \u0026lt;div class=\u0026#34;.banner\u0026#34;\u0026gt; \u0026lt;p\u0026gt;some text here\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;   1 2 3 4 5  .banner { background: url(\u0026#34;../img/bg1.jpg\u0026#34;); /* load the image */ background-size: cover; /* spread image across the div area */ background-repeat: no-repeat; /* prevent repetition */ }     what to do if background image is too bright and text on it is not visible?\nadd some opacity\n1 2 3 4  .element { background: url(\u0026#34;/path/to/image.jpg\u0026#34;); opacity: 0.5; }     ","description":"","id":15,"section":"posts","tags":null,"title":"CSS Cheat Sheet","uri":"https://savolla.github.io/posts/css-cheat-sheet/"},{"content":"how to   create a heading?\n1  \u0026lt;h1\u0026gt;Heading\u0026lt;/h1\u0026gt;     create a paragraph element?\n1  \u0026lt;p\u0026gt;paragraph\u0026lt;/p\u0026gt;     create an image element?\nnotice there are no closing forward slashes in img elements\n1  \u0026lt;img src=\u0026#34;path/to/image\u0026#34;\u0026gt;     break a line?\n1  \u0026lt;br/\u0026gt;     tell html to use latest html version?\nby putting the docstring\n1  \u0026lt;!DOCTYPE html\u0026gt;     generate all initial html structure with emmet?\n! + TAB\n  generate a div with a class with emmet?\ndiv.class_name + TAB\n  generate a div with an id with emmet?\ndiv#id_name + TAB\n  create 5 div elements with unique class names?\n.container$*5\n  get dummy text for experimenting?\nNUMBER is a number of words you want\nlorem__NUMBER__ + TAB\n  get 5 dummy texts that has 4 words per line ?\nlorem__WORDS__*__LINES__\n  display an image ?\n1  \u0026lt;img src=\u0026#34;./path/to/image.png\u0026#34; alt=\u0026#34;alternative text\u0026#34;/\u0026gt;     display images from internet (external images)?\n1  \u0026lt;img src=\u0026#34;http://www.addrsofpic.com/pic.png\u0026#34; alt=\u0026#34;blah\u0026#34; /\u0026gt;     adjust the size of very big images?\njust use width. height will be adjusted automatically as soon as we don\u0026rsquo;t specify it explicitly.\n1  \u0026lt;img src=\u0026#34;./path/to/img.png\u0026#34; width=\u0026#34;256\u0026#34; alt=\u0026#34;pexels\u0026#34; /\u0026gt;     add links?\n1  \u0026lt;a href=\u0026#34;www.google.com\u0026#34;\u0026gt;GOOGLE\u0026lt;/a\u0026gt;     add link that opens a new tab when opened?\nuse target=\u0026quot;_blank\u0026quot;\n1  \u0026lt;a href=\u0026#34;www.google.com\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;GOOGLE\u0026lt;/a\u0026gt;     add internal link? (in site link)\nspecify html file path in link element\n1  \u0026lt;a href=\u0026#34;./path/to/html\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;     scroll and focus on an element with a link?\n1 2 3  \u0026lt;a id=\u0026#34;top\u0026#34; href=\u0026#34;#bottom\u0026#34;\u0026gt;go bottom\u0026lt;/a\u0026gt; \u0026lt;!-- Some looooooong text (5000 lines) --\u0026gt; \u0026lt;a id=\u0026#34;bottom href=\u0026#34;#top\u0026#34;\u0026gt;go to top\u0026lt;/a\u0026gt;     convert an image into a link?\nuse a\u0026gt;img + TAB\n1 2 3  \u0026lt;a href=\u0026#34;www.google.com\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;google_icon.png\u0026#34; alt=\u0026#34;icon\u0026#34;/\u0026gt; \u0026lt;/a\u0026gt;     use special characters in html? like copyright?\n1  \u0026lt;p\u0026gt;copyright \u0026amp;copy;\u0026lt;/p\u0026gt;     make left, down, right, up arrows?\n1 2 3 4  \u0026lt;p\u0026gt;left \u0026amp;larr;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;right \u0026amp;rarr;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;up \u0026amp;uarr;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;down \u0026amp;darr;\u0026lt;/p\u0026gt;     make unordered list ?\n1 2 3 4 5 6 7  \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;peter\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;john\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;sarah\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;michael\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;melinda\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;     make ordered list ?\n1 2 3 4 5 6  \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;michael\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;melinda\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;opeth\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;axe\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt;     create table in html?\nalways start with  element and then  for rows\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  \u0026lt;table\u0026gt; \u0026lt;!-- row of table headers --\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;header1\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;header2\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;header3\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;!-- row of table data --\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;data1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;data2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;data3\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;!-- second row of table data --\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;data1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;data2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;data3\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt;     take an input from user?\n  create a form element form + TAB\n  input + TAB\n1 2 3  \u0026lt;form method=\u0026#34;\u0026#34; action=\u0026#34;\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;\u0026#34; value=\u0026#34;\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt;       label the input bar\n1 2 3 4 5  \u0026lt;form method=\u0026#34;\u0026#34; action=\u0026#34;\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;nick\u0026#34;\u0026gt;username\u0026lt;/label\u0026gt; \u0026lt;!-- label the input bar --\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34; id=\u0026#34;nick\u0026#34; /\u0026gt; \u0026lt;!-- input bar --\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;!-- submit button --\u0026gt; \u0026lt;/form\u0026gt;     make passwords invisible when typing?\nnotice input type=\u0026ldquo;password\u0026rdquo; here. thi is the important one\n1  \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; value=\u0026#34;\u0026#34; /\u0026gt;     show example input inside input box?\n1  \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;email\u0026#34; placeholder=\u0026#34;john@protonmail.com\u0026#34; /\u0026gt;     use radio buttons in html?\n1 2 3 4 5 6 7 8 9  \u0026lt;p\u0026gt;Your favorite language\u0026lt;/p\u0026gt; \u0026lt;input name=\u0026#34;coding\u0026#34; type=\u0026#34;radio\u0026#34; value=\u0026#34;\u0026#34;/\u0026gt;Javascript \u0026lt;br /\u0026gt; \u0026lt;input name=\u0026#34;coding\u0026#34; type=\u0026#34;radio\u0026#34; value=\u0026#34;\u0026#34;/\u0026gt;C++ \u0026lt;br /\u0026gt; \u0026lt;input name=\u0026#34;coding\u0026#34; type=\u0026#34;radio\u0026#34; value=\u0026#34;\u0026#34;/\u0026gt;C \u0026lt;br /\u0026gt; \u0026lt;input name=\u0026#34;coding\u0026#34; type=\u0026#34;radio\u0026#34; value=\u0026#34;\u0026#34;/\u0026gt;Python \u0026lt;br /\u0026gt;     make a big text area ?\nrows how many rows should be in our text area\ncols how many columns should be in our text area\n1  \u0026lt;textarea rows=\u0026#34;\u0026#34; cols=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt;     make check boxes in html?\n1 2 3 4 5 6  \u0026lt;p\u0026gt;What are your favorite languages?\u0026lt;/p\u0026gt; \u0026lt;input name=\u0026#34;\u0026#34; type=\u0026#34;checkbox\u0026#34; value=\u0026#34;\u0026#34;/\u0026gt; C++ \u0026lt;br /\u0026gt; \u0026lt;input name=\u0026#34;\u0026#34; type=\u0026#34;checkbox\u0026#34; value=\u0026#34;\u0026#34;/\u0026gt; C \u0026lt;br /\u0026gt; \u0026lt;input name=\u0026#34;\u0026#34; type=\u0026#34;checkbox\u0026#34; value=\u0026#34;\u0026#34;/\u0026gt; Python \u0026lt;br /\u0026gt; \u0026lt;input name=\u0026#34;\u0026#34; type=\u0026#34;checkbox\u0026#34; value=\u0026#34;\u0026#34;/\u0026gt; Javascript \u0026lt;br /\u0026gt; \u0026lt;input name=\u0026#34;\u0026#34; type=\u0026#34;checkbox\u0026#34; value=\u0026#34;\u0026#34;/\u0026gt; Rust \u0026lt;br /\u0026gt;     make a checkbox that already checked by default?\nput checked=\u0026ldquo;checked\u0026rdquo; inside input element\n1  \u0026lt;input type=\u0026#34;checkbox\u0026#34; checked=\u0026#34;checked\u0026#34;/\u0026gt; testbox     make a dropdown menu in html?\nlabel is not really necessary here but hey!\n1 2 3 4 5 6 7 8  \u0026lt;label for=\u0026#34;menu0\u0026#34;\u0026gt;favorite PL\u0026lt;/label\u0026gt; \u0026lt;select id=\u0026#34;manu0\u0026#34; name=\u0026#34;\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;#\u0026#34;\u0026gt;select language\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;js\u0026#34;\u0026gt;javascript\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;c\u0026#34;\u0026gt;C\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;cpp\u0026#34;\u0026gt;C++\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;rs\u0026#34;\u0026gt;Rust\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt;     what is   what is the first html line should be in a web page?\n1  \u0026lt;!DOCTYPE html\u0026gt;     what is the root element of html page?\n1  \u0026lt;html\u0026gt;     what head should contain?\nit contains the information about the page\n page title links to external resources like css and js files metadata    what  means?\ntable row\n  what  means?\ntable data\n  what  means?\ntable header\n  what is the importance of value attribute in radio buttons ?\nvalue in radio buttons is the data that will be passed into database or somewhere. when we select a radio button A and A contains value=\u0026ldquo;C++\u0026quot; then \u0026ldquo;C++\u0026rdquo; string will be sent from this radio button when submitted\n  what is the difference between radio buttons and check box ?\n radio buttons: choose only one check boxes: choose multiple    what is the checkbox shortcut with emmet\ninput:c + TAB\n  what is the submit button shortcut with emmet\ninput:s + TAB\n  flash cards   is content in head element visible in page?\nNo.\n  where page0 will be displayed?\nin the browser tab!\n  generate 5 list items with line numbers using emmet\nul\u0026gt;li.cls\\({\\).}*5\n  what will .container + TAB output?\ndiv is the most used element. so we don\u0026rsquo;t need to write div.container\n1 2 3  \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;/div\u0026gt;     how many headings there are in html?\nthere are 6 hadings\n1 2 3 4 5 6  \u0026lt;h1\u0026gt;BIGGEST\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Bigger\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;normal\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;smaller\u0026lt;/h4\u0026gt; \u0026lt;h5\u0026gt;smallest\u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt;tiny\u0026lt;/h6\u0026gt;     what path convention should be used in html?\ndot and a slash \u0026ldquo;./\u0026rdquo; is used in most frameworks and languages like react php etc.\n  how initial html page structure look?\n1 2 3 4 5 6 7 8 9  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; some code.. \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; some code.. \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;     where to get copyright free pictures?\n pexels also has videos pixabay gratisography    how comments look in html?\n1  \u0026lt;!-- this is a comment --\u0026gt;     what do sup and sub elements do?\nsup: pushes text up. it\u0026rsquo;s like x^2 (where 2 in above x)\nsub: pushed text down. it\u0026rsquo;s like index x_i (where i below x)\n1  \u0026lt;p\u0026gt;x\u0026lt;sub\u0026gt;i\u0026lt;/sub\u0026gt; = 2\u0026lt;sup\u0026gt;x\u0026lt;/sup\u0026gt;\u0026lt;/p\u0026gt;     create 5 unordered list element which are links using emmet\nul\u0026gt;(li\u0026gt;a)*5 + TAB\n  what happens when user enters nonsense in email input box?\npage will say something like \u0026ldquo;you forgot to put \\@\u0026rdquo; symbol bla bla bla\n  what value attribute does in input elements?\nit is the hardcoded value. here is the example;\n1 2 3 4 5  \u0026lt;!-- \u0026#34;GO!\u0026#34; will be written on submit button --\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;GO!\u0026#34; /\u0026gt; \u0026lt;!-- \u0026#34;deleteme first\u0026#34; will be written in input box --\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;deleteme first!\u0026#34; /\u0026gt;     why name attributes need to be same in radio buttons\nif we don\u0026rsquo;t make them same then we can select more than one radio buttons. And this doesn\u0026rsquo;t make sense\n  what value attribute in elements actually do ?\nit returns that value when submitted. value is important in buttons, dropdown manus, checkboxes, radio buttons etc.\n  ","description":"","id":16,"section":"posts","tags":null,"title":"HTML Cheat Sheet","uri":"https://savolla.github.io/posts/html-cheat-sheet/"},{"content":"concepts JSON  javascript object notation data representation format used in config files supported types;  strings: \u0026ldquo;hello world\u0026rdquo;, \u0026ldquo;savolla\u0026rdquo; numbers: 10, 1.5, -30 boolean: true, false null: null arrays: [1,2,3], [\u0026ldquo;Hello\u0026rdquo;, \u0026ldquo;world\u0026rdquo;] objects: {\u0026ldquo;key\u0026rdquo;:\u0026ldquo;value\u0026rdquo;}, {\u0026ldquo;age\u0026rdquo;:30}   everything in json is valid javascript code  tips facts  best learningn resource : You Don\u0026rsquo;t Know JS  how to create a json file this is actually an array in javascript. this is why it starts with \u0026lsquo;[]\u0026rsquo;\n1 2 3 4 5 6 7 8 9 10 11 12 13  [ { \u0026#34;name\u0026#34;:\u0026#34;software engineering\u0026#34;, \u0026#34;delay\u0026#34;: 2, \u0026#34;book\u0026#34;: [ {\u0026#34;name\u0026#34; : \u0026#34;codecomplete2\u0026#34;}, {\u0026#34;name\u0026#34; : \u0026#34;codecomplete2\u0026#34;}, {\u0026#34;name\u0026#34; : \u0026#34;codecomplete2\u0026#34;}, {\u0026#34;name\u0026#34; : \u0026#34;codecomplete2\u0026#34;}, {\u0026#34;name\u0026#34; : \u0026#34;codecomplete2\u0026#34;} ] ]   display json contents in html  paste the json string inside script tag and make it a string by surroud it with ` use JSON.parse method to make JSON parsable with indexes   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;/\u0026gt; \u0026lt;title\u0026gt;MultiTasker\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; let topics = `[ { \u0026#34;name\u0026#34;:\u0026#34;software engineering\u0026#34;, \u0026#34;delay\u0026#34;: 2, \u0026#34;book\u0026#34;: [ {\u0026#34;name\u0026#34; : \u0026#34;codecomplete2\u0026#34;}, {\u0026#34;name\u0026#34; : \u0026#34;Applying UML\u0026#34;}, {\u0026#34;name\u0026#34; : \u0026#34;clean code\u0026#34;}, {\u0026#34;name\u0026#34; : \u0026#34;clean coder\u0026#34;}, {\u0026#34;name\u0026#34; : \u0026#34;solid principles\u0026#34;} ] } ]` console.log( JSON.parse(topics)[0].book) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   from codecamp   print something on screen?\n1  console.log(\u0026#34;hello\u0026#34;);     declare a local variable?\n1  let loc = 5;     declare a global variable?\n1  glob = 5;     declare a constant variable?\n1  const c = 5;     declare a function scope variable?\n1  var c = 5;     concat two strings?\n1 2 3  let v0 = \u0026#34;Hello\u0026#34;; let v1 = \u0026#34;World\u0026#34;; let v2 = v0 + \u0026#34; \u0026#34; + v1;     you increment and decrement numbers\n1 2 3 4  let a = 3; a++; // increment  a--; // decrement  console.log(a);     declare floating point numbers?\n1  let f0 = 2.38;     get the length of a string?\n1 2  let name = \u0026#34;savolla\u0026#34;; console.log(name.length);     reach first letter of a string?\n1 2  let x = \u0026#34;hello\u0026#34;; console.log(x[0]);     get the last character of a string?\n1 2  let name = \u0026#34;savolla\u0026#34;; console.log(name[name.length - 1]);     create an array ?\n1  let numbers = [1,2,3,4,5];     create a multi-dimentional array?\n1 2 3 4  let A = [[\u0026#34;abatox\u0026#34;, 20], [\u0026#34;savolla\u0026#34;, 28], [\u0026#34;lena\u0026#34;, 48]]; console.log(A[1][0]);     append data into an array?\n1 2 3  let A = [1,2,3,4]; A.push(5); console.log(A[A.length -1 ]);     remove an item from an array?\n1 2 3  let A = [1,2,3,4]; A.pop(); console.log(A[A.length -1 ]);     remove first element from an array?\n1 2 3  let A = [1,2,3]; A.shift(); console.log(A);     add an element to the beginning of the array?\n1 2  let A = [1,2,3,4]; A.unshift(0);     define a functions?\n1 2 3 4 5 6  function sayHi( name ) { console.log(\u0026#34;Hello \u0026#34; + name); } sayHi(\u0026#34;lenacka\u0026#34;); sayHi(\u0026#34;savolla\u0026#34;); sayHi(\u0026#34;abatox\u0026#34;);     dequeue one element from an array?\n1 2 3 4 5  function dequeue( array ) { return array.shift(); } let A = [1,2,3,4,5]; console.log(dequeue(A));     write an if structure?\n1 2 3 4 5 6 7 8 9  if ( condition ) { // code  } else if ( condition ) { // code  } else { // code  }     use and and or operators in if statements?\n1 2  if ( code \u0026amp;\u0026amp; code || code ) code     create an object in js?\n1 2 3 4 5 6  var dog = { \u0026#34;name\u0026#34; : \u0026#34;Ares\u0026#34;, \u0026#34;color\u0026#34; : \u0026#34;brown\u0026#34;, \u0026#34;age\u0026#34; : 12, \u0026#34;personality\u0026#34; : \u0026#34;calm\u0026#34; };     access a property of an object ?\nuse dot notation\n1 2 3 4 5 6 7 8 9  var dog = { \u0026#34;name\u0026#34; : \u0026#34;Ares\u0026#34;, \u0026#34;color\u0026#34; : \u0026#34;brown\u0026#34;, \u0026#34;age\u0026#34; : 12, \u0026#34;personality\u0026#34; : \u0026#34;calm\u0026#34; }; n = dog.name; m = dog.age;     update an object property?\n1 2 3 4 5 6 7 8 9 10 11 12  dog = { \u0026#34;name\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;color\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;age\u0026#34; : null, \u0026#34;personality\u0026#34; : \u0026#34;\u0026#34; }; my_dog = dog; my_dog.name = \u0026#34;Ares\u0026#34;; my_dog.color = \u0026#34;brown\u0026#34;; my_dog.age = 12; my_dog.personality = \u0026#34;calm\u0026#34;;     delete a property from an object?\n1 2 3 4 5 6 7 8  var dog = { \u0026#34;name\u0026#34; : \u0026#34;Ares\u0026#34;, \u0026#34;color\u0026#34; : \u0026#34;brown\u0026#34;, \u0026#34;age\u0026#34; : 12, \u0026#34;personality\u0026#34; : \u0026#34;calm\u0026#34; }; delete dog.personality;     test if an object has a specific property?\nuse hasOwnProperty method of an object\n1 2 3 4 5 6 7 8 9 10  dog = { \u0026#34;name\u0026#34; : \u0026#34;Ares\u0026#34;, \u0026#34;color\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;age\u0026#34; : null }; if ( dog.hasOwnProperty(\u0026#34;color\u0026#34;) ) console.log(\u0026#34;yes\u0026#34;); else console.log(\u0026#34;no\u0026#34;);     access nested object properties?\n1 2 3 4 5 6 7 8 9  obj = { \u0026#34;p0\u0026#34; : \u0026#34;ABC\u0026#34;, \u0026#34;internal\u0026#34; : { \u0026#34;p0\u0026#34; : \u0026#34;abc\u0026#34;, \u0026#34;p1\u0026#34; : \u0026#34;def\u0026#34;, } } console.log(obj.internal.p0);     make a while loop?\n1 2 3 4 5  let i = 5; while ( i \u0026gt; 0 ) { console.log(i); i--; }     make a for loop?\njust like in C or C++\n1 2 3  for ( let i = 0; i \u0026lt; 5; ++i ) { console.log(i); }     lookup a value in an object list?\nwhen looking inside a list of objects use \u0026ldquo;[]\u0026rdquo; instead of \u0026ldquo;.\u0026rdquo;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  var contacts = [ { \u0026#34;first_name\u0026#34; : \u0026#34;Akira\u0026#34;, \u0026#34;last_name\u0026#34; : \u0026#34;Laine\u0026#34;, \u0026#34;number\u0026#34; : \u0026#34;05330000000\u0026#34;, }, { \u0026#34;first_name\u0026#34; : \u0026#34;Harry\u0026#34;, \u0026#34;last_name\u0026#34; : \u0026#34;Potter\u0026#34;, \u0026#34;number\u0026#34; : \u0026#34;05330000001\u0026#34;, }, { \u0026#34;first_name\u0026#34; : \u0026#34;Sherlock\u0026#34;, \u0026#34;last_name\u0026#34; : \u0026#34;Holmes\u0026#34;, \u0026#34;number\u0026#34; : \u0026#34;05330000002\u0026#34;, }, ] function lookup( name, property ) { for ( let i = 0; i \u0026lt; contacts.length; i++ ) { if ( contacts[i].first_name === name ) { return contacts[i][property] || \u0026#34;No such property \u0026#34; + property; } } return \u0026#34;No such contact\u0026#34;; } let prop = lookup(\u0026#34;Akira\u0026#34;, \u0026#34;number\u0026#34;); console.log(prop);     generate random number between 0 and 1?\n1  Math.random();     generate a whole random number between 0 \u0026amp; 100 ?\n1 2  let r = Math.floor( Math.random() * 100 ); console.log(r);     generate a whole random number between any range?\n1 2 3 4 5 6 7  function gen_rand( min, max ) { let r = Math.floor( Math.random() * (max - min) + min ); return r; } let x = gen_rand(50, 100); console.log(x);     convert a string to integer ? (stoi)\n1 2 3 4 5 6  let s = \u0026#34;54\u0026#34;; let q = \u0026#34;54\u0026#34;; console.log(s + q); /* outputs: 5454 */ s = parseInt(s); q = parseInt(q); console.log(s + q); /* outputs: 108 */     convert a string to integer with a special base?\n1 2  let m = \u0026#34;10010111001\u0026#34;; let n = parseInt(m, 2); /* outputs: 1209 */     prevent objects from mutation ?\nuse Object.freeze(MY_OBJ)\n1 2 3 4 5 6 7  const MATH_CONSTANTS = { PI : 3.141592, E : 2.718281, PHI : 1.61803399 } // const itself will not prevent mutation. need an extra step  Object.freeze(MATH_CONSTANTS);     make anonimous functions in js?\nthey also called arrow functions in js\n1 2  const magic = () =\u0026gt; new Date(); console.log(magic());     make anonimous functions with parameters?\nused s0 as a parameter below\n1 2  const stoi = (s0) =\u0026gt; parseInt(s0); console.log(stoi(\u0026#34;54\u0026#34;));     concat two arrays into one?\nuse concat\n1 2 3 4  let A = [1,2,3,4]; let B = [5,6,7,8]; A = A.concat(B); console.log(A);     check a number if it\u0026rsquo;s an integer ?\n1  Number.isInteger(123);     filter an array ?\nuse filter function\n1 2 3  let A = [1,2,3,4,5,6,7]; A = A.filter(x =\u0026gt; (x \u0026gt; 4)); console.log(A);     convert a string into an array of words?\n1 2 3  let s = \u0026#34;that was a dark and stormy night\u0026#34;; let words = s.split(\u0026#34; \u0026#34;); console.log(words);     run a function through array elements?\nuse map() function. it works like transform in C++\n1 2 3  let A = [1,2,3,4,5]; A = A.map(x =\u0026gt; x*2); console.log(A);     fill an array with random values?\n create an array with 10 elements fill the array with zeros map the array with random values   1 2 3  let A = new Array(10); A.fill(0); A = A.map(x =\u0026gt; Math.floor(Math.random() * 10));     create fixed size array like int A[100]; in C?\n1  let A = new Array(100);     use variables inside string template literals ?\nuse ${VAR_NAME}\n1 2 3 4 5  var Person = { \u0026#34;name\u0026#34; : \u0026#34;savolla\u0026#34;, \u0026#34;age\u0026#34; : 28 } let s = `Hello, my name is ${Person.name}`;     write a function that returns an object?\nthis is the best way to return an object\nhere is the long one\n1 2 3 4 5 6 7 8 9  function makeDog( name, age, color ) { return { name : name, age : age, color : color }; } ares = makeDog(\u0026#34;ares\u0026#34;, 12, \u0026#34;brown\u0026#34;); puki = makeDog(\u0026#34;puki\u0026#34;, 8, \u0026#34;white\u0026#34;);   here is the short one\n1 2 3  const makeDog = ( name, age, color ) =\u0026gt; ( {name, age, color} ); ares = makeDog(\u0026#34;ares\u0026#34;, 12, \u0026#34;brown\u0026#34;); puki = makeDog(\u0026#34;puki\u0026#34;, 8, \u0026#34;white\u0026#34;);     make objects have methods?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  const circle = { x : 0, y : 0, grow : function() { this.x++; this.y++; }, shrink : function() { this.x--; this.y--; }, eliptic : function( px, py ) { this.x = px; this.y = py; } }     create a constructor of a class?\njust like in C++\n1 2 3 4 5 6 7 8  class veggie { constructor(name) { this.name = name; } } cabbage = new veggie(\u0026#34;cabb\u0026#34;); console.log(cabbage.name);     import a specific function from another js file?\nit\u0026rsquo;s like from matplotlib import pyplot in python\n1  import { function_name } from \u0026#34;path/to/file\u0026#34;   notice that we didn\u0026rsquo;t use file extension in path/to/file\n  flashcards   4 ways to declare a variable?\n1 2 3 4  var a = \u0026#34;savolla\u0026#34;; // function scope variable  let a = \u0026#34;savolla\u0026#34;; // local variable  const pi = 3.141592 // constant variable  x = 87; // global variable     what are function scope variables?\nthey are global just in function scope\n1 2 3 4 5 6 7 8  function f() { for ( let i = 0; i \u0026lt; 5; ++i ) { var f_global = 10; } console.log(f_global); } f();     do javascript confused with integer division?\nNo. it can output floats when dividing two integers\n1 2 3 4  let a = 7; let b = 2; let c = a / b; console.log(c);     do javascript support compound operators?\nYes.\n1 2 3 4 5  let a = 3; a += 2; a -= 2; a *= 3; a /= 2;     what to do if there are double quotes inside a string?\nsingle quote that string to avoid escaping\n1  let ling = \u0026#39;\u0026lt;a href=\u0026#34;https://www.example.com\u0026#34;\u0026gt;Click\u0026lt;/a\u0026gt;\u0026#39;;     can we change a specific character in a string by indexy?\nNo. strings are immutable\n1 2  let name = \u0026#34;vavolla\u0026#34;; name[0] = \u0026#34;s\u0026#34;; // FIXME: ERROR     can we also store expressions into an array?\nYes!\n1 2 3  let multi = [2==2, 2==1]; console.log(multi[0]); console.log(multi[1]);     can we modify arrays using bracket notation?\nYes! this does not work with strings but arrays are okay with that\n1 2 3 4  let A = [\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;,\u0026#39;c\u0026#39;]; A[0] = \u0026#39;x\u0026#39;; A[1] = \u0026#39;y\u0026#39;; A[2] = \u0026#39;z\u0026#39;;     what happens if we pop a multi-dimentional array?\n1 2 3 4 5  let A = [[1,2], [3,3], [4,5]]; A.pop(); console.log(A);     can we remove curly brackets from single lined if ?\nYes! javascript allows that\n1 2  if ( condition ) x = 10;     how == operator behaves in javascript?\nit can compare values type independent\n1 2 3 4 5 6  let a = \u0026#39;3\u0026#39;; let b = 3; if ( a == b ) console.log(\u0026#34;yes\u0026#34;); else console.log(\u0026#34;no\u0026#34;);     how = operator behaves in javascript?\nit works like == but this time it compares same types\n1 2 3 4 5 6  let a = \u0026#39;3\u0026#39;; let b = 3; if ( a === b ) console.log(\u0026#34;yes\u0026#34;); else console.log(\u0026#34;no\u0026#34;);     what is the opposite of = operator ?\n1  !==     how switch statements work in js?\njust like in C++ :)\n  iterate nested loops\n1 2 3 4 5 6 7 8  A =[]; for ( let i = 0; i\u0026lt;3; ++i ) { A.push([]); for ( let j = 0; j\u0026lt;3; ++j ) { A[i].push(j); } } console.log(A);     example of contacts list with js objects\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  var contacts = [ { \u0026#34;first_name\u0026#34; : \u0026#34;Akira\u0026#34;, \u0026#34;last_name\u0026#34; : \u0026#34;Laine\u0026#34;, \u0026#34;number\u0026#34; : \u0026#34;05330000000\u0026#34;, }, { \u0026#34;first_name\u0026#34; : \u0026#34;Harry\u0026#34;, \u0026#34;last_name\u0026#34; : \u0026#34;Potter\u0026#34;, \u0026#34;number\u0026#34; : \u0026#34;05330000001\u0026#34;, }, { \u0026#34;first_name\u0026#34; : \u0026#34;Sherlock\u0026#34;, \u0026#34;last_name\u0026#34; : \u0026#34;Holmes\u0026#34;, \u0026#34;number\u0026#34; : \u0026#34;05330000002\u0026#34;, }, ] for ( let i = 0; i\u0026lt; contacts.length; ++i ) { console.log(contacts[i].first_name); console.log(contacts[i].last_name); console.log(contacts[i].number); }     does javascript allow us to use ternary operators?\nYes!\n1 2 3 4 5  let a = 2; let b = 7; let c; a \u0026gt; b ? c = 3 : c = 1; console.log(c);     how to do nested ternary operator?\n1 2 3 4 5  function sign( n ) { return n \u0026gt; 0 ? \u0026#34;+\u0026#34; : n \u0026lt; 0 ? \u0026#34;-\u0026#34; : \u0026#34;0\u0026#34;; } console.log(sign(-32)); // outputs: -     can we change values of const array?\nYes! I don\u0026rsquo;t know why but yes we can!\n1 2 3 4  const s = [1,2,3,4,5]; s[0] = 111; s[4] = 112; s[2] = 113;     which higher order functions javascript have?\n1 2 3 4 5  filter(); map(); sort(); split(); reduce();     what higher order function can be used to sum every element in an array?\nuse reduce()\n1 2 3  let A = [1,2,3,4,5]; A = A.reduce((result = 0, x) =\u0026gt; result += x); console.log(A);     what the rest operator does?\nit let\u0026rsquo;s us to call functions with infinite arguments. when it\u0026rsquo;s used in function parameters, it treats arguments as array\n1 2 3 4  function sum(...args) { return args.reduce( (x, result = 0) =\u0026gt; result += x); } console.log(sum(1,2,3,4,5,6)); // outputs: 21     what is destructuring technique ?\nit\u0026rsquo;s a shortcut for assigning Object properties to another Object\n1 2 3 4 5 6 7 8 9 10 11  var dog = { \u0026#34;name\u0026#34; : \u0026#34;ares\u0026#34;, \u0026#34;color\u0026#34; : \u0026#34;brown\u0026#34;, \u0026#34;age\u0026#34; : 12 }; var NEW_DOG = { \u0026#34;name\u0026#34; : a, \u0026#34;color\u0026#34; : b, \u0026#34;age\u0026#34; : c } = dog;     what are the benefits of string template literals ?\n variables can be used inside the string. without concatination double quotes can be used without escaping them new lines treated as new lines. so we can make multi-line strings    how private class members look in js?\nuse underscore before the name\n1 2 3 4 5  class Person { constructor(name) { this._name = name; } }     problems \u0026amp; solutions ","description":"","id":17,"section":"posts","tags":null,"title":"Javascript Cheat Sheet","uri":"https://savolla.github.io/posts/javascript-cheat-sheet/"},{"content":"ourput redirection  you can redirect outputs of a shell command in vim  press ESC :r !ls -la RET    whitespace removal  remove all trailing whitespaces. you can also make the following a permanent macro  press ESC :%s/\\s\\+$//e RET    time travel  show the file 10 mins ago  press ESC :earlier 10m RET   show the file after 10 mins  press ESC :later 10m RET    ","description":"","id":18,"section":"posts","tags":["vim","howto","tools"],"title":"less known vim tricks","uri":"https://savolla.github.io/posts/less-known-vim-tricks/"},{"content":"Making Embedded Systems TÃ¼rkÃ§e kitap Ã¶zeti\nBÃ¶lÃ¼m 0  microcontroller: kendi iÃ§inde, RAM\u0026rsquo;i kod hafÄ±zasÄ± yani FLASH (ROM, EEPROM) ve bir iÅlemcisi olan bÃ¼tÃ¼n bir cihazdÄ±r DSP: Ã¶zelleÅmiÅ bir microcontroller\u0026rsquo;dÄ±r. ana amacÄ±, gelen analog bir sinyali iÅleyip ilginÃ§ sonuÃ§lar elde etmektir. Normal microcontrollerlardan farkÄ±, matematiksel iÅlemleri Ã§ok daha hÄ±zlÄ± yapabiliyor olmasÄ±dÄ±r.  BÃ¶lÃ¼m 1  GÃ¶mÃ¼lÃ¼ Sistem: tek bir amaÃ§ iÃ§in tasarlanmÄ±Å, iÃ§inde bir yazÄ±lÄ±m barÄ±ndÄ±ran, genel amaÃ§lÄ± bir bilgisayara gÃ¶re Ã§ok daha az iÅlem gÃ¼cÃ¼ ve hafÄ±zaya sahip cihazlara denir. gÃ¶mÃ¼lÃ¼ sistemlerde, iÅlemciler normal bilgisayarlarÄ±n iÅlemcilerine gÃ¶re daha yavaÅ Ã§alÄ±ÅÄ±rlar ki gÃ¼Ã§ tÃ¼ketimi az olsun. RAM aÃ§Ä±sÄ±ndan da aynÄ± Åekilde daha zayÄ±ftÄ±r ki maliyeti daha az olsun. yazÄ±lÄ±mÄ±n da bu kÄ±sÄ±tlÄ± imkanlarda doÄru bir Åekilde Ã§alÄ±ÅmasÄ± gerekir. O kadar doÄru Ã§alÄ±ÅmasÄ± gerekir ki Ã¶rneÄin bir kalp pilinde her hangi bir bug, Ã¶lÃ¼mle sonuÃ§lanabilir. Bir uÃ§aÄÄ±n elektronik devresinde en ufak bir yazÄ±lÄ±m hatasÄ±, onca insanÄ±n Ã¶lÃ¼mÃ¼ne yol aÃ§abilir  Compilerlar, OOP ve YazÄ±lÄ±m dilleri  Ã§oÄu bÃ¼yÃ¼k MCU Ã¼reticisi, cross-compiler olarak GNU araÃ§larÄ±nÄ± kullanÄ±r gÃ¶mÃ¼lÃ¼ yazÄ±lÄ±m Ã§oÄu kez C dilini destekler. C++ gibi diller kÄ±smen desteklenir. Genelde cross-compilerlar C++ iÃ§in Ã§oklu kalÄ±tÄ±m, templateleri vs desteklenmez Java iÃ§in artan bir destek var ancak Java\u0026rsquo;yÄ± destekleyen bir sistemin genelde bÃ¼yÃ¼k bir sistem olmasÄ± gerekir. dar ve ucuz alanlarda C hala hÃ¼kÃ¼m sÃ¼rer kullanacaÄÄ±n dile takÄ±lma. dizayn ve mimari Ã§ok Ã§ok daha Ã¶nemli  GÃ¶mÃ¼lÃ¼ YazÄ±lÄ±m GeliÅtirmek Debugging  yazÄ±lÄ±mÄ± baÅka bir platform iÃ§in yazdÄ±ÄÄ±mÄ±zdan dolayÄ±, yazÄ±lÄ±mÄ±, kod yazdÄ±ÄÄ±mÄ±z bilgisayarda debug edemeyiz. Bunun iÃ§in cross debugger\u0026lsquo;lar kullanÄ±lÄ±r cross debugger\u0026rsquo;Ä±n Ã§alÄ±ÅmasÄ± iÃ§in JTAG\u0026rsquo;e ihtiyacÄ±n var. Bu kendi baÅÄ±na bir cihaz ve fiyatÄ± 500 lira civarÄ±nda. ama platforma gÃ¶re deÄiÅir. Ã¶rneÄin STM\u0026rsquo;in ST-Link diye onboard bir debuggerÄ± var cross compiler senin bilgisayarÄ±nda Ã§alÄ±ÅÄ±p, JTAG ile haberleÅir. JTAG ise senin Ã¼stÃ¼nde uÄraÅtÄ±ÄÄ±n MCU\u0026rsquo;nun JTAG arayÃ¼zÃ¼ne baÄlanÄ±r. oradan debug yapar bir donanÄ±mÄ±n debugging desteklemesi, onu ekstra pahalÄ± yapar. ayrÄ±ca debug iÅlemi genelde problemli olduÄu iÃ§in, donanÄ±mlar Ã§ok basit seviyede debugging desteklemektedirler kÄ±saca iÅlemciler/mikrodenetleyiciler, debug destekler ancak Ã¶yle bir Java ya da C# debug ederkenki performans ve Ã¶zellik beklememek gerek kod yazdÄ±ÄÄ±n PC ile hedef platform arasÄ±nda debugger baÄlantÄ±sÄ± kuran alete, emulator denir. JTAG bunlardan biridir. Ã§oÄu gÃ¶mÃ¼lÃ¼ sistem donanÄ±mÄ± printf tabanlÄ± debuggingi destekler. bazen kullanÄ±lmayan bir I/O portundana bir LED baÄlayÄ±p belli durumlarda bir iÅlevin gerÃ§ekleÅip gerÃ§ekleÅmediÄini kontrol etmek iÃ§in o LED yakÄ±p sÃ¶ndÃ¼rÃ¼lÃ¼r. bir emulator satÄ±n almak yerine bu tarz Ã§Ã¶zÃ¼mler mevcuttur Yine de gÃ¶mÃ¼lÃ¼ sistemleri debug etmek, her Åeyin dÃ¼zgÃ¼n Ã§alÄ±ÅacaÄÄ± anlamÄ±na gelmez. bazÄ± buglar vardÄ±r ki debugging iÅlemi bittikten sonra kendini gÃ¶sterir\u0026hellip;  Zorluklar  gÃ¶mÃ¼lÃ¼ alanda kÄ±sÄ±tlayÄ±cÄ± nitelikler;  RAM (memory) ROM (code space) CPU speed battery life Ã§evre birimler (peripherals)   Ã¼zerinde uÄraÅtÄ±ÄÄ±n donanÄ±mÄ± Ã§ok iyi bilmen gerek. Ã§Ã¼nkÃ¼ eÄer donanÄ±mÄ±n desteklemediÄi bir Åeyi yaptÄ±rmaya Ã§alÄ±ÅÄ±rsan, donanÄ±ma zarar verme ihtimalin var.  ZorluklarÄ±n Ãstesinden Gelmek  sistemi modÃ¼llere bÃ¶l modÃ¼ller arasÄ±na interface\u0026lsquo;ler koy ki modÃ¼ller birbirlerine baÄlÄ± kalÄ±p coupling\u0026lsquo;i arttÄ±rmasÄ±n gÃ¶mÃ¼lÃ¼ sistemlerde sistemi modÃ¼llere bÃ¶lmek Ã§ok daha kolaydÄ±r. Ã¶rneÄin bir X sensÃ¶rÃ¼ Y haberleÅme kanalÄ±ndan Z ile haberleÅiyorsa, demek ki bunlarÄ±n hepsi farklÄ± objelerdir yani farklÄ± modÃ¼llere aittirler. sÄ±rasÄ±yla X, Y ve Z diye 3 ayrÄ± modÃ¼l oluÅturulabilir modÃ¼llere ayÄ±rmak\u0026rsquo;da kullanÄ±lan temel soru Åu; \u0026ldquo;bu kÄ±sÄ±m kendi baÅÄ±na baÄÄ±msÄ±z bir donanÄ±m/protokol mÃ¼?\u0026rdquo;. sorunun cevabÄ± evet ise o parÃ§a iÃ§in farklÄ± modÃ¼l oluÅturulur modÃ¼ller kendi baÅlarÄ±na test edilebilir. BÃ¶ylelikle kod kalitesi ve \u0026ldquo;maintainabiliry\u0026rdquo; artmÄ±Å olur modÃ¼llerin arasÄ±na interface koymayÄ± unutma. direk pound include kÃ¶tÃ¼ fikir her zaman test ve dÃ¶kÃ¼mantasyon yaz kodu ilk zaman iÃ§in kÃ¼Ã§Ã¼k ve optimize yazmaya Ã§alÄ±Åma. donanÄ±mÄ±n kÄ±sÄ±tlÄ± olduÄu bir alanda bu Åekilde Ã§alÄ±ÅmanÄ±n gerekli olduÄu dÃ¼ÅÃ¼nÃ¼lÃ¼r ancak Ã§oÄu problem ve bug buralardan gelebilir. onun yerine Åu adÄ±mlarÄ± izle;  Ã§alÄ±Åan basit bir kod yaz kodu test et dÃ¶kÃ¼mante et tÃ¼m testlerden geÃ§tiyse, optimizasyon iÅlemine geÃ§  adÄ±ma git      BÃ¶lÃ¼m 2 ","description":"","id":19,"section":"posts","tags":["book"],"title":"Making Embedded Systems NotlarÄ±m","uri":"https://savolla.github.io/posts/making-embedded-systems-notes/"},{"content":"here! you found it! this is one single Makefile that fits all projects with this file structure:\n1 2 3 4 5 6 7 8 9  project / âââ include âââ build âââ lib âââ obj âââ src âââ test âââ main.c âââ Makefile   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  TARGET_EXEC ?= a.out BUILD_DIR ?= ./build SRC_DIRS ?= ./src SRCS := $(shell find $(SRC_DIRS) -name *.cpp -or -name *.c -or -name *.s) OBJS := $(SRCS:%=$(BUILD_DIR)/%.o) DEPS := $(OBJS:.o=.d) INC_DIRS := $(shell find $(SRC_DIRS) -type d) INC_FLAGS := $(addprefix -I,$(INC_DIRS)) CPPFLAGS ?= $(INC_FLAGS) -MMD -MP $(BUILD_DIR)/$(TARGET_EXEC): $(OBJS) $(CC) $(OBJS) -o $@ $(LDFLAGS) # assembly $(BUILD_DIR)/%.s.o: %.s $(MKDIR_P) $(dir $@) $(AS) $(ASFLAGS) -c $\u0026lt; -o $@ # c source $(BUILD_DIR)/%.c.o: %.c $(MKDIR_P) $(dir $@) $(CC) $(CPPFLAGS) $(CFLAGS) -c $\u0026lt; -o $@ # c++ source $(BUILD_DIR)/%.cpp.o: %.cpp $(MKDIR_P) $(dir $@) $(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $\u0026lt; -o $@ .PHONY: clean clean: $(RM) -r $(BUILD_DIR) -include $(DEPS) MKDIR_P ?= mkdir -p   ","description":"","id":20,"section":"posts","tags":["tools","make","programming"],"title":"one Makefile for everything","uri":"https://savolla.github.io/posts/one-makefile-for-everything/"},{"content":"This is my personal Equalizer Preference. This is a result of one year of tweaking. Every Frequency is tuned and tested 1 Hz at a time. Tuned for the following genres;\n  Djent\n  Slam\n  Break Core\n  Brutal Death\n  Technical Death\n  Black Metal\n    I used ATH-M40x Studio headphones for tuning.\n  ","description":"This is my personal wiki","id":21,"section":"posts","tags":null,"title":"Perfect Equalizer for Metal","uri":"https://savolla.github.io/posts/perfect-equalizer-for-metal/"},{"content":"this is a short step by step tutorial to save your vim macro and use it everytime\n fire up vim do q a create your macro press q to finish exit vim :q! vim ~/.vimrc type let @q = '' put your cursor on first single quote do \u0026quot; a p macro should be pasted inside single quotes like:   1  let @q = \u0026#39;your_macro_content\u0026#39;    save and exit ESC :wq fire up vim again do @ q  now you should have your macro saved. after this moment everytime you open a vim session, this macro will be read from .vimrc and you will able to use it.\n","description":"","id":22,"section":"posts","tags":["vim","howto","tools"],"title":"permanent macros in vim","uri":"https://savolla.github.io/posts/permanent-macros-in-vim/"},{"content":"Programming Embedded Systems 1999\u0026rsquo;da yazÄ±lan 200 sayfalÄ±k bir kitaptÄ±r. Bir GÃ¶mÃ¼lÃ¼ YazÄ±lÄ±m gelitirmek iÃ§in adÄ±m adÄ±m nelerin yapÄ±lmasÄ± gerektiÄini anlatÄ±r. Bu da benim Ã§Ä±kardÄ±ÄÄ±m TÃ¼rkÃ§e Ãzet\nBÃ¶lÃ¼m 1 GÃ¶mÃ¼lÃ¼ Sistem Nedir  GÃ¶mÃ¼lÃ¼ sistemler genelde daha bÃ¼yÃ¼k bir sistemin parÃ§asÄ± olurlar. Ã¶rnek olarak bir araba iÃ§indeki sistemler; fren sistemi ya da hava yastÄ±ÄÄ± sistemi iÃ§in olan devrenin iÃ§indeki yazÄ±lÄ±m bir gÃ¶mÃ¼lÃ¼ sistemdir Genel amaÃ§lÄ± bir bilgisayarÄ±n iÃ§inde de gÃ¶mÃ¼lÃ¼ sistemler mevcuttur; klavye, mouse, hard drive, ses kartÄ±. BunlarÄ±n hepsi kendi baÅÄ±na iÃ§inde kÃ¼Ã§Ã¼k yazÄ±lÄ±mlar olan tek baÅÄ±na gÃ¶mÃ¼lÃ¼ sistemlerdir  DonanÄ±m  GÃ¶mÃ¼lÃ¼ sistemlerin tarihi ilk olarak 1971\u0026rsquo;de Intel\u0026rsquo;in Japon bir firma iÃ§in Ã¼rettiÄi 4004 mikroiÅlemcisi ile baÅlÄ±yor. ilk mikroiÅlemcidir bu. iÅlemci gÃ¼cÃ¼ MIPS ile Ã¶lÃ§Ã¼lÃ¼r (Millions of Instruction Per Second) iÅlemci gÃ¼cÃ¼nÃ¼ etkileyen bir baÅka Ã¶zellik de register boyutudur. 8-bit ya da 16-bit iÅlemcilerin register boyutlarÄ± da sÄ±rasÄ±yla 8 ve 16 bittir 8-bit iÅlemci, yalnÄ±zda 256 byte kadar RAM destekler Ã§Ã¼nkÃ¼ \\(2^8=256\\) 16-bit iÅlemci ise 64KB RAM destekleyebilir: \\(2^{16}=65536\\) ise \\(65536\\div1024 = 64\\) 32-bit, 4GB RAM 64-bit, 4PB ancak 64-bit sistemler Ã§ok fazla RAM desteklediÄi iÃ§in Åu anda dÃ¼nyada bu kadar RAM\u0026rsquo;e sahip bir makine yok (mu acaba?). Bu yÃ¼zden Ã§oÄu CPU Ã¼reticisi adreslenebilecek miktarÄ± 1 TB olarak ayarlayÄ±p -ki hala Ã§ok yÃ¼ksek RAM- bit sayÄ±sÄ±nÄ± 50 yaparlar; \\(2^{50}\\div1024^4=1TB\\) 8-bit cihazlarÄ±n yaÅam Ã¶mrÃ¼ ÅaÅÄ±rtÄ±cÄ±:\n Dijital saatler gibi cihazlar ve buna benzer gÃ¶mÃ¼lÃ¼ sistemler RAM\u0026rsquo;e gerek duymayÄ±p, CPU\u0026rsquo;nun kendi registerlarÄ±nÄ± kullanabilir. Dijital saatler 8-bit CPU kullanabilir Oyun konsolu tasarlayan mÃ¼hendisler, konsolun maliyetini ucuzlatmak adÄ±na, hafÄ±za ve diÄer pahalÄ± birimleri dÄ±Åardan takÄ±labilir olarak Ã¼retirler. Bu sayede konsolun maliyeti dÃ¼Åerken, oyunlarÄ±n maliyeti yÃ¼kselir. Bunun bir Ã¶rneÄi Ateri Kasetlerinde gÃ¶rÃ¼lÃ¼r  Diller  C dilinin yazÄ±lÄ±Å amacÄ±, low level bir dil oluÅturmaktÄ±r C\u0026rsquo;nin gÃ¶mÃ¼lÃ¼ sistemler iÃ§in en avantajlÄ± 2 yanÄ± vardÄ±r;  neredeyse her iÅlemci iÃ§in kod Ã¼retebiliyor olmasÄ± donanÄ±mla bu kadar kolay konuÅabiliyor olmasÄ±   Assembly, C++, Ada, Rust, ÂµPython, Java diÄer GÃ¶mÃ¼lÃ¼ alanlarda kullanÄ±lan dillerdendir Assembly, donanÄ±mÄ±n tam kontrolÃ¼nÃ¼ ele alÄ±r, Ã§ok hÄ±zlÄ± Ã§alÄ±ÅÄ±r ancak kodu baÅka bir iÅlemciye port edemezsin. kod Ã§ok uzundur ve okumasÄ± zordur C++, C diline bir de Object Oriented Ã¶zellikler ve bir Ã§ok Abstraction eklemiÅtir ve bu yazÄ±lÄ±m geliÅtirme aÃ§Ä±sÄ±ndan Ã§ok verimli bir dil olmasÄ±na neden olmuÅtur. Ancak bu Ã¶zellikler, kodun Ã§alÄ±ÅmasÄ±nÄ± kÃ¶tÃ¼ yÃ¶nde etkilemiÅtir ve C kadar hÄ±zlÄ± olamamasÄ±na sebep olmuÅtur. C++\u0026lsquo;a Ã¶zgÃ¼ Ã¶zellikler, bÃ¼yÃ¼k projelerde iyi rol oynayabilir ancak Ã¶rneÄin bir dijital saat gibi basit bir gÃ¶mÃ¼lÃ¼ sistemde Ã§ok da ihtiyaÃ§ yoktur Ada, GÃ¶mÃ¼lÃ¼ sistemlerde Ã¶nemli bir dildir. C++ yerine kullanÄ±labilecek bir dil olma niteliÄindedir. KullanÄ±m alanÄ± daha Ã§ok Amerikan Savunma Sanaiinden dÄ±ÅarÄ±ya Ã§Ä±kamadÄ±ÄÄ± iÃ§in yine popÃ¼laritesini kaybeden ÅanssÄ±z dillerdendir  BÃ¶lÃ¼m 2   GÃ¶mÃ¼lÃ¼ sistemlerde \u0026ldquo;hello world\u0026rdquo; programÄ±, Ã§oÄu zaman bir LED\u0026rsquo;i 1 Hz hÄ±zÄ±nda yakÄ±p sÃ¶ndÃ¼rmektir.\n  delay fonksiyonlarÄ±nda kullanÄ±lan sadece bir sayacÄ± sÄ±fÄ±ra kadar geriye sayan C kod yapÄ±sÄ± Åu Åekilde kÄ±saca kurulabilir;\n1 2  int i = 100; while (i--);     basit bir LED yanÄ±p sÃ¶ndÃ¼rme programÄ±;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  #define LED_GREEN 0x40  #define P2LTCH 0xFF5E  void delay( unsigned int nMilliseconds ); void toggleLed( unsigned char ledMask ); void main(void) { while (1) { toggleLed(LED_GREEN); delay(500); } } void delay( unsigned int nMilliseconds ) { #define CYCLES_PER_MS 260  unsigned long nCycles = nMilliseconds * CYCLES_PER_MS; while (nCycles--); } void toggleLed( unsigned char ledMask ) { asm { mov dx, P2LTCH in al, dx mov ah, ledMask xor al, ah out dx, al } }     GÃ¶mÃ¼lÃ¼ yazÄ±lÄ±mlarÄ±n, diÄer saf yazÄ±lÄ±mlardan farkÄ±, daima sonsuz bir dÃ¶ngÃ¼ ile bitiyor olmasÄ±dÄ±r\n  Cihazlar ya resetlenene kadar ya da bozulana kadar Ã§alÄ±Åmaya devam ederler\n  BÃ¶lÃ¼m 3   compiler, linker gibi toollarÄ±n iÃ§inde bulunduÄu paket halindekii programa, toolchain denir\n  Malesef her platform iÃ§in kullanÄ±lan toolchain farklÄ±lÄ±k gÃ¶sterir. ARM iÃ§in farklÄ±, Atmel, Microchip iÃ§in farklÄ± toolchainler kurulmasÄ± gerekir\n  kaynak kodu, bir gÃ¶mÃ¼lÃ¼ sistemde Ã§alÄ±Åabilir bir yazÄ±lÄ±ma dÃ¶nÃ¼ÅtÃ¼rmek iÃ§in Åu 3 adÄ±m izlenmesi gerekir;\n her kaynak dosyasÄ±nÄ±n compile edilip object dosyasÄ±na dÃ¶nÃ¼Åmesi birinci adÄ±mda oluÅan her object dosyasÄ±nÄ±n bir linker ile baÄlanÄ±p tek bir obje dosyasÄ±na dÃ¶nÃ¼Åmesi. Ã¼retilen bu son dosyaya relocatable program denir relocatable program, bir locator ile hedef gÃ¶mÃ¼lÃ¼ sistemde Ã§alÄ±ÅtÄ±rÄ±labilir bir dosyaya dÃ¶nÃ¼ÅtÃ¼rÃ¼lÃ¼r      bazÄ± eski iÅlemciler. bu iÅlemciler 2000\u0026rsquo;lerde beyaz eÅya, otomobil vs gibi Ã¼rÃ¼nlerin yapÄ±mÄ±nda kullanÄ±lan iÅlemcilerdir;\n Fujitsu SPARClite Hitachi H8/300 Hitachi H8/300H Hitachi H8/S Hitachi SH IBM/Motorola PowerPC Intel i960 MIPS R3xxx MIPS R4xx0 Mitsubishi D10V Mitsubishi M32R/D Motorola 68k Sun Sparc Sun MicroSPARC Toshiba TX39    object dosyalarÄ±nÄ±n belli baÅlÄ± formatlarÄ± vardÄ±r. bunlardan ikisi COFF ve ELF\u0026rsquo;dir. COFF (Common Object File Format), ELF (Extended Linker Format)\n  eÄer bir gÃ¶mÃ¼lÃ¼ sistem projesinde birden Ã§ok dil ya da compiler kullanÄ±lacaksa object dosyalarÄ±nÄ±n formatlarÄ±nÄ±n aynÄ± olmasÄ±na dikkat edilmelidir. aksi taktirde linker farklÄ± formatlardaki obje dosyalarÄ±nÄ±n baÄlayamayabilir\n  bir obje dosyasÄ± 3 temel kÄ±sÄ±mdan oluÅur;\n text bu kÄ±sÄ±mda kodun kendisi yer alÄ±r data global deÄiÅkenler burada yer alÄ±r bss henÃ¼z deÄer atanmamÄ±Å ve static deÄiÅkenler burada bulunur    kaynak dosyalarÄ±nda bazen extern komutu ile baÅka kaynak dosyalarÄ±ndaki deÄiÅkenler referans verilebilir. linkleme sÄ±rasÄ±nda bu komutlarda tarif edilen deÄiÅkenleri yerine koymak, linkerÄ±n gÃ¶revidir\n  linking   linker, obje dosyalarÄ±nda bulunan text, data ve bss bÃ¶lÃ¼mÃ¼ tek bir dosya iÃ§ine yazar ve extern komutuyla tarif edilen deÄiÅkenleri yerine koyar\n  linker\u0026rsquo;Ä±n kendi scripting dili vardÄ±r. bu dil sayesinde kod bÃ¶lÃ¼mleri (text, data, bss) birbiriyle istendiÄi gibi baÄlanÄ±p, istenen bÃ¶lÃ¼mler baÅka bÃ¶lÃ¼mlere aktarÄ±labilir\n  startup code   yarÄ±n Ã¶bÃ¼r gÃ¼n bir C ya da C++ programÄ±ndaki main() fonksiyonundan Ã¶nce gerÃ§ekleÅen iÅlemler sorulduÄunda - ki gÃ¶mÃ¼lÃ¼ sistemler iÅ mÃ¼lakatlarÄ±nda bunlar sorulur - startup kodunda neler olup bittiÄini bilmek faydalÄ± olacaktÄ±r\n  yazÄ±lÄ±m geliÅtirme araÃ§larÄ±nÄ±n geleneksel olarak yaptÄ±klarÄ± iÅlemlerden biri, programÄ±n Ã¶nÃ¼ne bir startup kodu yerleÅtirmektir\n  startup kodu, o platforma Ã¶zel olan Assembly diliyle yazÄ±lÄ±p, daha yÃ¼ksek seviyeli dillerin Ã§alÄ±ÅmasÄ± iÃ§in uygun bir ortam hazÄ±rlar\n  her yÃ¼ksek seviyeli dil, Ã§alÄ±Åmak iÃ§in deÄiÅik kriterlere ihtiyaÃ§ duyar. Ã¶rnek olarak C ve C++, main() Ã§aÄÄ±rÄ±lmadan Ã¶nce startup kodunun, stack\u0026lsquo;i ayarlamasÄ±na ihtiyaÃ§ duyar. stack oluÅturulmazsa C ve C++ kodu Ã§alÄ±Åamaz. Bu sadece C ve C++ iÃ§in gereken iÅlemlerden sadece biridir\n  startup kodu genellikle ya startup.asm ya da crt0.s olarak isimli dosyalarda yer alÄ±r. crt0.s, \u0026ldquo;C Runtime\u0026rdquo;\u0026lsquo;Ä±n kÄ±saltÄ±lmÄ±ÅÄ±dÄ±r\n  main fonksiyonundan Ã¶nce olanlar sÄ±rasÄ±yla;\n disable all interrupts (cli command in x86) Copy initialized data from ROM to RAM (data) zero-out uninitialized data area (bss) Allocate space for and initialize the stack initialize the processor\u0026rsquo;s stack pointer create and initialize the heap execute \u0026ldquo;constructors\u0026rdquo; and \u0026ldquo;initializers\u0026rdquo; for global vars (only in C++) enable interrupts call main()    adÄ±mdan sonra da program eÄer main()\u0026lsquo;den Ã§Ä±karsa diye sonsuz dÃ¶ngÃ¼ konur. sonsuz dÃ¶ngÃ¼ yerine istenirse program akÄ±ÅÄ± istenen yere doÄru yÃ¶nlendirilebilir    startup kodu ilk Ã§alÄ±Åan kod olduÄu iÃ§in bunun linker scriptinde belirtilmesi gerekir. linker scriptingde ilk belirtilmesi gereken Åey programÄ±n ilk Ã§alÄ±ÅacaÄÄ± kÄ±smÄ±n neresi olduÄudur. bir yazÄ±lÄ±mÄ±n ilk Ã§alÄ±Åan kod satÄ±rÄ±na ya da fonksiyonuna entry point denir\n   locator  linking iÅlemi bittiÄinde geriye son iÅlem olan locator iÅlemi kalÄ±r locator genelde ayrÄ± bir programdÄ±r ancak GNU araÃ§larÄ±nda, locator iÅlevini linker otomatik gerÃ§ekleÅtirir  ","description":"","id":23,"section":"posts","tags":["book"],"title":"Programming Embedded Systems NotlarÄ±m","uri":"https://savolla.github.io/posts/programming-embedded-systems-notes/"},{"content":"This is how I use doom emacs for daily coding. Doom and it\u0026rsquo;s packages are working together to make developer\u0026rsquo;s life easy. Here I made a complete list for you guys. This is a step by step guide to do coding on doom emacs. By the way when I say things like C-c C-p it means CTRL + c + p\nbefore we start to make things work enable specified modules in your init file\n do SPC f p and select init.el enable(uncomment) the following modules;  magit treemacs lookup   reload doom by doing SPC h r r  cloning projects  SPC g C to run magit clone press u to specify repo url paste your url with Ctrl Shift v (for linux) specify the path for the repo press y to make origin default branch wait until the cloning is finished press q to quit  adding projects  SPC o p to open treemacs C-c C-p a specify the path for your porject now you see your project directory appeared in your treemacs menu  navigate files  SPC SPC brings menu with all files under your project root type any keyword you want  you don\u0026rsquo;t have to type entire file name. menu items will be reduced once you type some characters.\nfind symbols (method, variable, objects)  press SPC / type your keyword or function, variable, class or struct names. once you enter the keyword, doom will jump to that file instantly C-o to go back C-i to go forward  recent files if you work on other things other than your project, for example editin some config files while coding etc, then you probably type the file path every single time to navigate to that config file. doom solves it with\n SPC f r brings a menu or recently visited files find and navigate C-o to go back C-i to go forward  lookup code sometimes we can\u0026rsquo;t find a good documentation on a method/module when coding. the best way to understand something is to looking at examples\n navigate your cursor on method, module you want to understand do SCP s o choose Github before hitting RET you can optionally specify the following items for more accurate results;  filename: path: extension:    here is an example for searching printf on github\n printf extension:.c filename:main.c path:src\n find and replace projectwise you can change a variable or method name projectwise. this is usefull in code refactoring. here is how to do that in doom;\n SPC / enter the symbol name. \u0026ldquo;emacs\u0026rdquo; in this example C-c C-e :%s/emacs/doom/g RET Z Z  there must be an easier way..\n","description":"","id":24,"section":"posts","tags":["tools","doom","emacs","programming","howto"],"title":"programming in doom emacs","uri":"https://savolla.github.io/posts/programming-in-doom-emacs/"},{"content":"key bindings normal mode 1 2 3 4 5 6 7 8 9 10 11  V # enter visual mode and show hexdump view aaa # analyse the binary. unlocks other functions. do this first you open up a binary aaaa # experimnetal analysis. might take more time for huge binaries afl # see all funcitons (also called symbols) in the binary afll # really cool color coded function list s \u0026lt;FUNCTION\u0026gt; # seek to \u0026lt;FUNCTION\u0026gt; ii # show imports don\u0026#39;t forget to analyse first iS # show sections in memory is # show all symbols including global, local variables iz # show ascii strings iI # general binary information   visual mode 1 2 3 4 5 6  p # disassembler view pp # debuggin view ppp # byte distribution view pppp # byte string view for copying in C or Pyhton n # seek to next function N # seek to previous funciton   how to   jump to a function from debug or disassembler view\n use j/k keys to navigate on call instruction when call instruction is on the top press \u0026lt;ENTER\u0026gt; key hit u to come back    see hex dump of a function from disassembler view\n navigate to call just like you do for jumping to funciton press \u0026lt;Shift\u0026gt; p come back with p    see where a specific function is called across the binary using xref\n  from visual mode\n seek to the function you want to see where it\u0026rsquo;s called press \u0026lt;ENTER\u0026gt; key do :axt    from normal mode\n s \u0026lt;FUNCTION*NAME\u0026gt; axt  this iformation can also be seen from visual mode above function name. also if you want to\nsee jumps from a function. use axf\n    patch a binary\n r2 -w \u0026lt;BINARY\u0026gt; open the binary with write permissions aaa analyze V enter visual mode p go to disassembler view :s \u0026lt;ADDRESS*TO*MODIFY\u0026gt; seek to address you want to modify :e asm.var.sub=false \u0026ldquo;[var*4h]\u0026rdquo; notations don\u0026rsquo;t work when modifying. change to [rbp - 4] A enter modification mode and write new instruction in assembly hit \u0026lt;ENTER\u0026gt; two times and done additionally you can set `asm.var.sub` back to true if you want    how to debug a binary\n r2 -d \u0026lt;BINARY\u0026gt; open binary with debug mode V enter visual mode pp enter disassembler view additionally you can increase the stack size if you want with :e stack.size=256 \u0026lt;F8\u0026gt; next instruction \u0026lt;F7\u0026gt; step into call db \u0026lt;FUNCTION|ADDRESS\u0026gt; set brakepoint dc continue. hits the first breakpoint it encounters do reopens binary. saves breakpoints so you don\u0026rsquo;t have to set them everytime in case you lost hit . to come back to *ip*(instruction pointer) dsf step until end of frame. this is handy when you accidentally step into a function    info  most visual mode keys have a command equivalent to show hex dump in non-visual mode use +*px \u0026lt;BYTE*AMOUNT\u0026gt;** most function won\u0026rsquo;t work in radare2 until you analyze the binary. use +*aaa** and aaaa for experimental analysis. you can use normal mode commands in visual mode as well. use +*:** when you wanna run some r2 commands with +*iI** some important information like nx*(non-executable stack), *canary, *pic*(position independent code) can be seen if pic is true then the file will randomize base address for every run use ~.. to pipe output to less like shell  tips  always use -A argument when opening a binary with radare. so you don\u0026rsquo;t have to do\naaa everytime. -AA also can be used bug takes long time on huge binaries  ","description":"","id":25,"section":"posts","tags":null,"title":"radare notes","uri":"https://savolla.github.io/posts/radare-notes/"},{"content":"Here I made some album recommendations. this is my personal playlist which consists of very \u0026ldquo;non-normie\u0026rdquo; stuff. albums in this list will start with the most \u0026ldquo;normie\u0026rdquo; music and will incrementally get heavier\nlevel 1 easier to digest and fun\n Tokyo Rose - Chases 2   great synthwave album.. my favorite song on this is midnight chase\n Dance with the Dead - Loved to Death  synthwave + some metal elements. great if you like distortion guitar riffs. this one includes awesome guitar solos. and the production is just incredible\n ALIX 2084 (EP)  directly jump to Elevator Dance Party song. great work and really underrated. those tempo changes will shake your brain inside\n Mega Drive - Hardwired V1.4  Dataline Dataline Dataline !!\n Aphex Twin - Selected Ambient Works 85-92  legent album from a legend\n Plini - Sweet Nothings  I bet this will be the sweetest thing you will ever listened. your ears will overflow with candies\nlevel 2 still electronic but with some interesting elements\n Heptaedium - \u0026ldquo;A M E N\u0026rdquo;  did you ever listened to break core? edgy..\n Aphex Twin Live at Field Day  did you ever experienced ear bleeding? just skip to 1:51:00 and wait.\nlevel 3 still electronic but.. this time adding depression\n Boards of Canada - Twoism  this album might look harmless but wait until your soul evaporates completely\n Hrsta - Ghosts Will Come And Kiss Our Eyes  don\u0026rsquo;t listen to this if you lost someone recently\n The LONGING - Original Soundtrack  wait 400 days\nlevel 4 dark ambient passage. contains some depressive and horror materials. you also might want to stop there and enjoy 1st, 2nd and 3rd levels because things get non-normie here\n Gates of Morheim - Omagatoki  contains ethnic sounds. it\u0026rsquo;s like a ritual music + dark ambient elements\n Kurotokage - Call To The Deep  similar to Gates of Morheim but deeper and darker. this album will make you dizzy and tired\n Atrium Carceri - Kapnobatai  things get serious and deep after this. especialy after the track called \u0026ldquo;A Stroll Through the Ancient City\u0026rdquo;\n Alt3r3d Stat3 - Dubbed in Black  paranormal stuff\nlevel 5 \u0026ldquo;guitars and drums\u0026rdquo; era begins but without vocals. gets heavier and heavier\n Modern Day Babylon - Travelers  my first djent album. this is the first metal album without vocals on this list\n Amogh Symphony - The Quantum Hack Code\nawesome concept album. there are some Indian ethnic elements on that one. good one. Heptaedium - KAWAII!!  underrated stuff. has some djenty elements also inherits from nintendo core genre. really interesting album\n Heptaedium - Underground Business  have some edgy songs. heavier than the first one KAVAII!!\n The Helix Nebula - Meridian  now we\u0026rsquo;re talking..\n Infant Annihilator - The Palpable Leprosy of Pollution  this will beat the shit out of your ears..\nlevel 6 vocals come to play. death metal, technical death metal stuff. list gets heavier and heavier.\n Dissonance In Design - Sentient   technical death metal album but without crazy riffs\n Konkeror - The Abysmal Horizons  just heavy.. skip to \u0026ldquo;Towers\u0026rdquo; song you\u0026rsquo;ll get what i mean\n Bloodbath - Live At Wacken 2005  this is the best metal live performance\n Edge of Sanity - Crimson  this album contains only one song\n Bloodbath - Unblessing The Purity  blasting the virginborn\n Ouroboros - Glorification of a Myth  fine album. lots of solos and great (hard to play) guitar riffs\n Krallice - Diotima  actual masterpiece. check Telluric Rings song if you still with me\n Krallice - Dimensional Bleedthrough  I like those feedbacks man..\n The Zenith Passage - Cosmic Dissconance  i don\u0026rsquo;t know in which category should I put this album\n Inferi - The Path of Apotheosis  this is one of those albums when your entire body chills. guitars sound awesome and played by highly skilled musicians. those tremolo pickings man..\n First Fragment - Dasein  this album contains some guitar techniques\u0026hellip;\n Rings of Saturn - Embryonic Anomaly  brain drill but with major scales\n Spawn Of Possession - Incurso  wait until \u0026ldquo;Bodiless Sleeper\u0026rdquo; song\nlevel 7 deepest depths of hell..\n Vital Remains - Icons of Evil  extremely satanic and brutal. those harmonic minor scales will blow your mind. this album is the first one on this list because of it\u0026rsquo;s melodic elements. next ones are not melodic anymore\n Severe Torture - Slaughtered  brutality takes another form\n Cryptopsy - None So Vile  insane vocals and drums\n Abominable Putridity - The Anomalies Of Artificial Origin  Russians know that stuff.\n Extermination Dismemberment - Serial Urbicide  heaviest thing i\u0026rsquo;ve ever heard\n","description":"This is my personal wiki","id":26,"section":"posts","tags":["music"],"title":"savolla's music recommendations","uri":"https://savolla.github.io/posts/music-recommendations/"},{"content":"  for example I\u0026rsquo;m searching for \u0026ldquo;setq\u0026rdquo; keyword which exists in \u0026ldquo;.doom.d\u0026rdquo; directory, file is called \u0026ldquo;config.el\u0026rdquo; and is written in \u0026ldquo;Emacs Lisp\u0026rdquo; language\n  go to github search\n  search for the following string\n1  setq extension:el path:.doom.d filename:config.el language:\u0026#34;Emacs Lisp\u0026#34; extension:.el     ","description":"","id":27,"section":"posts","tags":["howto","tools","git"],"title":"search code in Github","uri":"https://savolla.github.io/posts/search-code-in-github/"},{"content":":EXPORT_FILE_NAME: test-driven-development-for-embedded-c\n:EXPORT_TITLE: Test-Driven Development for Embedded C Kitap Ãzeti\n:HUGO_BASE_DIR: ~/txt/blog/\n:HUGO_SECTION: en/posts\n:EXPORT_AUTHOR: savolla\nBÃ¶lÃ¼m 0   Bu kitap, Agile ve GÃ¶mÃ¼lÃ¼ Sistemlerin harmanlamasÄ±dÄ±r\n  Test Driven Development = TDD\n  GÃ¶mÃ¼lÃ¼ sistemlerde genelde yazÄ±lÄ±m ve donanÄ±m geliÅtirme sÃ¼reci paralel ilerler. DonanÄ±m henÃ¼z ortada olmadÄ±ÄÄ± iÃ§in yazÄ±lÄ±mcÄ±larÄ±n, dÃ¶kÃ¼man yazÄ±p beklemekten baÅka pek yapabileceÄi bir Åey yoktur. Ancak TDD konseptinin ortaya Ã§Ä±kmasÄ±yla bu durum deÄiÅebilir\n  HenÃ¼z kod ortada yokken, kod iÃ§in test yazÄ±labilir. Ve yazÄ±lÄ±mcÄ±lar donanÄ±mÄ± beklerken Test yazabilirler. Bekleme, Ã§ok Ã¼retken bir sÃ¼rece dÃ¶nÃ¼ÅÃ¼r\n  AslÄ±nda normal bir yazÄ±lÄ±mcÄ±nÄ±n oturup test yazmasÄ± Ã§ok sÄ±kÄ±cÄ± bir hal alÄ±rken, GÃ¶mÃ¼lÃ¼ sistem yazÄ±lÄ±mcÄ±larÄ±nÄ±n test yazmasÄ± mecburi bir hal alÄ±r. Bu da ileride donanÄ±m Ã§Ä±ktÄ±ktan sonra yazÄ±lan koddaki hatalarÄ±n olabildiÄince aza indergenmesini saÄlar\n  Ne kadar Ã§ok test o kadar Ã§ok yazÄ±lÄ±m kalitesi ve o kadar az uykusuz geÃ§en gece demektir\n  Bu kitapta 2 tane test framwrok\u0026rsquo;Ã¼ kullanÄ±lmÄ±ÅtÄ±r;\n Unity : C iÃ§in CppUTest : C ve C++\u0026lsquo;Ä± destekler    BÃ¶lÃ¼m 1 ","description":"","id":28,"section":"posts","tags":null,"title":"Test Driven Development For Embedded C","uri":"https://savolla.github.io/posts/test-driven-development-for-embedded-c/"},{"content":":EXPORT_FILE_NAME: tinyml-book-notes\n:EXPORT_TITLE: TinyML Kitap Ãzeti\n:HUGO_BASE_DIR: ~/txt/blog/\n:HUGO_SECTION: en/posts\n:EXPORT_AUTHOR: savolla\n  BÃ¶lÃ¼m 1   GÃ¶mÃ¼lÃ¼ sistemlerde (Cortex-M4) yapay zeka uygulamasÄ± yapmak mÃ¼mkÃ¼n!\n  Ã§oÄu gÃ¶mÃ¼lÃ¼ sistem yazÄ±lÄ±mÄ±, new ya da malloc() kullanmaktan kaÃ§Ä±nÄ±r.\n  fact GÃ¶mÃ¼lÃ¼ sistemlerde heap kullanmak kÃ¶tÃ¼ bir fikirdir\n  Dynamic memory allocation\u0026rsquo;Ä±n en bÃ¼yÃ¼k zararÄ±, zaman iÃ§inde RAM\u0026rsquo;i bozmasÄ±dÄ±r. bkz: Fragmentation\n  Tensorflow\u0026rsquo;un MCU\u0026rsquo;lar iÃ§in Ã§Ä±kardÄ±ÄÄ± Ã¼rÃ¼n Tensorflow Lite\u0026lsquo;dÄ±r\n  BÃ¶lÃ¼m 2   Bu kitapta Åu GÃ¶mÃ¼lÃ¼ Yapay Zeka projeleri yer almaktadÄ±r;\n Speech recognition (microphone) hareket algÄ±lama (hareket sensÃ¶rÃ¼) Detect PPL (camera sensor)    yukarÄ±da bahsi geÃ§en projeleri siz kendiniz modifiye edebilirsiniz. Ã¶rnek olarak Speech recognition ile yapÄ±lan insan konuÅmasÄ± algÄ±lama projesini modifiye edip kÃ¶pek havlamasÄ±nÄ± tespit edebilen bir cihaz yapÄ±labilir. Bu sayede insan yerine kÃ¶pek tespiti yapan kÃ¼Ã§Ã¼k cihazlar yapabilirsiniz\n  Yapay zekayÄ± eÄitme kÄ±smÄ±nÄ± tamamen Google Colab Ã¼stÃ¼nde gerÃ§ekleÅtireceÄiz. Yani sÃ¼per Ã¶zelliklere sahip bir bilgisayara ihtiyacÄ±mÄ±z kalmadÄ±\n  Low power bir MCU\u0026rsquo;da (1 mW gibi) gidip de 10 mW tÃ¼keten bir kamera sensÃ¶rÃ¼ kullanÄ±rsanÄ±z, kullandÄ±ÄÄ±nÄ±z low power MCU\u0026rsquo;nun bir anlamÄ± kalmaz\n  BÃ¶lÃ¼m 3   Yapay Zeka ilk bakÄ±Åta zor gÃ¶rÃ¼nen bir alan olarak karÅÄ±mÄ±za Ã§Ä±ksa ve ileri matematik, tonlarca makale ve uzman olmak iÃ§in yÄ±llar geÃ§mesi gerekiyor gibi gÃ¶rÃ¼nse de aslÄ±nda iÅin uygulama kÄ±smÄ± bir kaÃ§ tool\u0026rsquo;dan ibarettir. GÃ¶z korkutacak bir Åey yok. Yapay zeka ile ilgili bir kaÃ§ konsept Ã¶Ärendikten sonra, projelerde kullanabilirsiniz\n  Bu kitapta yapay zeka uygulamalarÄ±nÄ± kÃ¼Ã§Ã¼k cihazlarda nasÄ±l kullanacaÄÄ±mÄ±zÄ± anlatÄ±yoruz. Teori ile iÅimiz yok.\n  KullanÄ±ÅlÄ± yapay zeka uygulamalarÄ±nÄ± yapmaya baÅlamak iÃ§in bÃ¼tÃ¼n teoriyi bilmeye gerek yok. Bu bÃ¶lÃ¼mde gerekli miktarda bir giriÅ yapÄ±lacak\n  yapay zeka uygulamasÄ±, diÄer kod ile yazdÄ±ÄÄ±mÄ±z uygulamalardan farklÄ±dÄ±r. kod yazmak yerine, hali hazÄ±rda var olan bir yapay zeka algoritmasÄ±na topladÄ±ÄÄ±mÄ±z verileri gireriz ve yapay zeka algoritmasÄ±, bu verileri iÅleyip finalde bize bir model Ã§Ä±kartÄ±r. Biz bu modele yeni bir veri girdiÄimizde de model bize bir tahmin Ã¼retir\n  yapay zeka uygulamalarÄ±nda kod kalitesinden Ã§ok veri kalitesi Ã¶nemlidir\n  Ã¶rnek olarak bir fabrika dÃ¼ÅÃ¼nelim, Ã¼retim yapan bir makine var ancak bu makine bazen bozulyor ve tamiri masraflÄ±. bu makinenin sÄ±caklÄ±ÄÄ±nÄ±, titreÅimi gibi verileri bir sÃ¼re aldÄ±ÄÄ±mÄ±zÄ± var sayalÄ±m. yeterli miktarda veriye ulaÅtÄ±ktan sonra bir yapay zeka algoritmasÄ±nÄ± bu verilerle eÄitip, makina bozulmaya yakÄ±n onu kapatan bir yapay zeka uygulamasÄ± yapabiliriz\n  training : yapay zeka kendisine sunulan verileri iÅleyip Ã¶Ärenmesine denir. SonuÃ§ta bir model oluÅur\n  model : yapay zeka algoritmasÄ±nÄ±n Ã¼rettiÄi Ã§Ä±ktÄ±. Bu Ã§Ä±ktÄ± aslÄ±nda bir programdÄ±r ve yeni veriler geldiÄinde bir tahmin Ã¼retir\n  inference: modele yeni veriler verdiÄimizde, modelin yeni bir tahmin yapma sÃ¼recine denir\n  bir yapay zeka uygulamasÄ±nda izlenecek adÄ±mlar;\n Hedef Belirleme (uygulama ne yapacak) Veri Toplama NÃ¶ral Network OluÅturma Train iÅlemi Convert the mode TODO Inference iÅlemi (yeni girdi verip Ã§Ä±ktÄ± al) modeli test et ve sorun gider    MCU\u0026rsquo;lar genelde az hafÄ±za ve iÅlem gÃ¼cÃ¼ne sahip olduklarÄ±ndan dolayÄ±, model oluÅtururken, cihazÄ±n bu Ã¶zellikleri gÃ¶z Ã¶nÃ¼nde bulundurulmalÄ±dÄ±r. Yani Ã§ok bÃ¼yÃ¼k bir nÃ¶ral networkÃ¼, kÃ¼Ã§Ã¼k bir MCU\u0026rsquo;ya koymak olanaksÄ±zdÄ±r.\n  NÃ¶ral networkÃ¼n boyutunu etkileyen faktÃ¶rler;\n NÃ¶ron sayÄ±sÄ± NÃ¶ronlar arasÄ±ndaki baÄlantÄ± sayÄ±sÄ±    yapay zeka modeline girdi olarak bir tensÃ¶r verilir. Ã§Ä±ktÄ± olarak da bir tensÃ¶r alÄ±nÄ±r\n  Tensor   bu, tek boyutlu bir tensor\u0026rsquo;dÃ¼r. Bunun diÄer bir ismi vector\u0026lsquo;dÃ¼r. boyutu ise \\((5,)\\) Åeklinde gÃ¶sterilir\n1  [1 3 4 5 6]     bu ise 2D bir tensÃ¶rdÃ¼r. baÅka bi isimle matrix denir. boyutu \\((3, 3)\\)\u0026lsquo;dÃ¼r\n1 2 3  [[1 3 4] [5 6 0] [2 2 0]]     matrix\u0026rsquo;den daha Ã§ok boyutlu tensÃ¶rlere de kÄ±saca tensor dneir. AÅaÄÄ±daki matris \\((2,3,3)\\) boyutlarÄ±na sahiptir Ã§Ã¼nkÃ¼ 2 tane 3\u0026rsquo;e 3\u0026rsquo;lÃ¼k matris barÄ±ndÄ±rÄ±yor\n1 2 3 4 5 6 7 8 9  [ [[1 3 4] [5 6 0] [2 2 0]] [[1 3 4] [5 6 0] [2 2 0]] ]     Sliding Windowing Technique   DevamlÄ± olarak gelen veriden bir anlam Ã§Ä±kartmak zordur. ÃÃ¼nkÃ¼ verinin tamamÄ±na ihtiyacÄ±mÄ±z vardÄ±r. ÃrneÄin bir ortalama alacaksak verinin tamamen eldilene kadar beklenilmesi gerekir.\n    Peki ya veri daha akarken bir sonuÃ§ Ã§Ä±kartmak istersek? iÅte o zaman veriye kendi belirlediÄimiz geniÅlikte bir pencere aÃ§arÄ±z.\n    YukarÄ±daki her yÄ±ldÄ±z verisinin gelmesi 10 saniye sÃ¼rÃ¼yor. Biz de her 10 saniyede bir verinin fotoÄrafÄ±nÄ± Ã§ekip o verilerin ortalamasÄ±nÄ± alÄ±p, yapay zeka modelimize okutup Ã§Ä±ktÄ± elde ederiz.\n    Yapay Zeka Modelimize gidecek olan veri;\n    tabiki bu sayÄ±lar direk bu Åekilde yapay zeka modeline verilemez. sayÄ±larÄ±n normalize olmasÄ± gerekir\n  Normalizasyon   Yapay Zeka algoritmalarÄ±na verilen verilerin 1 ile 0 arasÄ±na sÄ±kÄ±ÅtÄ±rÄ±lmasÄ± gerekir. Buna normalizasyon denir\n  Basit bir normalizasyon tekniÄi olarak, sayÄ±larÄ± maximum deÄerini bulup, tensÃ¶rde bulunan her veriye bÃ¶lmek verilebilir. Bu sayede tÃ¼m sayÄ±lar 1 ve 0 arasÄ±na sÄ±kÄ±ÅÄ±r\nnormalize olmamÄ±Å veri: [108 104 102 103 65]\nen bÃ¼yÃ¼k sayÄ± : 108\nnormalize olmuÅ veri: [1, 0.96, 0.94, 0.95, 0.60]\n  Linear Scaling TODO\nClipping TODO\nLog Scaling TODO\nZ-Score TODO\nModel Training   weight : nÃ¶ron iÃ§indeki veri. ilk anda rastgele bir sayÄ±dÄ±r\n  bias: bir nÃ¶ral aÄ parametresi\n  batch: Ã¶Ärenme sÄ±rasÄ±nda sunulan veri\n  epoch: eÄitme sayÄ±sÄ±\n  loss: performans kriteridir ve mÃ¼kemmel bir modelde sÄ±fÄ±rdÄ±r\n  accuracy: performans kriteridir ve mÃ¼kemmel bir modelde 100% olmasÄ± beklenir\n  hyperparameters: yapay zeka modeli eÄitilmeden Ã¶nce yapÄ±lan ayarlarÄ±n tÃ¼mÃ¼ne denir\n  overfitting: model datayÄ± ezberlediÄinde olur. bir modeli aÅÄ±rÄ± eÄitirsek, Ã§Ä±kan model sadece eÄitildiÄi datayÄ± tanÄ±yacaktÄ±r ve Ã§ok yÃ¼ksek tahminler yapar. yeni bir veri geldiÄinde kÃ¶tÃ¼ sonuÃ§ verecektir\n  underfit: modeli yeterli data ile eÄitmemiÅsek ya da nÃ¶ral network\u0026rsquo;Ã¼n mimarisi, karmaÅÄ±klÄ±ÄÄ± anlayamayacak kadar kÃ¼Ã§Ã¼k olduÄunda olur. kÄ±saca underfit bir model yarÄ±da kalmÄ±Å bir modeldir.\n  overfitting ile baÅa Ã§Ä±kmak iÃ§in;\n  nÃ¶ral network kÃ¼Ã§Ã¼ltÃ¼lebilir ki veriyi tamamen ezberleyecek kadar geniÅ bir kapasiteye sahip olamasÄ±n.\n  daha fazla veri ile beslenebilir (en iyi Ã§Ã¶zÃ¼mdÃ¼r)\n  data augmentation diye bir teknik kullanÄ±labilir. Bu teknik ile eldeki veri setini kullanarak yeni veriler elde edilebilir\n  regularization kullanÄ±labilir. L1 ve L2 regularizasyon teknikleri kullanÄ±labilir\n  dropout: eÄitim sÄ±rasÄ±nda, her epoch\u0026lsquo;da rastgele nÃ¶ronlar arasÄ± baÄlantÄ±larÄ±n rast gele koparÄ±lmasÄ± tekniÄine verilen isimdir\n    ","description":"","id":29,"section":"posts","tags":null,"title":"Tiny Ml Notes","uri":"https://savolla.github.io/posts/tinyml-notes/"},{"content":" also called gnu privacy guard this is a key which helps to encrypt and decript files there are 2 types of gpg keys; private : unlocks everything you lock with that public : you send to other people gpg keys expire ! so you need to generate them once or twice a year  how to generate a gpg key   first generate personal key:\n1  gpg --full-gen-key     choose RSA and RSA\n  choose 4096 for maximum security\n  choose y = 1 to make the key expire in one year\n  enter your real name and surname\n  enter your email\n  confirm\n  enter a password. this is the password of your key. DON\u0026rsquo;T FORGET IT\n  encrypt files with gpg   navigate to directory you want to encrypt (here I generate a random file)\n1  echo \u0026#34;secret message\u0026#34; \u0026gt; ~/secret-file.txt     encrypt the file\n1 2 3  # -r : recepient (in this case me) # -e : file to encrypt gpg -r your_mail@provider.com -e secret-file.txt   after this command, a file with gpg extension will be created. so now you can put this file (secret-file.txt.gpg) on the internet and no one will know what it is\n  remove the original file (optional)\n basic remove   1  rm secret-file.txt    deep remove (more secure)   1  shred -u secret-file.txt     decrypt files with gpg   decrypt command\n1  gpg -d secret-file.txt     then enter the password of your gpg key. the password you entered while generating the key\n  ","description":"","id":30,"section":"posts","tags":["tools","howto","gpg"],"title":"what is gpg","uri":"https://savolla.github.io/posts/what-is-gpg/"}]