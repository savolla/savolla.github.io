<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>howto on savolla&#39;s blog</title>
    <link>https://savolla.github.io/tags/howto/</link>
    <description>Recent content in howto on savolla&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2075. All rights reserved.</copyright><atom:link href="https://savolla.github.io/tags/howto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>less known vim tricks</title>
      <link>https://savolla.github.io/posts/less-known-vim-tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://savolla.github.io/posts/less-known-vim-tricks/</guid>
      <description>ourput redirection  you can redirect outputs of a shell command in vim  press ESC :r !ls -la RET    whitespace removal  remove all trailing whitespaces. you can also make the following a permanent macro  press ESC :%s/\s\+$//e RET    time travel  show the file 10 mins ago  press ESC :earlier 10m RET   show the file after 10 mins  press ESC :later 10m RET    </description>
    </item>
    
    <item>
      <title>permanent macros in vim</title>
      <link>https://savolla.github.io/posts/permanent-macros-in-vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://savolla.github.io/posts/permanent-macros-in-vim/</guid>
      <description>this is a short step by step tutorial to save your vim macro and use it everytime
 fire up vim do q a create your macro press q to finish exit vim :q! vim ~/.vimrc type let @q = &#39;&#39; put your cursor on first single quote do &amp;quot; a p macro should be pasted inside single quotes like:  let @q = &amp;#39;your_macro_content&amp;#39;  save and exit ESC :wq fire up vim again do @ q  now you should have your macro saved.</description>
    </item>
    
    <item>
      <title>programming in doom emacs</title>
      <link>https://savolla.github.io/posts/programming-in-doom-emacs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://savolla.github.io/posts/programming-in-doom-emacs/</guid>
      <description>This is how I use doom emacs for daily coding. Doom and it&amp;rsquo;s packages are working together to make developer&amp;rsquo;s life easy. Here I made a complete list for you guys. This is a step by step guide to do coding on doom emacs. By the way when I say things like C-c C-p it means CTRL + c + p
before we start to make things work enable specified modules in your init file</description>
    </item>
    
    <item>
      <title>search code in Github</title>
      <link>https://savolla.github.io/posts/search-code-in-github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://savolla.github.io/posts/search-code-in-github/</guid>
      <description>  for example I&amp;rsquo;m searching for &amp;ldquo;setq&amp;rdquo; keyword which exists in &amp;ldquo;.doom.d&amp;rdquo; directory, file is called &amp;ldquo;config.el&amp;rdquo; and is written in &amp;ldquo;Emacs Lisp&amp;rdquo; language
  go to github search
  search for the following string
setq extension:el path:.doom.d filename:config.el language:&amp;#34;Emacs Lisp&amp;#34; extension:.el   </description>
    </item>
    
    <item>
      <title>what is gpg</title>
      <link>https://savolla.github.io/posts/what-is-gpg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://savolla.github.io/posts/what-is-gpg/</guid>
      <description>also called gnu privacy guard this is a key which helps to encrypt and decript files there are 2 types of gpg keys; private : unlocks everything you lock with that public : you send to other people gpg keys expire! so you need to generate them once or twice a year  how to generate a gpg key   first generate personal key:
gpg --full-gen-key   choose RSA and RSA</description>
    </item>
    
  </channel>
</rss>
