[{"content":"Hey I\u0026rsquo;m Oleksiy! I do digital electronics, Linux sysadmin, c/c++ dev, x86, ARM, os development, embedded systems and everything bare-metal! I\u0026rsquo;m a Computer Engineering student in Turkey. My interests are mostly between hardware and software. Contact me from Telegram or freenode to talk about geeky stuff! savolla is my username on freenode\n","description":"i do digital electronics, linux, c/c++ dev, x86, ARM, os development, embedded systems and everything bare-metal!","id":2,"section":"","tags":null,"title":"~/about","uri":"https://savolla.github.io/about/"},{"content":"ourput redirection  you can redirect outputs of a shell command in vim  press ESC :r !ls -la RET    whitespace removal  remove all trailing whitespaces. you can also make the following a permanent macro  press ESC :%s/\\s\\+$//e RET    time travel  show the file 10 mins ago  press ESC :earlier 10m RET   show the file after 10 mins  press ESC :later 10m RET    ","description":"","id":10,"section":"posts","tags":["vim","howto","tools"],"title":"less known vim tricks","uri":"https://savolla.github.io/posts/less-known-vim-tricks/"},{"content":"here! you found it! this is one single Makefile that fits all projects with this file structure:\n1 2 3 4 5 6 7 8 9  project / ├── include ├── build ├── lib ├── obj ├── src ├── test ├── main.c └── Makefile   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  TARGET_EXEC ?= a.out BUILD_DIR ?= ./build SRC_DIRS ?= ./src SRCS := $(shell find $(SRC_DIRS) -name *.cpp -or -name *.c -or -name *.s) OBJS := $(SRCS:%=$(BUILD_DIR)/%.o) DEPS := $(OBJS:.o=.d) INC_DIRS := $(shell find $(SRC_DIRS) -type d) INC_FLAGS := $(addprefix -I,$(INC_DIRS)) CPPFLAGS ?= $(INC_FLAGS) -MMD -MP $(BUILD_DIR)/$(TARGET_EXEC): $(OBJS) $(CC) $(OBJS) -o $@ $(LDFLAGS) # assembly $(BUILD_DIR)/%.s.o: %.s $(MKDIR_P) $(dir $@) $(AS) $(ASFLAGS) -c $\u0026lt; -o $@ # c source $(BUILD_DIR)/%.c.o: %.c $(MKDIR_P) $(dir $@) $(CC) $(CPPFLAGS) $(CFLAGS) -c $\u0026lt; -o $@ # c++ source $(BUILD_DIR)/%.cpp.o: %.cpp $(MKDIR_P) $(dir $@) $(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $\u0026lt; -o $@ .PHONY: clean clean: $(RM) -r $(BUILD_DIR) -include $(DEPS) MKDIR_P ?= mkdir -p   ","description":"","id":11,"section":"posts","tags":["tools","make","programming"],"title":"one Makefile for everything","uri":"https://savolla.github.io/posts/one-makefile-for-everything/"},{"content":"this is a short step by step tutorial to save your vim macro and use it everytime\n fire up vim do q a create your macro press q to finish exit vim :q! vim ~/.vimrc type let @q = '' put your cursor on first single quote do \u0026quot; a p macro should be pasted inside single quotes like:   1  let @q = \u0026#39;your_macro_content\u0026#39;    save and exit ESC :wq fire up vim again do @ q  now you should have your macro saved. after this moment everytime you open a vim session, this macro will be read from .vimrc and you will able to use it.\n","description":"","id":12,"section":"posts","tags":["vim","howto","tools"],"title":"permanent macros in vim","uri":"https://savolla.github.io/posts/permanent-macros-in-vim/"},{"content":"  for example I\u0026rsquo;m searching for \u0026ldquo;setq\u0026rdquo; keyword which exists in \u0026ldquo;.doom.d\u0026rdquo; directory, file is called \u0026ldquo;config.el\u0026rdquo; and is written in \u0026ldquo;Emacs Lisp\u0026rdquo; language\n  go to github search\n  search for the following string\n1  setq extension:el path:.doom.d filename:config.el language:\u0026#34;Emacs Lisp\u0026#34; extension:.el     ","description":"","id":13,"section":"posts","tags":["howto","tools","git"],"title":"search code in Github","uri":"https://savolla.github.io/posts/search-code-in-github/"},{"content":" also called gnu privacy guard this is a key which helps to encrypt and decript files there are 2 types of gpg keys; private : unlocks everything you lock with that public : you send to other people gpg keys expire ! so you need to generate them once or twice a year  how to generate a gpg key   first generate personal key:\n1  gpg --full-gen-key     choose RSA and RSA\n  choose 4096 for maximum security\n  choose y = 1 to make the key expire in one year\n  enter your real name and surname\n  enter your email\n  confirm\n  enter a password. this is the password of your key. DON\u0026rsquo;T FORGET IT\n  encrypt files with gpg   navigate to directory you want to encrypt (here I generate a random file)\n1  echo \u0026#34;secret message\u0026#34; \u0026gt; ~/secret-file.txt     encrypt the file\n1 2 3  # -r : recepient (in this case me) # -e : file to encrypt gpg -r your_mail@provider.com -e secret-file.txt   after this command, a file with gpg extension will be created. so now you can put this file (secret-file.txt.gpg) on the internet and no one will know what it is\n  remove the original file (optional)\n basic remove   1  rm secret-file.txt    deep remove (more secure)   1  shred -u secret-file.txt     decrypt files with gpg   decrypt command\n1  gpg -d secret-file.txt     then enter the password of your gpg key. the password you entered while generating the key\n  ","description":"","id":14,"section":"posts","tags":["tools","howto","gpg"],"title":"what is gpg","uri":"https://savolla.github.io/posts/what-is-gpg/"}]