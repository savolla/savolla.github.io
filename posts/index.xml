<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Posts on savolla&#39;s blog</title>
    <link>https://savolla.github.io/posts/</link>
    <description>Recent content in Posts on savolla&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>savolla@protonmail.com (savolla)</managingEditor>
    <webMaster>savolla@protonmail.com (savolla)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <sy:updatePeriod>daily</sy:updatePeriod>
    
        <atom:link href="https://savolla.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>Code Complete Notlarım</title>
        <link>https://savolla.github.io/posts/code-complete-notes/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/code-complete-notes/</guid>
        <description>bölüm 1 - yazılım inşasına giriş   yazara göre, bu kitap, etrafa dağılmış bilginin bir yere toplanmış hali
  yazılım geliştirme ve programlama aynı şey değildir
  yazılım inşası, yazılım geliştirme alanındaki bazı konuları içinde barındıran özelleşmiş bir alt daldır. yazılım inşası&amp;rsquo;nın (construction) dokunuğu dallar:
 coding and debugging unit testing detailed design integration construction planning    construction terimi, programlama termine benzemektedir.
  construction&amp;rsquo;ın yazılım konusunda yaptığı işler:</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>book</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Cracking the Coding Interview Notes</title>
        <link>https://savolla.github.io/posts/cracking-the-coding-interview-notes/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/cracking-the-coding-interview-notes/</guid>
        <description>Bu post&amp;rsquo;da Türkçe olarak Cracking the Coding Interview kitabının özetini çıkartıyorum. Ilk ve ikinci bölümleri ingilizce yazdım, dert etmeyin onları revize edip Türkçeleştireceğim. Bu kitapta, iş başvurularında dikkat edilecek hususlar çok güzel anlatılmıştır. Ben de en azından özetini çıkararak önemli yerleri sizinle paylaşmaya karar verdim. İyi okumalar
Bölüm 1  recruiters look for the following;  analytical skills  how confidently you solved the problem how optimal was your solution how fast you are how efficient was your algorithm   coding skills  how clean your code is how good your style was did you handle errors or not   computer science knowledge.</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>book</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>CSS Cheat Sheet</title>
        <link>https://savolla.github.io/posts/css-cheat-sheet/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/css-cheat-sheet/</guid>
        <description>how to   name a css file?
style.css or main.css
  how to link style.css with index.html ?
in html file,
1  &amp;lt;link href=&amp;#34;./style.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;/&amp;gt;     write internal css?
put your css code inside style tags
1 2 3 4 5 6 7  &amp;lt;head&amp;gt; &amp;lt;style&amp;gt; h3 { color : red; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt;     how comments look in css?
1  /* this is a comment */     change h1,h2 and h3 at the same selector?</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title>HTML Cheat Sheet</title>
        <link>https://savolla.github.io/posts/html-cheat-sheet/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/html-cheat-sheet/</guid>
        <description>how to   create a heading?
1  &amp;lt;h1&amp;gt;Heading&amp;lt;/h1&amp;gt;     create a paragraph element?
1  &amp;lt;p&amp;gt;paragraph&amp;lt;/p&amp;gt;     create an image element?
notice there are no closing forward slashes in img elements
1  &amp;lt;img src=&amp;#34;path/to/image&amp;#34;&amp;gt;     break a line?
1  &amp;lt;br/&amp;gt;     tell html to use latest html version?
by putting the docstring
1  &amp;lt;!</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title>Javascript Cheat Sheet</title>
        <link>https://savolla.github.io/posts/javascript-cheat-sheet/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/javascript-cheat-sheet/</guid>
        <description>concepts JSON  javascript object notation data representation format used in config files supported types;  strings: &amp;ldquo;hello world&amp;rdquo;, &amp;ldquo;savolla&amp;rdquo; numbers: 10, 1.5, -30 boolean: true, false null: null arrays: [1,2,3], [&amp;ldquo;Hello&amp;rdquo;, &amp;ldquo;world&amp;rdquo;] objects: {&amp;ldquo;key&amp;rdquo;:&amp;ldquo;value&amp;rdquo;}, {&amp;ldquo;age&amp;rdquo;:30}   everything in json is valid javascript code  tips facts  best learningn resource : You Don&amp;rsquo;t Know JS  how to create a json file this is actually an array in javascript.</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title>less known vim tricks</title>
        <link>https://savolla.github.io/posts/less-known-vim-tricks/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/less-known-vim-tricks/</guid>
        <description>ourput redirection  you can redirect outputs of a shell command in vim  press ESC :r !ls -la RET    whitespace removal  remove all trailing whitespaces. you can also make the following a permanent macro  press ESC :%s/\s\+$//e RET    time travel  show the file 10 mins ago  press ESC :earlier 10m RET   show the file after 10 mins  press ESC :later 10m RET    </description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>vim</category>
            
          
            
              <category>howto</category>
            
          
            
              <category>tools</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Making Embedded Systems Notlarım</title>
        <link>https://savolla.github.io/posts/making-embedded-systems-notes/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/making-embedded-systems-notes/</guid>
        <description>Making Embedded Systems Türkçe kitap özeti
Bölüm 0  microcontroller: kendi içinde, RAM&amp;rsquo;i kod hafızası yani FLASH (ROM, EEPROM) ve bir işlemcisi olan bütün bir cihazdır DSP: özelleşmiş bir microcontroller&amp;rsquo;dır. ana amacı, gelen analog bir sinyali işleyip ilginç sonuçlar elde etmektir. Normal microcontrollerlardan farkı, matematiksel işlemleri çok daha hızlı yapabiliyor olmasıdır.  Bölüm 1  Gömülü Sistem: tek bir amaç için tasarlanmış, içinde bir yazılım barındıran, genel amaçlı bir bilgisayara göre çok daha az işlem gücü ve hafızaya sahip cihazlara denir.</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>book</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>one Makefile for everything</title>
        <link>https://savolla.github.io/posts/one-makefile-for-everything/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/one-makefile-for-everything/</guid>
        <description>here! you found it! this is one single Makefile that fits all projects with this file structure:
1 2 3 4 5 6 7 8 9  project / ├── include ├── build ├── lib ├── obj ├── src ├── test ├── main.c └── Makefile   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  TARGET_EXEC ?</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>tools</category>
            
          
            
              <category>make</category>
            
          
            
              <category>programming</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>permanent macros in vim</title>
        <link>https://savolla.github.io/posts/permanent-macros-in-vim/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/permanent-macros-in-vim/</guid>
        <description>this is a short step by step tutorial to save your vim macro and use it everytime
 fire up vim do q a create your macro press q to finish exit vim :q! vim ~/.vimrc type let @q = &#39;&#39; put your cursor on first single quote do &amp;quot; a p macro should be pasted inside single quotes like:   1  let @q = &amp;#39;your_macro_content&amp;#39;    save and exit ESC :wq fire up vim again do @ q  now you should have your macro saved.</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>vim</category>
            
          
            
              <category>howto</category>
            
          
            
              <category>tools</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>programming in doom emacs</title>
        <link>https://savolla.github.io/posts/programming-in-doom-emacs/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/programming-in-doom-emacs/</guid>
        <description>This is how I use doom emacs for daily coding. Doom and it&amp;rsquo;s packages are working together to make developer&amp;rsquo;s life easy. Here I made a complete list for you guys. This is a step by step guide to do coding on doom emacs. By the way when I say things like C-c C-p it means CTRL + c + p
before we start to make things work enable specified modules in your init file</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>tools</category>
            
          
            
              <category>doom</category>
            
          
            
              <category>emacs</category>
            
          
            
              <category>programming</category>
            
          
            
              <category>howto</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>radare notes</title>
        <link>https://savolla.github.io/posts/radare-notes/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/radare-notes/</guid>
        <description>key bindings normal mode 1 2 3 4 5 6 7 8 9 10 11  V # enter visual mode and show hexdump view aaa # analyse the binary. unlocks other functions. do this first you open up a binary aaaa # experimnetal analysis. might take more time for huge binaries afl # see all funcitons (also called symbols) in the binary afll # really cool color coded function list s &amp;lt;FUNCTION&amp;gt; # seek to &amp;lt;FUNCTION&amp;gt; ii # show imports don&amp;#39;t forget to analyse first iS # show sections in memory is # show all symbols including global, local variables iz # show ascii strings iI # general binary information   visual mode 1 2 3 4 5 6  p # disassembler view pp # debuggin view ppp # byte distribution view pppp # byte string view for copying in C or Pyhton n # seek to next function N # seek to previous funciton   how to   jump to a function from debug or disassembler view</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title>savolla&#39;s music recommendations</title>
        <link>https://savolla.github.io/posts/music-recommendations/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/music-recommendations/</guid>
        <description>Here I made some album recommendations. this is my personal playlist which consists of very &amp;ldquo;non-normie&amp;rdquo; stuff. albums in this list will start with the most &amp;ldquo;normie&amp;rdquo; music and will incrementally get heavier
level 1 easier to digest and fun
 Tokyo Rose - Chases 2   great synthwave album.. my favorite song on this is midnight chase
 Dance with the Dead - Loved to Death  synthwave + some metal elements.</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>music</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>search code in Github</title>
        <link>https://savolla.github.io/posts/search-code-in-github/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/search-code-in-github/</guid>
        <description>  for example I&amp;rsquo;m searching for &amp;ldquo;setq&amp;rdquo; keyword which exists in &amp;ldquo;.doom.d&amp;rdquo; directory, file is called &amp;ldquo;config.el&amp;rdquo; and is written in &amp;ldquo;Emacs Lisp&amp;rdquo; language
  go to github search
  search for the following string
1  setq extension:el path:.doom.d filename:config.el language:&amp;#34;Emacs Lisp&amp;#34; extension:.el     </description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>howto</category>
            
          
            
              <category>tools</category>
            
          
            
              <category>git</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>what is gpg</title>
        <link>https://savolla.github.io/posts/what-is-gpg/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/what-is-gpg/</guid>
        <description>also called gnu privacy guard this is a key which helps to encrypt and decript files there are 2 types of gpg keys; private : unlocks everything you lock with that public : you send to other people gpg keys expire ! so you need to generate them once or twice a year  how to generate a gpg key   first generate personal key:
1  gpg --full-gen-key     choose RSA and RSA</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>tools</category>
            
          
            
              <category>howto</category>
            
          
            
              <category>gpg</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>