<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Posts on savolla&#39;s blog</title>
    <link>https://savolla.github.io/posts/</link>
    <description>Recent content in Posts on savolla&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>savolla@protonmail.com (savolla)</managingEditor>
    <webMaster>savolla@protonmail.com (savolla)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <sy:updatePeriod>daily</sy:updatePeriod>
    
        <atom:link href="https://savolla.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>Cracking the Coding Interview Notes</title>
        <link>https://savolla.github.io/posts/cracking-the-coding-interview-notes/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/cracking-the-coding-interview-notes/</guid>
        <description>Chapter 1  recruiters look for the following;  analytical skills  how confidently you solved the problem how optimal was your solution how fast you are how efficient was your algorithm   coding skills  how clean your code is how good was your style is did you handle errors or not   computer science knowledge. do you have strong foundation or not did you make challanging / interesting projects before or not do you communicate well or not   having knowledge of data structures and algorithms is really important and positively corelates with being a good developer the reason behind whiteboard coding is that recruiters want you to focus on actual problem solving instead of struggling in restricted computer environment when compilers spit errors all over the place.</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>book</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>less known vim tricks</title>
        <link>https://savolla.github.io/posts/less-known-vim-tricks/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/less-known-vim-tricks/</guid>
        <description>ourput redirection  you can redirect outputs of a shell command in vim  press ESC :r !ls -la RET    whitespace removal  remove all trailing whitespaces. you can also make the following a permanent macro  press ESC :%s/\s\+$//e RET    time travel  show the file 10 mins ago  press ESC :earlier 10m RET   show the file after 10 mins  press ESC :later 10m RET    </description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>vim</category>
            
          
            
              <category>howto</category>
            
          
            
              <category>tools</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>one Makefile for everything</title>
        <link>https://savolla.github.io/posts/one-makefile-for-everything/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/one-makefile-for-everything/</guid>
        <description>here! you found it! this is one single Makefile that fits all projects with this file structure:
1 2 3 4 5 6 7 8 9  project / ├── include ├── build ├── lib ├── obj ├── src ├── test ├── main.c └── Makefile   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  TARGET_EXEC ?</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>tools</category>
            
          
            
              <category>make</category>
            
          
            
              <category>programming</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>permanent macros in vim</title>
        <link>https://savolla.github.io/posts/permanent-macros-in-vim/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/permanent-macros-in-vim/</guid>
        <description>this is a short step by step tutorial to save your vim macro and use it everytime
 fire up vim do q a create your macro press q to finish exit vim :q! vim ~/.vimrc type let @q = &#39;&#39; put your cursor on first single quote do &amp;quot; a p macro should be pasted inside single quotes like:   1  let @q = &amp;#39;your_macro_content&amp;#39;    save and exit ESC :wq fire up vim again do @ q  now you should have your macro saved.</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>vim</category>
            
          
            
              <category>howto</category>
            
          
            
              <category>tools</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>programming in doom emacs</title>
        <link>https://savolla.github.io/posts/programming-in-doom-emacs/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/programming-in-doom-emacs/</guid>
        <description>This is how I use doom emacs for daily coding. Doom and it&amp;rsquo;s packages are working together to make developer&amp;rsquo;s life easy. Here I made a complete list for you guys. This is a step by step guide to do coding on doom emacs. By the way when I say things like C-c C-p it means CTRL + c + p
before we start to make things work enable specified modules in your init file</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>tools</category>
            
          
            
              <category>doom</category>
            
          
            
              <category>emacs</category>
            
          
            
              <category>programming</category>
            
          
            
              <category>howto</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>savolla&#39;s music recommendations</title>
        <link>https://savolla.github.io/posts/music-recommendations/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/music-recommendations/</guid>
        <description>Here I made some album recommendations. this is my personal playlist which consists of very &amp;ldquo;non-normie&amp;rdquo; stuff. albums in this list will start with the most &amp;ldquo;normie&amp;rdquo; music and will incrementally get heavier
level 1 easier to digest and fun
 Tokyo Rose - Chases 2 
great synthwave album.. my favorite song on this is midnight chase Dance with the Dead - Loved to Death
synthwave + some metal elements.</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>music</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>search code in Github</title>
        <link>https://savolla.github.io/posts/search-code-in-github/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/search-code-in-github/</guid>
        <description>  for example I&amp;rsquo;m searching for &amp;ldquo;setq&amp;rdquo; keyword which exists in &amp;ldquo;.doom.d&amp;rdquo; directory, file is called &amp;ldquo;config.el&amp;rdquo; and is written in &amp;ldquo;Emacs Lisp&amp;rdquo; language
  go to github search
  search for the following string
1  setq extension:el path:.doom.d filename:config.el language:&amp;#34;Emacs Lisp&amp;#34; extension:.el     </description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>howto</category>
            
          
            
              <category>tools</category>
            
          
            
              <category>git</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>what is gpg</title>
        <link>https://savolla.github.io/posts/what-is-gpg/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>savolla@protonmail.com (savolla)</author>
        
        <guid>https://savolla.github.io/posts/what-is-gpg/</guid>
        <description>also called gnu privacy guard this is a key which helps to encrypt and decript files there are 2 types of gpg keys; private : unlocks everything you lock with that public : you send to other people gpg keys expire ! so you need to generate them once or twice a year  how to generate a gpg key   first generate personal key:
1  gpg --full-gen-key     choose RSA and RSA</description>
        
        <dc:creator>[savolla]</dc:creator>
        
        
        
        
          
            
              <category>tools</category>
            
          
            
              <category>howto</category>
            
          
            
              <category>gpg</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>